
cleaningRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006598  08006598  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006598  08006598  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003744  20000014  080065b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003758  080065b4  00023758  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194a4  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033fa  00000000  00000000  000394e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003de38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003287  00000000  00000000  0003f208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011772  00000000  00000000  0004248f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009803c  00000000  00000000  00053c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebc3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005864  00000000  00000000  000ebcb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800640c 	.word	0x0800640c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800640c 	.word	0x0800640c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc92 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f866 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9de 	bl	800051c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8be 	bl	80002e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f986 	bl	8000474 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000168:	f000 f936 	bl	80003d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f9ac 	bl	80004c8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000170:	f000 f8f4 	bl	800035c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f002 ff44 	bl	8003000 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendData1 */
  sendData1Handle = osThreadNew(sendData1Task, NULL, &sendData1_attributes);
 8000178:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <main+0x90>)
 800017a:	2100      	movs	r1, #0
 800017c:	4819      	ldr	r0, [pc, #100]	; (80001e4 <main+0x94>)
 800017e:	f002 ffa5 	bl	80030cc <osThreadNew>
 8000182:	4602      	mov	r2, r0
 8000184:	4b18      	ldr	r3, [pc, #96]	; (80001e8 <main+0x98>)
 8000186:	601a      	str	r2, [r3, #0]

  /* creation of sendData2 */
  sendData2Handle = osThreadNew(sendData2Task, NULL, &sendData2_attributes);
 8000188:	4a18      	ldr	r2, [pc, #96]	; (80001ec <main+0x9c>)
 800018a:	2100      	movs	r1, #0
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <main+0xa0>)
 800018e:	f002 ff9d 	bl	80030cc <osThreadNew>
 8000192:	4602      	mov	r2, r0
 8000194:	4b17      	ldr	r3, [pc, #92]	; (80001f4 <main+0xa4>)
 8000196:	601a      	str	r2, [r3, #0]

  /* creation of readAdc */
  readAdcHandle = osThreadNew(readAdcTask, NULL, &readAdc_attributes);
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <main+0xa8>)
 800019a:	2100      	movs	r1, #0
 800019c:	4817      	ldr	r0, [pc, #92]	; (80001fc <main+0xac>)
 800019e:	f002 ff95 	bl	80030cc <osThreadNew>
 80001a2:	4602      	mov	r2, r0
 80001a4:	4b16      	ldr	r3, [pc, #88]	; (8000200 <main+0xb0>)
 80001a6:	601a      	str	r2, [r3, #0]

  /* creation of getData1 */
  getData1Handle = osThreadNew(getData1Task, NULL, &getData1_attributes);
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <main+0xb4>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <main+0xb8>)
 80001ae:	f002 ff8d 	bl	80030cc <osThreadNew>
 80001b2:	4602      	mov	r2, r0
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <main+0xbc>)
 80001b6:	601a      	str	r2, [r3, #0]

  /* creation of getData2 */
  getData2Handle = osThreadNew(getData2Task, NULL, &getData2_attributes);
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <main+0xc0>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <main+0xc4>)
 80001be:	f002 ff85 	bl	80030cc <osThreadNew>
 80001c2:	4602      	mov	r2, r0
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <main+0xc8>)
 80001c6:	601a      	str	r2, [r3, #0]

  /* creation of btnControl */
  btnControlHandle = osThreadNew(btnControlTask, NULL, &btnControl_attributes);
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <main+0xcc>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <main+0xd0>)
 80001ce:	f002 ff7d 	bl	80030cc <osThreadNew>
 80001d2:	4602      	mov	r2, r0
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <main+0xd4>)
 80001d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d8:	f002 ff44 	bl	8003064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x8c>
 80001de:	bf00      	nop
 80001e0:	080064a8 	.word	0x080064a8
 80001e4:	08000589 	.word	0x08000589
 80001e8:	20003644 	.word	0x20003644
 80001ec:	080064cc 	.word	0x080064cc
 80001f0:	0800059d 	.word	0x0800059d
 80001f4:	20003638 	.word	0x20003638
 80001f8:	080064f0 	.word	0x080064f0
 80001fc:	080005b1 	.word	0x080005b1
 8000200:	2000368c 	.word	0x2000368c
 8000204:	08006514 	.word	0x08006514
 8000208:	08000625 	.word	0x08000625
 800020c:	20003548 	.word	0x20003548
 8000210:	08006538 	.word	0x08006538
 8000214:	08000639 	.word	0x08000639
 8000218:	2000354c 	.word	0x2000354c
 800021c:	0800655c 	.word	0x0800655c
 8000220:	0800064d 	.word	0x0800064d
 8000224:	20003640 	.word	0x20003640

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f006 f8df 	bl	80063fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fabc 	bl	80017fc <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f9fd 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fd26 	bl	8001cfc <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f9e7 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fee4 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002d2:	f000 f9d9 	bl	8000688 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3750      	adds	r7, #80	; 0x50
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <MX_ADC1_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_ADC1_Init+0x74>)
 80002fe:	2201      	movs	r2, #1
 8000300:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_ADC1_Init+0x74>)
 800030a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_ADC1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_ADC1_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <MX_ADC1_Init+0x74>)
 800031e:	f000 fbdf 	bl	8000ae0 <HAL_ADC_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f9ae 	bl	8000688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000330:	2301      	movs	r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000334:	2307      	movs	r3, #7
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_ADC1_Init+0x74>)
 800033e:	f000 fe87 	bl	8001050 <HAL_ADC_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000348:	f000 f99e 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200035c8 	.word	0x200035c8
 8000358:	40012400 	.word	0x40012400

0800035c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_ADC2_Init+0x74>)
 800036e:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <MX_ADC2_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_ADC2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_ADC2_Init+0x74>)
 800037a:	2201      	movs	r2, #1
 800037c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_ADC2_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_ADC2_Init+0x74>)
 8000386:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800038a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_ADC2_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_ADC2_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <MX_ADC2_Init+0x74>)
 800039a:	f000 fba1 	bl	8000ae0 <HAL_ADC_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003a4:	f000 f970 	bl	8000688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003b0:	2307      	movs	r3, #7
 80003b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_ADC2_Init+0x74>)
 80003ba:	f000 fe49 	bl	8001050 <HAL_ADC_ConfigChannel>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003c4:	f000 f960 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20003598 	.word	0x20003598
 80003d4:	40012800 	.word	0x40012800

080003d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_TIM4_Init+0x94>)
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <MX_TIM4_Init+0x98>)
 80003f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_TIM4_Init+0x94>)
 80003fc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000400:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_TIM4_Init+0x94>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_TIM4_Init+0x94>)
 800040a:	2201      	movs	r2, #1
 800040c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_TIM4_Init+0x94>)
 8000410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000414:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_TIM4_Init+0x94>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800041c:	4813      	ldr	r0, [pc, #76]	; (800046c <MX_TIM4_Init+0x94>)
 800041e:	f001 ffab 	bl	8002378 <HAL_TIM_Base_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000428:	f000 f92e 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	4619      	mov	r1, r3
 8000438:	480c      	ldr	r0, [pc, #48]	; (800046c <MX_TIM4_Init+0x94>)
 800043a:	f002 f947 	bl	80026cc <HAL_TIM_ConfigClockSource>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000444:	f000 f920 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000448:	2320      	movs	r3, #32
 800044a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_TIM4_Init+0x94>)
 8000456:	f002 fb0d 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000460:	f000 f912 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20003550 	.word	0x20003550
 8000470:	40000800 	.word	0x40000800

08000474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <MX_USART1_UART_Init+0x50>)
 800047c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000480:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_USART1_UART_Init+0x4c>)
 80004ac:	f002 fb52 	bl	8002b54 <HAL_UART_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b6:	f000 f8e7 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200035f8 	.word	0x200035f8
 80004c4:	40013800 	.word	0x40013800

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <MX_USART2_UART_Init+0x50>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 8000500:	f002 fb28 	bl	8002b54 <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800050a:	f000 f8bd 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20003648 	.word	0x20003648
 8000518:	40004400 	.word	0x40004400

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_GPIO_Init+0x64>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_GPIO_Init+0x64>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <MX_GPIO_Init+0x64>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_GPIO_Init+0x64>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <MX_GPIO_Init+0x64>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_GPIO_Init+0x64>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : select_Pin plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = select_Pin|plus_Pin|minus_Pin;
 8000560:	23e0      	movs	r3, #224	; 0xe0
 8000562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0x68>)
 8000574:	f000 ffd0 	bl	8001518 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800

08000588 <sendData1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendData1Task */
void sendData1Task(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
  transmissionDriver1();
 8000590:	f005 fcbc 	bl	8005f0c <transmissionDriver1>
  osDelay(5);
 8000594:	2005      	movs	r0, #5
 8000596:	f002 fe43 	bl	8003220 <osDelay>
  transmissionDriver1();
 800059a:	e7f9      	b.n	8000590 <sendData1Task+0x8>

0800059c <sendData2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendData2Task */
void sendData2Task(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendData2Task */
  /* Infinite loop */
  for(;;)
  {
	transmissionDriver2();
 80005a4:	f005 fcca 	bl	8005f3c <transmissionDriver2>
	osDelay(5);
 80005a8:	2005      	movs	r0, #5
 80005aa:	f002 fe39 	bl	8003220 <osDelay>
	transmissionDriver2();
 80005ae:	e7f9      	b.n	80005a4 <sendData2Task+0x8>

080005b0 <readAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAdcTask */
void readAdcTask(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readAdcTask */
	uint16_t val1,val2;
  /* Infinite loop */
  for(;;)
  {
	readAnalog2Values(&hadc1,&hadc2);
 80005b8:	4918      	ldr	r1, [pc, #96]	; (800061c <readAdcTask+0x6c>)
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <readAdcTask+0x70>)
 80005bc:	f005 f9b6 	bl	800592c <readAnalog2Values>
	val1=valuesMap(getAnalogValue1(),0,4095,0,1000);
 80005c0:	f005 f9e4 	bl	800598c <getAnalogValue1>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005d4:	2100      	movs	r1, #0
 80005d6:	f005 f9ed 	bl	80059b4 <valuesMap>
 80005da:	4603      	mov	r3, r0
 80005dc:	81fb      	strh	r3, [r7, #14]
	setDriver1AngleValue(val1);
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fae1 	bl	8005ba8 <setDriver1AngleValue>
	osDelay(5);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f002 fe1a 	bl	8003220 <osDelay>
	val2=valuesMap(getAnalogValue2(),0,4095,0,1000);
 80005ec:	f005 f9d8 	bl	80059a0 <getAnalogValue2>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000600:	2100      	movs	r1, #0
 8000602:	f005 f9d7 	bl	80059b4 <valuesMap>
 8000606:	4603      	mov	r3, r0
 8000608:	81bb      	strh	r3, [r7, #12]
	setDriver2AngleValue(val2);
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fadb 	bl	8005bc8 <setDriver2AngleValue>
	osDelay(5);
 8000612:	2005      	movs	r0, #5
 8000614:	f002 fe04 	bl	8003220 <osDelay>
	readAnalog2Values(&hadc1,&hadc2);
 8000618:	e7ce      	b.n	80005b8 <readAdcTask+0x8>
 800061a:	bf00      	nop
 800061c:	20003598 	.word	0x20003598
 8000620:	200035c8 	.word	0x200035c8

08000624 <getData1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getData1Task */
void getData1Task(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getData1Task */
  /* Infinite loop */
  for(;;)
  {
	MDI_getDataChannel1();
 800062c:	f005 fd6a 	bl	8006104 <MDI_getDataChannel1>
	osDelay(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f002 fdf5 	bl	8003220 <osDelay>
	MDI_getDataChannel1();
 8000636:	e7f9      	b.n	800062c <getData1Task+0x8>

08000638 <getData2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getData2Task */
void getData2Task(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getData2Task */
  /* Infinite loop */
  for(;;)
  {
	MDI_getDataChannel2();
 8000640:	f005 fe3e 	bl	80062c0 <MDI_getDataChannel2>
	osDelay(5);
 8000644:	2005      	movs	r0, #5
 8000646:	f002 fdeb 	bl	8003220 <osDelay>
	MDI_getDataChannel2();
 800064a:	e7f9      	b.n	8000640 <getData2Task+0x8>

0800064c <btnControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btnControlTask */
void btnControlTask(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btnControlTask */
	btnParameterInit();
 8000654:	f005 fa7c 	bl	8005b50 <btnParameterInit>
  /* Infinite loop */
  for(;;)
  {
	buttonController();
 8000658:	f005 fac6 	bl	8005be8 <buttonController>
    osDelay(50);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f002 fddf 	bl	8003220 <osDelay>
	buttonController();
 8000662:	e7f9      	b.n	8000658 <btnControlTask+0xc>

08000664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d101      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000676:	f000 fa17 	bl	8000aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40012c00 	.word	0x40012c00

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068e:	e7fe      	b.n	800068e <Error_Handler+0x6>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_MspInit+0x68>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_MspInit+0x68>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_MspInit+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_MspInit+0x68>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <HAL_MspInit+0x68>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x68>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	210f      	movs	r1, #15
 80006ca:	f06f 0001 	mvn.w	r0, #1
 80006ce:	f000 fef8 	bl	80014c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_MspInit+0x6c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_MspInit+0x6c>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a28      	ldr	r2, [pc, #160]	; (80007bc <HAL_ADC_MspInit+0xbc>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d122      	bne.n	8000766 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a26      	ldr	r2, [pc, #152]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000754:	2303      	movs	r3, #3
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4619      	mov	r1, r3
 800075e:	4819      	ldr	r0, [pc, #100]	; (80007c4 <HAL_ADC_MspInit+0xc4>)
 8000760:	f000 feda 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000764:	e026      	b.n	80007b4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_ADC_MspInit+0xc8>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d121      	bne.n	80007b4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_ADC_MspInit+0xc0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	2303      	movs	r3, #3
 80007a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_ADC_MspInit+0xc4>)
 80007b0:	f000 feb2 	bl	8001518 <HAL_GPIO_Init>
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800
 80007c8:	40012800 	.word	0x40012800

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_TIM_Base_MspInit+0x44>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d113      	bne.n	8000806 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	201e      	movs	r0, #30
 80007fc:	f000 fe61 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000800:	201e      	movs	r0, #30
 8000802:	f000 fe7a 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40000800 	.word	0x40000800
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a37      	ldr	r2, [pc, #220]	; (8000910 <HAL_UART_MspInit+0xf8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d132      	bne.n	800089e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000838:	4b36      	ldr	r3, [pc, #216]	; (8000914 <HAL_UART_MspInit+0xfc>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a35      	ldr	r2, [pc, #212]	; (8000914 <HAL_UART_MspInit+0xfc>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <HAL_UART_MspInit+0xfc>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <HAL_UART_MspInit+0xfc>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <HAL_UART_MspInit+0xfc>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <HAL_UART_MspInit+0xfc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4619      	mov	r1, r3
 800087c:	4826      	ldr	r0, [pc, #152]	; (8000918 <HAL_UART_MspInit+0x100>)
 800087e:	f000 fe4b 	bl	8001518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	4820      	ldr	r0, [pc, #128]	; (8000918 <HAL_UART_MspInit+0x100>)
 8000898:	f000 fe3e 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	e034      	b.n	8000908 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_UART_MspInit+0x104>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d12f      	bne.n	8000908 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d8:	2304      	movs	r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_UART_MspInit+0x100>)
 80008ec:	f000 fe14 	bl	8001518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f0:	2308      	movs	r3, #8
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x100>)
 8000904:	f000 fe08 	bl	8001518 <HAL_GPIO_Init>
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	40004400 	.word	0x40004400

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2019      	movs	r0, #25
 8000936:	f000 fdc4 	bl	80014c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800093a:	2019      	movs	r0, #25
 800093c:	f000 fddd 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_InitTick+0x9c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_InitTick+0x9c>)
 8000946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_InitTick+0x9c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fb48 	bl	8001ff8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000968:	f001 fb32 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 800096c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <HAL_InitTick+0xa0>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_InitTick+0xa4>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_InitTick+0xa8>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_InitTick+0xa4>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_InitTick+0xa4>)
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_InitTick+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_InitTick+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_InitTick+0xa4>)
 800099e:	f001 fceb 	bl	8002378 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_InitTick+0xa4>)
 80009aa:	f001 fd35 	bl	8002418 <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20003690 	.word	0x20003690
 80009c8:	40012c00 	.word	0x40012c00

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM1_UP_IRQHandler+0x10>)
 80009fe:	f001 fd5d 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20003690 	.word	0x20003690

08000a0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <TIM4_IRQHandler+0x14>)
 8000a12:	f001 fd53 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  buttonCounterIncrease();
 8000a16:	f004 fff3 	bl	8005a00 <buttonCounterIncrease>
  /* USER CODE END TIM4_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20003550 	.word	0x20003550

08000a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a32:	e003      	b.n	8000a3c <LoopCopyDataInit>

08000a34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a3a:	3104      	adds	r1, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a3c:	480a      	ldr	r0, [pc, #40]	; (8000a68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a44:	d3f6      	bcc.n	8000a34 <CopyDataInit>
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a48:	e002      	b.n	8000a50 <LoopFillZerobss>

08000a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a4c:	f842 3b04 	str.w	r3, [r2], #4

08000a50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a54:	d3f9      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a56:	f7ff ffe5 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f005 fc9f 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fb77 	bl	8000150 <main>
  bx lr
 8000a62:	4770      	bx	lr
  ldr r3, =_sidata
 8000a64:	080065a0 	.word	0x080065a0
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a6c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000a70:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000a74:	20003758 	.word	0x20003758

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 fd0d 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ff44 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fdfa 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	200036d8 	.word	0x200036d8

08000acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	200036d8 	.word	0x200036d8

08000ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e0be      	b.n	8000c80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fdee 	bl	8000700 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 fbdd 	bl	80012e4 <ADC_ConversionStop_Disable>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8099 	bne.w	8000c6e <HAL_ADC_Init+0x18e>
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8095 	bne.w	8000c6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7b1b      	ldrb	r3, [r3, #12]
 8000b66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_Init+0xa2>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <HAL_ADC_Init+0xa8>
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	e000      	b.n	8000b8a <HAL_ADC_Init+0xaa>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7d1b      	ldrb	r3, [r3, #20]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d119      	bne.n	8000bcc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	035a      	lsls	r2, r3, #13
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	e00b      	b.n	8000bcc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb8:	f043 0220 	orr.w	r2, r3, #32
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	f043 0201 	orr.w	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_ADC_Init+0x1a8>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfc:	d003      	beq.n	8000c06 <HAL_ADC_Init+0x126>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	051b      	lsls	r3, r3, #20
 8000c0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_ADC_Init+0x1ac>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d10b      	bne.n	8000c4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	f023 0303 	bic.w	r3, r3, #3
 8000c42:	f043 0201 	orr.w	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c4a:	e018      	b.n	8000c7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f023 0312 	bic.w	r3, r3, #18
 8000c54:	f043 0210 	orr.w	r2, r3, #16
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	f043 0201 	orr.w	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c6c:	e007      	b.n	8000c7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f043 0210 	orr.w	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	ffe1f7fd 	.word	0xffe1f7fd
 8000c8c:	ff1f0efe 	.word	0xff1f0efe

08000c90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_Start+0x1a>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e098      	b.n	8000ddc <HAL_ADC_Start+0x14c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 fac4 	bl	8001240 <ADC_Enable>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8087 	bne.w	8000dd2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ccc:	f023 0301 	bic.w	r3, r3, #1
 8000cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a41      	ldr	r2, [pc, #260]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d105      	bne.n	8000cee <HAL_ADC_Start+0x5e>
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d115      	bne.n	8000d1a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d026      	beq.n	8000d56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d18:	e01d      	b.n	8000d56 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d004      	beq.n	8000d3a <HAL_ADC_Start+0xaa>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10d      	bne.n	8000d56 <HAL_ADC_Start+0xc6>
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f023 0206 	bic.w	r2, r3, #6
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d6e:	e002      	b.n	8000d76 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0202 	mvn.w	r2, #2
 8000d86:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d96:	d113      	bne.n	8000dc0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	e00c      	b.n	8000dda <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e003      	b.n	8000dda <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40012800 	.word	0x40012800
 8000de8:	40012400 	.word	0x40012400

08000dec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <HAL_ADC_Stop+0x1a>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e01a      	b.n	8000e3c <HAL_ADC_Stop+0x50>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fa68 	bl	80012e4 <ADC_ConversionStop_Disable>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d109      	bne.n	8000e32 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	f043 0201 	orr.w	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e5a:	f7ff fe37 	bl	8000acc <HAL_GetTick>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00b      	beq.n	8000e86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f043 0220 	orr.w	r2, r3, #32
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0c8      	b.n	8001018 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d12a      	bne.n	8000eea <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d123      	bne.n	8000eea <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ea2:	e01a      	b.n	8000eda <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eaa:	d016      	beq.n	8000eda <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <HAL_ADC_PollForConversion+0x7e>
 8000eb2:	f7ff fe0b 	bl	8000acc <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d20b      	bcs.n	8000eda <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec6:	f043 0204 	orr.w	r2, r3, #4
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e09e      	b.n	8001018 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0dd      	beq.n	8000ea4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ee8:	e06c      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000eea:	4b4d      	ldr	r3, [pc, #308]	; (8001020 <HAL_ADC_PollForConversion+0x1dc>)
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f001 f986 	bl	8002200 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6919      	ldr	r1, [r3, #16]
 8000f00:	4b48      	ldr	r3, [pc, #288]	; (8001024 <HAL_ADC_PollForConversion+0x1e0>)
 8000f02:	400b      	ands	r3, r1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d118      	bne.n	8000f3a <HAL_ADC_PollForConversion+0xf6>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68d9      	ldr	r1, [r3, #12]
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_ADC_PollForConversion+0x1e4>)
 8000f10:	400b      	ands	r3, r1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d111      	bne.n	8000f3a <HAL_ADC_PollForConversion+0xf6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6919      	ldr	r1, [r3, #16]
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_ADC_PollForConversion+0x1e8>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d108      	bne.n	8000f36 <HAL_ADC_PollForConversion+0xf2>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68d9      	ldr	r1, [r3, #12]
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <HAL_ADC_PollForConversion+0x1ec>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_PollForConversion+0xf2>
 8000f32:	2314      	movs	r3, #20
 8000f34:	e020      	b.n	8000f78 <HAL_ADC_PollForConversion+0x134>
 8000f36:	2329      	movs	r3, #41	; 0x29
 8000f38:	e01e      	b.n	8000f78 <HAL_ADC_PollForConversion+0x134>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6919      	ldr	r1, [r3, #16]
 8000f40:	4b3a      	ldr	r3, [pc, #232]	; (800102c <HAL_ADC_PollForConversion+0x1e8>)
 8000f42:	400b      	ands	r3, r1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d106      	bne.n	8000f56 <HAL_ADC_PollForConversion+0x112>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <HAL_ADC_PollForConversion+0x1ec>)
 8000f50:	400b      	ands	r3, r1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00d      	beq.n	8000f72 <HAL_ADC_PollForConversion+0x12e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <HAL_ADC_PollForConversion+0x1f0>)
 8000f5e:	400b      	ands	r3, r1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x132>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <HAL_ADC_PollForConversion+0x1f0>)
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x132>
 8000f72:	2354      	movs	r3, #84	; 0x54
 8000f74:	e000      	b.n	8000f78 <HAL_ADC_PollForConversion+0x134>
 8000f76:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f7e:	e01d      	b.n	8000fbc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f86:	d016      	beq.n	8000fb6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_ADC_PollForConversion+0x15a>
 8000f8e:	f7ff fd9d 	bl	8000acc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d20b      	bcs.n	8000fb6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f043 0204 	orr.w	r2, r3, #4
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e030      	b.n	8001018 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8dd      	bhi.n	8000f80 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f06f 0212 	mvn.w	r2, #18
 8000fcc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fe4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fe8:	d115      	bne.n	8001016 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d111      	bne.n	8001016 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	24924924 	.word	0x24924924
 8001028:	00924924 	.word	0x00924924
 800102c:	12492492 	.word	0x12492492
 8001030:	00492492 	.word	0x00492492
 8001034:	00249249 	.word	0x00249249

08001038 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x20>
 800106c:	2302      	movs	r3, #2
 800106e:	e0dc      	b.n	800122a <HAL_ADC_ConfigChannel+0x1da>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b06      	cmp	r3, #6
 800107e:	d81c      	bhi.n	80010ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b05      	subs	r3, #5
 8001092:	221f      	movs	r2, #31
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4019      	ands	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b05      	subs	r3, #5
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
 80010b8:	e03c      	b.n	8001134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d81c      	bhi.n	80010fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b23      	subs	r3, #35	; 0x23
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	4019      	ands	r1, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b23      	subs	r3, #35	; 0x23
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
 80010fa:	e01b      	b.n	8001134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b41      	subs	r3, #65	; 0x41
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	3b41      	subs	r3, #65	; 0x41
 8001128:	fa00 f203 	lsl.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d91c      	bls.n	8001176 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68d9      	ldr	r1, [r3, #12]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	3b1e      	subs	r3, #30
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6898      	ldr	r0, [r3, #8]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	3b1e      	subs	r3, #30
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	e019      	b.n	80011aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6919      	ldr	r1, [r3, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	2207      	movs	r2, #7
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4019      	ands	r1, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d003      	beq.n	80011ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b6:	2b11      	cmp	r3, #17
 80011b8:	d132      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_ADC_ConfigChannel+0x1e4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d125      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d126      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011e0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b10      	cmp	r3, #16
 80011e8:	d11a      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_ADC_ConfigChannel+0x1e8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_ADC_ConfigChannel+0x1ec>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0c9a      	lsrs	r2, r3, #18
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001200:	e002      	b.n	8001208 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f9      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x1b2>
 800120e:	e007      	b.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	f043 0220 	orr.w	r2, r3, #32
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40012400 	.word	0x40012400
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b01      	cmp	r3, #1
 800125c:	d039      	beq.n	80012d2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <ADC_Enable+0x9c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <ADC_Enable+0xa0>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800127c:	e002      	b.n	8001284 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800128a:	f7ff fc1f 	bl	8000acc <HAL_GetTick>
 800128e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001290:	e018      	b.n	80012c4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001292:	f7ff fc1b 	bl	8000acc <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d911      	bls.n	80012c4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e007      	b.n	80012d4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d1df      	bne.n	8001292 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83

080012e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d127      	bne.n	800134e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130e:	f7ff fbdd 	bl	8000acc <HAL_GetTick>
 8001312:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001314:	e014      	b.n	8001340 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001316:	f7ff fbd9 	bl	8000acc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d90d      	bls.n	8001340 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f043 0210 	orr.w	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e007      	b.n	8001350 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d0e3      	beq.n	8001316 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4906      	ldr	r1, [pc, #24]	; (80013f0 <__NVIC_EnableIRQ+0x34>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff4f 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff64 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ffb2 	bl	8001448 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff81 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff57 	bl	80013bc <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b08b      	sub	sp, #44	; 0x2c
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	e127      	b.n	800177c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800152c:	2201      	movs	r2, #1
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8116 	bne.w	8001776 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b12      	cmp	r3, #18
 8001550:	d034      	beq.n	80015bc <HAL_GPIO_Init+0xa4>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d80d      	bhi.n	8001572 <HAL_GPIO_Init+0x5a>
 8001556:	2b02      	cmp	r3, #2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x9a>
 800155a:	2b02      	cmp	r3, #2
 800155c:	d804      	bhi.n	8001568 <HAL_GPIO_Init+0x50>
 800155e:	2b00      	cmp	r3, #0
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
 8001562:	2b01      	cmp	r3, #1
 8001564:	d01c      	beq.n	80015a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001566:	e048      	b.n	80015fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001568:	2b03      	cmp	r3, #3
 800156a:	d043      	beq.n	80015f4 <HAL_GPIO_Init+0xdc>
 800156c:	2b11      	cmp	r3, #17
 800156e:	d01b      	beq.n	80015a8 <HAL_GPIO_Init+0x90>
          break;
 8001570:	e043      	b.n	80015fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001572:	4a89      	ldr	r2, [pc, #548]	; (8001798 <HAL_GPIO_Init+0x280>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d026      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
 8001578:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_GPIO_Init+0x280>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d806      	bhi.n	800158c <HAL_GPIO_Init+0x74>
 800157e:	4a87      	ldr	r2, [pc, #540]	; (800179c <HAL_GPIO_Init+0x284>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d020      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
 8001584:	4a86      	ldr	r2, [pc, #536]	; (80017a0 <HAL_GPIO_Init+0x288>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01d      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
          break;
 800158a:	e036      	b.n	80015fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800158c:	4a85      	ldr	r2, [pc, #532]	; (80017a4 <HAL_GPIO_Init+0x28c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
 8001592:	4a85      	ldr	r2, [pc, #532]	; (80017a8 <HAL_GPIO_Init+0x290>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d016      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
 8001598:	4a84      	ldr	r2, [pc, #528]	; (80017ac <HAL_GPIO_Init+0x294>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xae>
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e028      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e023      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01e      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e019      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e012      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e008      	b.n	80015fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d801      	bhi.n	8001604 <HAL_GPIO_Init+0xec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	e001      	b.n	8001608 <HAL_GPIO_Init+0xf0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	d802      	bhi.n	8001616 <HAL_GPIO_Init+0xfe>
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x104>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	3b08      	subs	r3, #8
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	210f      	movs	r1, #15
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	6a39      	ldr	r1, [r7, #32]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	431a      	orrs	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8096 	beq.w	8001776 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164a:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_GPIO_Init+0x298>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_GPIO_Init+0x298>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x298>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001662:	4a54      	ldr	r2, [pc, #336]	; (80017b4 <HAL_GPIO_Init+0x29c>)
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x2a0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x19e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x2a4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x19a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x2a8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x196>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x192>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x1a0>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x1a0>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x1a0>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x1a0>
 80016b6:	2300      	movs	r3, #0
 80016b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c8:	493a      	ldr	r1, [pc, #232]	; (80017b4 <HAL_GPIO_Init+0x29c>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4938      	ldr	r1, [pc, #224]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
 80016ee:	e006      	b.n	80016fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4933      	ldr	r1, [pc, #204]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	492e      	ldr	r1, [pc, #184]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	43db      	mvns	r3, r3
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001722:	4013      	ands	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4924      	ldr	r1, [pc, #144]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	491f      	ldr	r1, [pc, #124]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 800174a:	4013      	ands	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	491a      	ldr	r1, [pc, #104]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	43db      	mvns	r3, r3
 8001770:	4915      	ldr	r1, [pc, #84]	; (80017c8 <HAL_GPIO_Init+0x2b0>)
 8001772:	4013      	ands	r3, r2
 8001774:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	3301      	adds	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	f47f aed0 	bne.w	800152c <HAL_GPIO_Init+0x14>
  }
}
 800178c:	bf00      	nop
 800178e:	372c      	adds	r7, #44	; 0x2c
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	10210000 	.word	0x10210000
 800179c:	10110000 	.word	0x10110000
 80017a0:	10120000 	.word	0x10120000
 80017a4:	10310000 	.word	0x10310000
 80017a8:	10320000 	.word	0x10320000
 80017ac:	10220000 	.word	0x10220000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40011400 	.word	0x40011400
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e26c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	d00c      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001828:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
 8001834:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x12c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e246      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 80018b8:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a67      	ldr	r2, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f8f8 	bl	8000acc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f8f4 	bl	8000acc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1fa      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe4>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff f8e4 	bl	8000acc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f8e0 	bl	8000acc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1e6      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x10c>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1ba      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4939      	ldr	r1, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f899 	bl	8000acc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff f895 	bl	8000acc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e19b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f878 	bl	8000acc <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f874 	bl	8000acc <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e17a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03a      	beq.n	8001a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff f858 	bl	8000acc <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff f854 	bl	8000acc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e15a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 fb0a 	bl	8002058 <RCC_Delay>
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f83e 	bl	8000acc <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f83a 	bl	8000acc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e140      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	42420000 	.word	0x42420000
 8001a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e9      	bne.n	8001a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a6 	beq.w	8001bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b97      	ldr	r3, [pc, #604]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b94      	ldr	r3, [pc, #592]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a93      	ldr	r2, [pc, #588]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b8e      	ldr	r3, [pc, #568]	; (8001cf4 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	; (8001cf4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8a      	ldr	r2, [pc, #552]	; (8001cf4 <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7fe fffb 	bl	8000acc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7fe fff7 	bl	8000acc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0fd      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <HAL_RCC_OscConfig+0x4f8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x312>
 8001b00:	4b7b      	ldr	r3, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e02d      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x334>
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a75      	ldr	r2, [pc, #468]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a72      	ldr	r2, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	e01c      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x356>
 8001b38:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a6c      	ldr	r2, [pc, #432]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	4b64      	ldr	r3, [pc, #400]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a63      	ldr	r2, [pc, #396]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7fe ffab 	bl	8000acc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7fe ffa7 	bl	8000acc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0ab      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <HAL_RCC_OscConfig+0x37e>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ff95 	bl	8000acc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe ff91 	bl	8000acc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e095      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8081 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d061      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d146      	bne.n	8001c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x4fc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe ff65 	bl	8000acc <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe ff61 	bl	8000acc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e067      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	492d      	ldr	r1, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a19      	ldr	r1, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	430b      	orrs	r3, r1
 8001c52:	4927      	ldr	r1, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x4fc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7fe ff35 	bl	8000acc <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe ff31 	bl	8000acc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e037      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46a>
 8001c84:	e02f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_RCC_OscConfig+0x4fc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7fe ff1e 	bl	8000acc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe ff1a 	bl	8000acc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e020      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x498>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42420060 	.word	0x42420060

08001cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0d0      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4965      	ldr	r1, [pc, #404]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	494d      	ldr	r1, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d040      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e073      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06b      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dec:	f7fe fe6e 	bl	8000acc <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe fe6a 	bl	8000acc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e053      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d210      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e032      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8a:	f000 f821 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4601      	mov	r1, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fd38 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08006580 	.word	0x08006580
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b490      	push	{r4, r7}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed8:	1d3c      	adds	r4, r7, #4
 8001eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0e:	e02d      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f22:	4413      	add	r3, r2
 8001f24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c5b      	lsrs	r3, r3, #17
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f42:	4413      	add	r3, r2
 8001f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4e:	fb02 f203 	mul.w	r2, r2, r3
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e004      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	623b      	str	r3, [r7, #32]
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6e:	623b      	str	r3, [r7, #32]
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc90      	pop	{r4, r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	08006468 	.word	0x08006468
 8001f84:	08006478 	.word	0x08006478
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	007a1200 	.word	0x007a1200
 8001f90:	003d0900 	.word	0x003d0900

08001f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f7ff fff2 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08006590 	.word	0x08006590

08001fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08006590 	.word	0x08006590

08001ff8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	220f      	movs	r2, #15
 8002006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_GetClockConfig+0x58>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCC_GetClockConfig+0x58>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_GetClockConfig+0x58>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_RCC_GetClockConfig+0x58>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_GetClockConfig+0x5c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0207 	and.w	r2, r3, #7
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	40022000 	.word	0x40022000

08002058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <RCC_Delay+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <RCC_Delay+0x38>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002074:	bf00      	nop
  }
  while (Delay --);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <RCC_Delay+0x1c>
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d07d      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b4:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	61d3      	str	r3, [r2, #28]
 80020cc:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d118      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a42      	ldr	r2, [pc, #264]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f4:	f7fe fcea 	bl	8000acc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	e008      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe fce6 	bl	8000acc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e06d      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211a:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d02e      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d027      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002138:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800214e:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe fcb5 	bl	8000acc <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fcb1 	bl	8000acc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e036      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4917      	ldr	r1, [pc, #92]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	4313      	orrs	r3, r2
 8002198:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4904      	ldr	r1, [pc, #16]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42420440 	.word	0x42420440

08002200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b08d      	sub	sp, #52	; 0x34
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800220a:	f107 040c 	add.w	r4, r7, #12
 800220e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	2300      	movs	r3, #0
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d07f      	beq.n	8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002234:	2b10      	cmp	r3, #16
 8002236:	d002      	beq.n	800223e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d048      	beq.n	80022ce <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800223c:	e08b      	b.n	8002356 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d07f      	beq.n	8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800225c:	4413      	add	r3, r2
 800225e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002262:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0c5b      	lsrs	r3, r3, #17
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800227c:	4413      	add	r3, r2
 800227e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800228e:	4a37      	ldr	r2, [pc, #220]	; (800236c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	fbb2 f2f3 	udiv	r2, r2, r3
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	e004      	b.n	80022aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	4a33      	ldr	r2, [pc, #204]	; (8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b6:	d102      	bne.n	80022be <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022bc:	e048      	b.n	8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022cc:	e040      	b.n	8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022de:	d108      	bne.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80022ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f0:	e01f      	b.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fc:	d109      	bne.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800230a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	e00f      	b.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800231c:	d11a      	bne.n	8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d014      	beq.n	8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800232a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002330:	e010      	b.n	8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002332:	e00f      	b.n	8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002334:	f7ff fe4c 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0b9b      	lsrs	r3, r3, #14
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	3301      	adds	r3, #1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002354:	bf00      	nop
    }
  }
  return (frequency);
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002358:	4618      	mov	r0, r3
 800235a:	3734      	adds	r7, #52	; 0x34
 800235c:	46bd      	mov	sp, r7
 800235e:	bd90      	pop	{r4, r7, pc}
 8002360:	0800647c 	.word	0x0800647c
 8002364:	0800648c 	.word	0x0800648c
 8002368:	40021000 	.word	0x40021000
 800236c:	007a1200 	.word	0x007a1200
 8002370:	003d0900 	.word	0x003d0900
 8002374:	aaaaaaab 	.word	0xaaaaaaab

08002378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e041      	b.n	800240e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fa14 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f000 fa64 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e03a      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_TIM_Base_Start_IT+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d009      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x58>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d010      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	e007      	b.n	80024a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9a4 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f997 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9a6 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f97a 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f96d 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f97c 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f950 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f943 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f952 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f926 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f919 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f928 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f812 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa6b 	bl	8002b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8ec 	bl	8002870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa36 	bl	8002b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0a6      	b.n	8002832 <HAL_TIM_ConfigClockSource+0x166>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d067      	beq.n	80027ec <HAL_TIM_ConfigClockSource+0x120>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d80b      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x6c>
 8002720:	2b10      	cmp	r3, #16
 8002722:	d073      	beq.n	800280c <HAL_TIM_ConfigClockSource+0x140>
 8002724:	2b10      	cmp	r3, #16
 8002726:	d802      	bhi.n	800272e <HAL_TIM_ConfigClockSource+0x62>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d06f      	beq.n	800280c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800272c:	e078      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800272e:	2b20      	cmp	r3, #32
 8002730:	d06c      	beq.n	800280c <HAL_TIM_ConfigClockSource+0x140>
 8002732:	2b30      	cmp	r3, #48	; 0x30
 8002734:	d06a      	beq.n	800280c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002736:	e073      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d00d      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x8c>
 800273c:	2b70      	cmp	r3, #112	; 0x70
 800273e:	d804      	bhi.n	800274a <HAL_TIM_ConfigClockSource+0x7e>
 8002740:	2b50      	cmp	r3, #80	; 0x50
 8002742:	d033      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0xe0>
 8002744:	2b60      	cmp	r3, #96	; 0x60
 8002746:	d041      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002748:	e06a      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274e:	d066      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x152>
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002754:	d017      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002756:	e063      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f000 f965 	bl	8002a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800277a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
      break;
 8002784:	e04c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f000 f94e 	bl	8002a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a8:	609a      	str	r2, [r3, #8]
      break;
 80027aa:	e039      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f000 f8c5 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2150      	movs	r1, #80	; 0x50
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f91c 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027ca:	e029      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	461a      	mov	r2, r3
 80027da:	f000 f8e3 	bl	80029a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2160      	movs	r1, #96	; 0x60
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f90c 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 80027ea:	e019      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	461a      	mov	r2, r3
 80027fa:	f000 f8a5 	bl	8002948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f8fc 	bl	8002a02 <TIM_ITRx_SetConfig>
      break;
 800280a:	e009      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 f8f3 	bl	8002a02 <TIM_ITRx_SetConfig>
        break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800281e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0xb8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d007      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <TIM_Base_SetConfig+0xbc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <TIM_Base_SetConfig+0x30>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	; (800293c <TIM_Base_SetConfig+0xb8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d007      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <TIM_Base_SetConfig+0xbc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d003      	beq.n	80028e6 <TIM_Base_SetConfig+0x62>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <TIM_Base_SetConfig+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d103      	bne.n	800292c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	615a      	str	r2, [r3, #20]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800

08002948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 030a 	bic.w	r3, r3, #10
 8002984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 0210 	bic.w	r2, r3, #16
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	031b      	lsls	r3, r3, #12
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	621a      	str	r2, [r3, #32]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f043 0307 	orr.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e046      	b.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00e      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d009      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10c      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800

08002b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e03f      	b.n	8002be6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd fe4c 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9a3 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08a      	sub	sp, #40	; 0x28
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d17c      	bne.n	8002d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_UART_Transmit+0x2c>
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e075      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x3e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e06e      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c42:	f7fd ff43 	bl	8000acc <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d108      	bne.n	8002c70 <HAL_UART_Transmit+0x82>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e003      	b.n	8002c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c80:	e02a      	b.n	8002cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f8df 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e036      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10b      	bne.n	8002cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e007      	b.n	8002cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1cf      	bne.n	8002c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8af 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e006      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b08a      	sub	sp, #40	; 0x28
 8002d16:	af02      	add	r7, sp, #8
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	f040 8089 	bne.w	8002e46 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Receive+0x2e>
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e081      	b.n	8002e48 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Receive+0x40>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e07a      	b.n	8002e48 <HAL_UART_Receive+0x136>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2222      	movs	r2, #34	; 0x22
 8002d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d68:	f7fd feb0 	bl	8000acc <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d108      	bne.n	8002d96 <HAL_UART_Receive+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e003      	b.n	8002d9e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002da6:	e043      	b.n	8002e30 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2120      	movs	r1, #32
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f84c 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e042      	b.n	8002e48 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10c      	bne.n	8002de2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	e01f      	b.n	8002e22 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	d007      	beq.n	8002dfc <HAL_UART_Receive+0xea>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <HAL_UART_Receive+0xf8>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e008      	b.n	8002e1c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1b6      	bne.n	8002da8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e60:	e02c      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e68:	d028      	beq.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e70:	f7fd fe2c 	bl	8000acc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d21d      	bcs.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e00f      	b.n	8002edc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d0c3      	beq.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f1e:	f023 030c 	bic.w	r3, r3, #12
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <UART_SetConfig+0x114>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f840 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f54:	f7ff f828 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8002f58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009a      	lsls	r2, r3, #2
 8002f64:	441a      	add	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <UART_SetConfig+0x118>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	0119      	lsls	r1, r3, #4
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <UART_SetConfig+0x118>)
 8002f92:	fba3 0302 	umull	r0, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2064      	movs	r0, #100	; 0x64
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	; 0x32
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <UART_SetConfig+0x118>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb0:	4419      	add	r1, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <UART_SetConfig+0x118>)
 8002fca:	fba3 0302 	umull	r0, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2064      	movs	r0, #100	; 0x64
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	; 0x32
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	440a      	add	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	51eb851f 	.word	0x51eb851f

08003000 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003006:	f3ef 8305 	mrs	r3, IPSR
 800300a:	60bb      	str	r3, [r7, #8]
  return(result);
 800300c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	607b      	str	r3, [r7, #4]
  return(result);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <osKernelInitialize+0x32>
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <osKernelInitialize+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d109      	bne.n	800303a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003026:	f3ef 8311 	mrs	r3, BASEPRI
 800302a:	603b      	str	r3, [r7, #0]
  return(result);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003032:	f06f 0305 	mvn.w	r3, #5
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e00c      	b.n	8003054 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <osKernelInitialize+0x60>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <osKernelInitialize+0x60>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e002      	b.n	8003054 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000030 	.word	0x20000030

08003064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800306a:	f3ef 8305 	mrs	r3, IPSR
 800306e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003070:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8310 	mrs	r3, PRIMASK
 800307a:	607b      	str	r3, [r7, #4]
  return(result);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <osKernelStart+0x32>
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <osKernelStart+0x64>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d109      	bne.n	800309e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800308a:	f3ef 8311 	mrs	r3, BASEPRI
 800308e:	603b      	str	r3, [r7, #0]
  return(result);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003096:	f06f 0305 	mvn.w	r3, #5
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e00e      	b.n	80030bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <osKernelStart+0x64>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <osKernelStart+0x64>)
 80030a8:	2202      	movs	r2, #2
 80030aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80030ac:	f001 f864 	bl	8004178 <vTaskStartScheduler>
      stat = osOK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e002      	b.n	80030bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030bc:	68fb      	ldr	r3, [r7, #12]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000030 	.word	0x20000030

080030cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b092      	sub	sp, #72	; 0x48
 80030d0:	af04      	add	r7, sp, #16
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030dc:	f3ef 8305 	mrs	r3, IPSR
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 8094 	bne.w	8003212 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	623b      	str	r3, [r7, #32]
  return(result);
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 808d 	bne.w	8003212 <osThreadNew+0x146>
 80030f8:	4b48      	ldr	r3, [pc, #288]	; (800321c <osThreadNew+0x150>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d106      	bne.n	800310e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003100:	f3ef 8311 	mrs	r3, BASEPRI
 8003104:	61fb      	str	r3, [r7, #28]
  return(result);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 8082 	bne.w	8003212 <osThreadNew+0x146>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07e      	beq.n	8003212 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003118:	2318      	movs	r3, #24
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800311c:	2300      	movs	r3, #0
 800311e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003120:	f107 031b 	add.w	r3, r7, #27
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d045      	beq.n	80031be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <osThreadNew+0x74>
        name = attr->name;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <osThreadNew+0x9a>
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b38      	cmp	r3, #56	; 0x38
 8003158:	d805      	bhi.n	8003166 <osThreadNew+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <osThreadNew+0x9e>
        return (NULL);
 8003166:	2300      	movs	r3, #0
 8003168:	e054      	b.n	8003214 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <osThreadNew+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b5b      	cmp	r3, #91	; 0x5b
 8003188:	d90a      	bls.n	80031a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <osThreadNew+0xd4>
        mem = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 800319e:	e010      	b.n	80031c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10c      	bne.n	80031c2 <osThreadNew+0xf6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d108      	bne.n	80031c2 <osThreadNew+0xf6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <osThreadNew+0xf6>
          mem = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80031bc:	e001      	b.n	80031c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d110      	bne.n	80031ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031d0:	9202      	str	r2, [sp, #8]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fe02 	bl	8003de8 <xTaskCreateStatic>
 80031e4:	4603      	mov	r3, r0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e013      	b.n	8003212 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d110      	bne.n	8003212 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fe49 	bl	8003e9a <xTaskCreate>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <osThreadNew+0x146>
          hTask = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003212:	697b      	ldr	r3, [r7, #20]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3738      	adds	r7, #56	; 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000030 	.word	0x20000030

08003220 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003228:	f3ef 8305 	mrs	r3, IPSR
 800322c:	613b      	str	r3, [r7, #16]
  return(result);
 800322e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10f      	bne.n	8003254 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003234:	f3ef 8310 	mrs	r3, PRIMASK
 8003238:	60fb      	str	r3, [r7, #12]
  return(result);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <osDelay+0x34>
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <osDelay+0x58>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d109      	bne.n	800325c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003248:	f3ef 8311 	mrs	r3, BASEPRI
 800324c:	60bb      	str	r3, [r7, #8]
  return(result);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <osDelay+0x3c>
    stat = osErrorISR;
 8003254:	f06f 0305 	mvn.w	r3, #5
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e007      	b.n	800326c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ff52 	bl	8004110 <vTaskDelay>
    }
  }

  return (stat);
 800326c:	697b      	ldr	r3, [r7, #20]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000030 	.word	0x20000030

0800327c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <vApplicationGetIdleTaskMemory+0x28>)
 800328c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	20000034 	.word	0x20000034
 80032a8:	20000090 	.word	0x20000090

080032ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80032bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4a06      	ldr	r2, [pc, #24]	; (80032dc <vApplicationGetTimerTaskMemory+0x30>)
 80032c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000290 	.word	0x20000290
 80032dc:	200002ec 	.word	0x200002ec

080032e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f103 0208 	add.w	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 0208 	add.w	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f103 0208 	add.w	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003392:	d103      	bne.n	800339c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e00c      	b.n	80033b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3308      	adds	r3, #8
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e002      	b.n	80033aa <vListInsert+0x2e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d2f6      	bcs.n	80033a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6852      	ldr	r2, [r2, #4]
 800340c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d103      	bne.n	8003420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	e7fe      	b.n	8003466 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003468:	f001 ff96 	bl	8005398 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	3b01      	subs	r3, #1
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d114      	bne.n	80034e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01a      	beq.n	80034fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3310      	adds	r3, #16
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f8d8 	bl	8004680 <xTaskRemoveFromEventList>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d012      	beq.n	80034fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <xQueueGenericReset+0xcc>)
 80034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	e009      	b.n	80034fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3310      	adds	r3, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fef7 	bl	80032e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3324      	adds	r3, #36	; 0x24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fef2 	bl	80032e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034fc:	f001 ff7a 	bl	80053f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	; 0x38
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <xQueueGenericCreateStatic+0x28>
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	e7fe      	b.n	8003536 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <xQueueGenericCreateStatic+0x42>
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e7fe      	b.n	8003550 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <xQueueGenericCreateStatic+0x4e>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <xQueueGenericCreateStatic+0x52>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueGenericCreateStatic+0x54>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <xQueueGenericCreateStatic+0x6c>
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	e7fe      	b.n	800357a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <xQueueGenericCreateStatic+0x78>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <xQueueGenericCreateStatic+0x7c>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <xQueueGenericCreateStatic+0x7e>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <xQueueGenericCreateStatic+0x96>
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035a6:	2350      	movs	r3, #80	; 0x50
 80035a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d009      	beq.n	80035c4 <xQueueGenericCreateStatic+0xb4>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e7fe      	b.n	80035c2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f805 	bl	80035f4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e002      	b.n	8003616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003622:	2101      	movs	r1, #1
 8003624:	69b8      	ldr	r0, [r7, #24]
 8003626:	f7ff ff0b 	bl	8003440 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <xQueueGenericSend+0x30>
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
 800366a:	e7fe      	b.n	800366a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <xQueueGenericSend+0x3e>
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <xQueueGenericSend+0x42>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <xQueueGenericSend+0x44>
 800367e:	2300      	movs	r3, #0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <xQueueGenericSend+0x5c>
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e7fe      	b.n	8003696 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d103      	bne.n	80036a6 <xQueueGenericSend+0x6a>
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <xQueueGenericSend+0x6e>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <xQueueGenericSend+0x70>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <xQueueGenericSend+0x88>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c4:	f001 f996 	bl	80049f4 <xTaskGetSchedulerState>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <xQueueGenericSend+0x98>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <xQueueGenericSend+0x9c>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <xQueueGenericSend+0x9e>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <xQueueGenericSend+0xb6>
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e7fe      	b.n	80036f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f2:	f001 fe51 	bl	8005398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <xQueueGenericSend+0xcc>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d129      	bne.n	800375c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800370e:	f000 f9ff 	bl	8003b10 <prvCopyDataToQueue>
 8003712:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	3324      	adds	r3, #36	; 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f000 ffad 	bl	8004680 <xTaskRemoveFromEventList>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <xQueueGenericSend+0x1f0>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	e00a      	b.n	8003754 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <xQueueGenericSend+0x1f0>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003754:	f001 fe4e 	bl	80053f4 <vPortExitCritical>
				return pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	e063      	b.n	8003824 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003762:	f001 fe47 	bl	80053f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e05c      	b.n	8003824 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f000 ffe5 	bl	8004744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800377e:	f001 fe39 	bl	80053f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003782:	f000 fd5d 	bl	8004240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003786:	f001 fe07 	bl	8005398 <vPortEnterCritical>
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSend+0x164>
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ac:	d103      	bne.n	80037b6 <xQueueGenericSend+0x17a>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b6:	f001 fe1d 	bl	80053f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 ffd4 	bl	8004770 <xTaskCheckForTimeOut>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d124      	bne.n	8003818 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d0:	f000 fa96 	bl	8003d00 <prvIsQueueFull>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	3310      	adds	r3, #16
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fefe 	bl	80045e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ea:	f000 fa21 	bl	8003c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037ee:	f000 fd35 	bl	800425c <xTaskResumeAll>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f af7c 	bne.w	80036f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <xQueueGenericSend+0x1f0>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e772      	b.n	80036f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800380c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380e:	f000 fa0f 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003812:	f000 fd23 	bl	800425c <xTaskResumeAll>
 8003816:	e76c      	b.n	80036f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800381a:	f000 fa09 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800381e:	f000 fd1d 	bl	800425c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003822:	2300      	movs	r3, #0
		}
	}
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	; 0x38
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <xQueueGenericSendFromISR+0x2c>
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e7fe      	b.n	800385a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <xQueueGenericSendFromISR+0x3a>
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <xQueueGenericSendFromISR+0x3e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <xQueueGenericSendFromISR+0x40>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <xQueueGenericSendFromISR+0x58>
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	e7fe      	b.n	8003886 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d103      	bne.n	8003896 <xQueueGenericSendFromISR+0x66>
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <xQueueGenericSendFromISR+0x6a>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <xQueueGenericSendFromISR+0x6c>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <xQueueGenericSendFromISR+0x84>
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e7fe      	b.n	80038b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038b4:	f001 fe2a 	bl	800550c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038b8:	f3ef 8211 	mrs	r2, BASEPRI
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	61ba      	str	r2, [r7, #24]
 80038ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <xQueueGenericSendFromISR+0xb6>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d12c      	bne.n	8003940 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f6:	f000 f90b 	bl	8003b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003902:	d112      	bne.n	800392a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f000 feb5 	bl	8004680 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800392a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800392e:	3301      	adds	r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b25a      	sxtb	r2, r3
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800393a:	2301      	movs	r3, #1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800393e:	e001      	b.n	8003944 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003940:	2300      	movs	r3, #0
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003950:	4618      	mov	r0, r3
 8003952:	3738      	adds	r7, #56	; 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <xQueueReceive+0x2e>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	e7fe      	b.n	8003984 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <xQueueReceive+0x3c>
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <xQueueReceive+0x40>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <xQueueReceive+0x42>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <xQueueReceive+0x5a>
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e7fe      	b.n	80039b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039b2:	f001 f81f 	bl	80049f4 <xTaskGetSchedulerState>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <xQueueReceive+0x6a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <xQueueReceive+0x6e>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xQueueReceive+0x70>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <xQueueReceive+0x88>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e7fe      	b.n	80039de <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80039e0:	f001 fcda 	bl	8005398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01f      	beq.n	8003a30 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f4:	f000 f8f6 	bl	8003be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	1e5a      	subs	r2, r3, #1
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00f      	beq.n	8003a28 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fe37 	bl	8004680 <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <xQueueReceive+0x1b4>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a28:	f001 fce4 	bl	80053f4 <vPortExitCritical>
				return pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e069      	b.n	8003b04 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a36:	f001 fcdd 	bl	80053f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e062      	b.n	8003b04 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a44:	f107 0310 	add.w	r3, r7, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fe7b 	bl	8004744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a52:	f001 fccf 	bl	80053f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a56:	f000 fbf3 	bl	8004240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a5a:	f001 fc9d 	bl	8005398 <vPortEnterCritical>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6a:	d103      	bne.n	8003a74 <xQueueReceive+0x11c>
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a7a:	b25b      	sxtb	r3, r3
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a80:	d103      	bne.n	8003a8a <xQueueReceive+0x132>
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8a:	f001 fcb3 	bl	80053f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a8e:	1d3a      	adds	r2, r7, #4
 8003a90:	f107 0310 	add.w	r3, r7, #16
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fe6a 	bl	8004770 <xTaskCheckForTimeOut>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d123      	bne.n	8003aea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa4:	f000 f916 	bl	8003cd4 <prvIsQueueEmpty>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d017      	beq.n	8003ade <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fd94 	bl	80045e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003abe:	f000 f8b7 	bl	8003c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ac2:	f000 fbcb 	bl	800425c <xTaskResumeAll>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d189      	bne.n	80039e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <xQueueReceive+0x1b4>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	e780      	b.n	80039e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae0:	f000 f8a6 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ae4:	f000 fbba 	bl	800425c <xTaskResumeAll>
 8003ae8:	e77a      	b.n	80039e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aec:	f000 f8a0 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003af0:	f000 fbb4 	bl	800425c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af6:	f000 f8ed 	bl	8003cd4 <prvIsQueueEmpty>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f43f af6f 	beq.w	80039e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3730      	adds	r7, #48	; 0x30
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14d      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 ff78 	bl	8004a30 <xTaskPriorityDisinherit>
 8003b40:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e043      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d119      	bne.n	8003b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6898      	ldr	r0, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	f002 fc42 	bl	80063e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d32b      	bcc.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	e026      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68d8      	ldr	r0, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	f002 fc28 	bl	80063e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d207      	bcs.n	8003bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d105      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bda:	697b      	ldr	r3, [r7, #20]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d303      	bcc.n	8003c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	461a      	mov	r2, r3
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f002 fbde 	bl	80063e4 <memcpy>
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c38:	f001 fbae 	bl	8005398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c44:	e011      	b.n	8003c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd14 	bl	8004680 <xTaskRemoveFromEventList>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c5e:	f000 fde7 	bl	8004830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	dce9      	bgt.n	8003c46 <prvUnlockQueue+0x16>
 8003c72:	e000      	b.n	8003c76 <prvUnlockQueue+0x46>
					break;
 8003c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c7e:	f001 fbb9 	bl	80053f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c82:	f001 fb89 	bl	8005398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	e011      	b.n	8003cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fcef 	bl	8004680 <xTaskRemoveFromEventList>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ca8:	f000 fdc2 	bl	8004830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	dce9      	bgt.n	8003c90 <prvUnlockQueue+0x60>
 8003cbc:	e000      	b.n	8003cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cc8:	f001 fb94 	bl	80053f4 <vPortExitCritical>
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cdc:	f001 fb5c 	bl	8005398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 fb7f 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d08:	f001 fb46 	bl	8005398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d102      	bne.n	8003d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e001      	b.n	8003d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d22:	f001 fb67 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e014      	b.n	8003d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <vQueueAddToRegistry+0x4c>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d4c:	490b      	ldr	r1, [pc, #44]	; (8003d7c <vQueueAddToRegistry+0x4c>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <vQueueAddToRegistry+0x4c>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d62:	e005      	b.n	8003d70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	d9e7      	bls.n	8003d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	200036dc 	.word	0x200036dc

08003d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d90:	f001 fb02 	bl	8005398 <vPortEnterCritical>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da0:	d103      	bne.n	8003daa <vQueueWaitForMessageRestricted+0x2a>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db6:	d103      	bne.n	8003dc0 <vQueueWaitForMessageRestricted+0x40>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	f001 fb18 	bl	80053f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3324      	adds	r3, #36	; 0x24
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fc29 	bl	800462c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff28 	bl	8003c30 <prvUnlockQueue>
	}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af04      	add	r7, sp, #16
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <xTaskCreateStatic+0x28>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e7fe      	b.n	8003e0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <xTaskCreateStatic+0x42>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e7fe      	b.n	8003e28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e2a:	235c      	movs	r3, #92	; 0x5c
 8003e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b5c      	cmp	r3, #92	; 0x5c
 8003e32:	d009      	beq.n	8003e48 <xTaskCreateStatic+0x60>
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e7fe      	b.n	8003e46 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01e      	beq.n	8003e8c <xTaskCreateStatic+0xa4>
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e66:	2300      	movs	r3, #0
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f850 	bl	8003f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e86:	f000 f8d3 	bl	8004030 <prvAddNewTaskToReadyList>
 8003e8a:	e001      	b.n	8003e90 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e90:	697b      	ldr	r3, [r7, #20]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af04      	add	r7, sp, #16
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 fb68 	bl	8005584 <pvPortMalloc>
 8003eb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ebc:	205c      	movs	r0, #92	; 0x5c
 8003ebe:	f001 fb61 	bl	8005584 <pvPortMalloc>
 8003ec2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed0:	e005      	b.n	8003ede <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f001 fc18 	bl	8005708 <vPortFree>
 8003ed8:	e001      	b.n	8003ede <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	9302      	str	r3, [sp, #8]
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f80e 	bl	8003f24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f08:	69f8      	ldr	r0, [r7, #28]
 8003f0a:	f000 f891 	bl	8004030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	e002      	b.n	8003f1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	21a5      	movs	r1, #165	; 0xa5
 8003f3e:	f002 fa5c 	bl	80063fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f023 0307 	bic.w	r3, r3, #7
 8003f5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <prvInitialiseNewTask+0x56>
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e7fe      	b.n	8003f78 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e012      	b.n	8003fa6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	7819      	ldrb	r1, [r3, #0]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3334      	adds	r3, #52	; 0x34
 8003f90:	460a      	mov	r2, r1
 8003f92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d006      	beq.n	8003fae <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d9e9      	bls.n	8003f80 <prvInitialiseNewTask+0x5c>
 8003fac:	e000      	b.n	8003fb0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003fae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b37      	cmp	r3, #55	; 0x37
 8003fbc:	d901      	bls.n	8003fc2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fbe:	2337      	movs	r3, #55	; 0x37
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fcc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f9a0 	bl	800331e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f99b 	bl	800331e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	69b8      	ldr	r0, [r7, #24]
 8004012:	f001 f8d7 	bl	80051c4 <pxPortInitialiseStack>
 8004016:	4602      	mov	r2, r0
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004028:	bf00      	nop
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004038:	f001 f9ae 	bl	8005398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800404e:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <prvAddNewTaskToReadyList+0xc4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d110      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800405c:	f000 fc0c 	bl	8004878 <prvInitialiseTaskLists>
 8004060:	e00d      	b.n	800407e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	d802      	bhi.n	800407e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004078:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 8004086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <prvAddNewTaskToReadyList+0xd0>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <prvAddNewTaskToReadyList+0x74>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <prvAddNewTaskToReadyList+0xd4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <prvAddNewTaskToReadyList+0xd8>)
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7ff f93b 	bl	8003336 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 f998 	bl	80053f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <prvAddNewTaskToReadyList+0xcc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <prvAddNewTaskToReadyList+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d207      	bcs.n	80040ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <prvAddNewTaskToReadyList+0xdc>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000bc0 	.word	0x20000bc0
 80040f8:	200006ec 	.word	0x200006ec
 80040fc:	20000bcc 	.word	0x20000bcc
 8004100:	20000bdc 	.word	0x20000bdc
 8004104:	20000bc8 	.word	0x20000bc8
 8004108:	200006f0 	.word	0x200006f0
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <vTaskDelay+0x60>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <vTaskDelay+0x2e>
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e7fe      	b.n	800413c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800413e:	f000 f87f 	bl	8004240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004142:	2100      	movs	r1, #0
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fcdf 	bl	8004b08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800414a:	f000 f887 	bl	800425c <xTaskResumeAll>
 800414e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <vTaskDelay+0x64>)
 8004158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000be8 	.word	0x20000be8
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004186:	463a      	mov	r2, r7
 8004188:	1d39      	adds	r1, r7, #4
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f874 	bl	800327c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	9202      	str	r2, [sp, #8]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2300      	movs	r3, #0
 80041a4:	460a      	mov	r2, r1
 80041a6:	4920      	ldr	r1, [pc, #128]	; (8004228 <vTaskStartScheduler+0xb0>)
 80041a8:	4820      	ldr	r0, [pc, #128]	; (800422c <vTaskStartScheduler+0xb4>)
 80041aa:	f7ff fe1d 	bl	8003de8 <xTaskCreateStatic>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <vTaskStartScheduler+0xb8>)
 80041b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <vTaskStartScheduler+0xb8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e001      	b.n	80041c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041cc:	f000 fcf0 	bl	8004bb0 <xTimerCreateTimerTask>
 80041d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d115      	bne.n	8004204 <vTaskStartScheduler+0x8c>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <vTaskStartScheduler+0xbc>)
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <vTaskStartScheduler+0xc0>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041f8:	4b10      	ldr	r3, [pc, #64]	; (800423c <vTaskStartScheduler+0xc4>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041fe:	f001 f85b 	bl	80052b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004202:	e00d      	b.n	8004220 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800420a:	d109      	bne.n	8004220 <vTaskStartScheduler+0xa8>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e7fe      	b.n	800421e <vTaskStartScheduler+0xa6>
}
 8004220:	bf00      	nop
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	08006490 	.word	0x08006490
 800422c:	08004849 	.word	0x08004849
 8004230:	20000be4 	.word	0x20000be4
 8004234:	20000be0 	.word	0x20000be0
 8004238:	20000bcc 	.word	0x20000bcc
 800423c:	20000bc4 	.word	0x20000bc4

08004240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <vTaskSuspendAll+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <vTaskSuspendAll+0x18>)
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000be8 	.word	0x20000be8

0800425c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800426a:	4b41      	ldr	r3, [pc, #260]	; (8004370 <xTaskResumeAll+0x114>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <xTaskResumeAll+0x2a>
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	e7fe      	b.n	8004284 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004286:	f001 f887 	bl	8005398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800428a:	4b39      	ldr	r3, [pc, #228]	; (8004370 <xTaskResumeAll+0x114>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3b01      	subs	r3, #1
 8004290:	4a37      	ldr	r2, [pc, #220]	; (8004370 <xTaskResumeAll+0x114>)
 8004292:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <xTaskResumeAll+0x114>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d162      	bne.n	8004362 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800429c:	4b35      	ldr	r3, [pc, #212]	; (8004374 <xTaskResumeAll+0x118>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d05e      	beq.n	8004362 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a4:	e02f      	b.n	8004306 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <xTaskResumeAll+0x11c>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3318      	adds	r3, #24
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f89a 	bl	80033ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f895 	bl	80033ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <xTaskResumeAll+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d903      	bls.n	80042d6 <xTaskResumeAll+0x7a>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	4a2a      	ldr	r2, [pc, #168]	; (800437c <xTaskResumeAll+0x120>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <xTaskResumeAll+0x124>)
 80042e4:	441a      	add	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f7ff f822 	bl	8003336 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <xTaskResumeAll+0x128>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <xTaskResumeAll+0x12c>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004306:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <xTaskResumeAll+0x11c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1cb      	bne.n	80042a6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004314:	f000 fb4a 	bl	80049ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <xTaskResumeAll+0x130>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004324:	f000 f844 	bl	80043b0 <xTaskIncrementTick>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <xTaskResumeAll+0x12c>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f1      	bne.n	8004324 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <xTaskResumeAll+0x130>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <xTaskResumeAll+0x12c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800434e:	2301      	movs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <xTaskResumeAll+0x134>)
 8004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004362:	f001 f847 	bl	80053f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004366:	68bb      	ldr	r3, [r7, #8]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000be8 	.word	0x20000be8
 8004374:	20000bc0 	.word	0x20000bc0
 8004378:	20000b80 	.word	0x20000b80
 800437c:	20000bc8 	.word	0x20000bc8
 8004380:	200006f0 	.word	0x200006f0
 8004384:	200006ec 	.word	0x200006ec
 8004388:	20000bd4 	.word	0x20000bd4
 800438c:	20000bd0 	.word	0x20000bd0
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <xTaskGetTickCount+0x18>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043a0:	687b      	ldr	r3, [r7, #4]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	20000bc4 	.word	0x20000bc4

080043b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <xTaskIncrementTick+0x150>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 808d 	bne.w	80044de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043c4:	4b4f      	ldr	r3, [pc, #316]	; (8004504 <xTaskIncrementTick+0x154>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043cc:	4a4d      	ldr	r2, [pc, #308]	; (8004504 <xTaskIncrementTick+0x154>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11f      	bne.n	8004418 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043d8:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <xTaskIncrementTick+0x158>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <xTaskIncrementTick+0x46>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	e7fe      	b.n	80043f4 <xTaskIncrementTick+0x44>
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <xTaskIncrementTick+0x158>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	4b43      	ldr	r3, [pc, #268]	; (800450c <xTaskIncrementTick+0x15c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a41      	ldr	r2, [pc, #260]	; (8004508 <xTaskIncrementTick+0x158>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4a41      	ldr	r2, [pc, #260]	; (800450c <xTaskIncrementTick+0x15c>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <xTaskIncrementTick+0x160>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3301      	adds	r3, #1
 8004410:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <xTaskIncrementTick+0x160>)
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	f000 faca 	bl	80049ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <xTaskIncrementTick+0x164>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d34e      	bcc.n	80044c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <xTaskIncrementTick+0x158>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <xTaskIncrementTick+0x80>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <xTaskIncrementTick+0x82>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <xTaskIncrementTick+0x164>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800443c:	601a      	str	r2, [r3, #0]
					break;
 800443e:	e03f      	b.n	80044c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <xTaskIncrementTick+0x158>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d203      	bcs.n	8004460 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004458:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <xTaskIncrementTick+0x164>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6013      	str	r3, [r2, #0]
						break;
 800445e:	e02f      	b.n	80044c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe ffc1 	bl	80033ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3318      	adds	r3, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe ffb8 	bl	80033ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <xTaskIncrementTick+0x168>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <xTaskIncrementTick+0xe0>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <xTaskIncrementTick+0x168>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <xTaskIncrementTick+0x16c>)
 800449e:	441a      	add	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe ff45 	bl	8003336 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <xTaskIncrementTick+0x170>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3b3      	bcc.n	8004422 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044be:	e7b0      	b.n	8004422 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <xTaskIncrementTick+0x170>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4915      	ldr	r1, [pc, #84]	; (800451c <xTaskIncrementTick+0x16c>)
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d907      	bls.n	80044e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e004      	b.n	80044e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <xTaskIncrementTick+0x174>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <xTaskIncrementTick+0x174>)
 80044e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xTaskIncrementTick+0x178>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000be8 	.word	0x20000be8
 8004504:	20000bc4 	.word	0x20000bc4
 8004508:	20000b78 	.word	0x20000b78
 800450c:	20000b7c 	.word	0x20000b7c
 8004510:	20000bd8 	.word	0x20000bd8
 8004514:	20000be0 	.word	0x20000be0
 8004518:	20000bc8 	.word	0x20000bc8
 800451c:	200006f0 	.word	0x200006f0
 8004520:	200006ec 	.word	0x200006ec
 8004524:	20000bd0 	.word	0x20000bd0
 8004528:	20000bd4 	.word	0x20000bd4

0800452c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004532:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <vTaskSwitchContext+0xa4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <vTaskSwitchContext+0xa8>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004540:	e040      	b.n	80045c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <vTaskSwitchContext+0xa8>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004548:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <vTaskSwitchContext+0xac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e00f      	b.n	8004570 <vTaskSwitchContext+0x44>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <vTaskSwitchContext+0x3e>
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e7fe      	b.n	8004568 <vTaskSwitchContext+0x3c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	491a      	ldr	r1, [pc, #104]	; (80045dc <vTaskSwitchContext+0xb0>)
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e5      	beq.n	8004550 <vTaskSwitchContext+0x24>
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <vTaskSwitchContext+0xb0>)
 8004590:	4413      	add	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3308      	adds	r3, #8
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d104      	bne.n	80045b4 <vTaskSwitchContext+0x88>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <vTaskSwitchContext+0xb4>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <vTaskSwitchContext+0xac>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000be8 	.word	0x20000be8
 80045d4:	20000bd4 	.word	0x20000bd4
 80045d8:	20000bc8 	.word	0x20000bc8
 80045dc:	200006f0 	.word	0x200006f0
 80045e0:	200006ec 	.word	0x200006ec

080045e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <vTaskPlaceOnEventList+0x24>
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e7fe      	b.n	8004606 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <vTaskPlaceOnEventList+0x44>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3318      	adds	r3, #24
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fe feb3 	bl	800337c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004616:	2101      	movs	r1, #1
 8004618:	6838      	ldr	r0, [r7, #0]
 800461a:	f000 fa75 	bl	8004b08 <prvAddCurrentTaskToDelayedList>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200006ec 	.word	0x200006ec

0800462c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <vTaskPlaceOnEventListRestricted+0x26>
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e7fe      	b.n	8004650 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <vTaskPlaceOnEventListRestricted+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3318      	adds	r3, #24
 8004658:	4619      	mov	r1, r3
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fe fe6b 	bl	8003336 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	f000 fa4a 	bl	8004b08 <prvAddCurrentTaskToDelayedList>
	}
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	200006ec 	.word	0x200006ec

08004680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <xTaskRemoveFromEventList+0x2a>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e7fe      	b.n	80046a8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3318      	adds	r3, #24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fe9c 	bl	80033ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <xTaskRemoveFromEventList+0xac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11d      	bne.n	80046f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fe93 	bl	80033ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <xTaskRemoveFromEventList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d903      	bls.n	80046da <xTaskRemoveFromEventList+0x5a>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <xTaskRemoveFromEventList+0xb0>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a13      	ldr	r2, [pc, #76]	; (8004734 <xTaskRemoveFromEventList+0xb4>)
 80046e8:	441a      	add	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe fe20 	bl	8003336 <vListInsertEnd>
 80046f6:	e005      	b.n	8004704 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4619      	mov	r1, r3
 80046fe:	480e      	ldr	r0, [pc, #56]	; (8004738 <xTaskRemoveFromEventList+0xb8>)
 8004700:	f7fe fe19 	bl	8003336 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <xTaskRemoveFromEventList+0xbc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	429a      	cmp	r2, r3
 8004710:	d905      	bls.n	800471e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <xTaskRemoveFromEventList+0xc0>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e001      	b.n	8004722 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004722:	697b      	ldr	r3, [r7, #20]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000be8 	.word	0x20000be8
 8004730:	20000bc8 	.word	0x20000bc8
 8004734:	200006f0 	.word	0x200006f0
 8004738:	20000b80 	.word	0x20000b80
 800473c:	200006ec 	.word	0x200006ec
 8004740:	20000bd4 	.word	0x20000bd4

08004744 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <vTaskInternalSetTimeOutState+0x24>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <vTaskInternalSetTimeOutState+0x28>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000bd8 	.word	0x20000bd8
 800476c:	20000bc4 	.word	0x20000bc4

08004770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <xTaskCheckForTimeOut+0x24>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e7fe      	b.n	8004792 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <xTaskCheckForTimeOut+0x3e>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e7fe      	b.n	80047ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80047ae:	f000 fdf3 	bl	8005398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <xTaskCheckForTimeOut+0xb8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ca:	d102      	bne.n	80047d2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e023      	b.n	800481a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <xTaskCheckForTimeOut+0xbc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d007      	beq.n	80047ee <xTaskCheckForTimeOut+0x7e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e015      	b.n	800481a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d20b      	bcs.n	8004810 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff9d 	bl	8004744 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e004      	b.n	800481a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800481a:	f000 fdeb 	bl	80053f4 <vPortExitCritical>

	return xReturn;
 800481e:	69fb      	ldr	r3, [r7, #28]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000bc4 	.word	0x20000bc4
 800482c:	20000bd8 	.word	0x20000bd8

08004830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <vTaskMissedYield+0x14>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000bd4 	.word	0x20000bd4

08004848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004850:	f000 f852 	bl	80048f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <prvIdleTask+0x28>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d9f9      	bls.n	8004850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <prvIdleTask+0x2c>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800486c:	e7f0      	b.n	8004850 <prvIdleTask+0x8>
 800486e:	bf00      	nop
 8004870:	200006f0 	.word	0x200006f0
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	e00c      	b.n	800489e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <prvInitialiseTaskLists+0x60>)
 8004890:	4413      	add	r3, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fd24 	bl	80032e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3301      	adds	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b37      	cmp	r3, #55	; 0x37
 80048a2:	d9ef      	bls.n	8004884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048a4:	480d      	ldr	r0, [pc, #52]	; (80048dc <prvInitialiseTaskLists+0x64>)
 80048a6:	f7fe fd1b 	bl	80032e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048aa:	480d      	ldr	r0, [pc, #52]	; (80048e0 <prvInitialiseTaskLists+0x68>)
 80048ac:	f7fe fd18 	bl	80032e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048b0:	480c      	ldr	r0, [pc, #48]	; (80048e4 <prvInitialiseTaskLists+0x6c>)
 80048b2:	f7fe fd15 	bl	80032e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048b6:	480c      	ldr	r0, [pc, #48]	; (80048e8 <prvInitialiseTaskLists+0x70>)
 80048b8:	f7fe fd12 	bl	80032e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048bc:	480b      	ldr	r0, [pc, #44]	; (80048ec <prvInitialiseTaskLists+0x74>)
 80048be:	f7fe fd0f 	bl	80032e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <prvInitialiseTaskLists+0x78>)
 80048c4:	4a05      	ldr	r2, [pc, #20]	; (80048dc <prvInitialiseTaskLists+0x64>)
 80048c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvInitialiseTaskLists+0x7c>)
 80048ca:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <prvInitialiseTaskLists+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200006f0 	.word	0x200006f0
 80048dc:	20000b50 	.word	0x20000b50
 80048e0:	20000b64 	.word	0x20000b64
 80048e4:	20000b80 	.word	0x20000b80
 80048e8:	20000b94 	.word	0x20000b94
 80048ec:	20000bac 	.word	0x20000bac
 80048f0:	20000b78 	.word	0x20000b78
 80048f4:	20000b7c 	.word	0x20000b7c

080048f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048fe:	e019      	b.n	8004934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004900:	f000 fd4a 	bl	8005398 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <prvCheckTasksWaitingTermination+0x4c>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fd6b 	bl	80033ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvCheckTasksWaitingTermination+0x50>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3b01      	subs	r3, #1
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <prvCheckTasksWaitingTermination+0x50>)
 800491e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvCheckTasksWaitingTermination+0x54>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3b01      	subs	r3, #1
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <prvCheckTasksWaitingTermination+0x54>)
 8004928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800492a:	f000 fd63 	bl	80053f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f80e 	bl	8004950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <prvCheckTasksWaitingTermination+0x54>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e1      	bne.n	8004900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000b94 	.word	0x20000b94
 8004948:	20000bc0 	.word	0x20000bc0
 800494c:	20000ba8 	.word	0x20000ba8

08004950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fece 	bl	8005708 <vPortFree>
				vPortFree( pxTCB );
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fecb 	bl	8005708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004972:	e017      	b.n	80049a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800497a:	2b01      	cmp	r3, #1
 800497c:	d103      	bne.n	8004986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fec2 	bl	8005708 <vPortFree>
	}
 8004984:	e00e      	b.n	80049a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800498c:	2b02      	cmp	r3, #2
 800498e:	d009      	beq.n	80049a4 <prvDeleteTCB+0x54>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	e7fe      	b.n	80049a2 <prvDeleteTCB+0x52>
	}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <prvResetNextTaskUnblockTime+0x40>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <prvResetNextTaskUnblockTime+0x14>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <prvResetNextTaskUnblockTime+0x16>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <prvResetNextTaskUnblockTime+0x44>)
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049ce:	e008      	b.n	80049e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <prvResetNextTaskUnblockTime+0x40>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <prvResetNextTaskUnblockTime+0x44>)
 80049e0:	6013      	str	r3, [r2, #0]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	20000b78 	.word	0x20000b78
 80049f0:	20000be0 	.word	0x20000be0

080049f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <xTaskGetSchedulerState+0x34>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a02:	2301      	movs	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	e008      	b.n	8004a1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a08:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <xTaskGetSchedulerState+0x38>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a10:	2302      	movs	r3, #2
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	e001      	b.n	8004a1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a1a:	687b      	ldr	r3, [r7, #4]
	}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000bcc 	.word	0x20000bcc
 8004a2c:	20000be8 	.word	0x20000be8

08004a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d054      	beq.n	8004af0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a46:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <xTaskPriorityDisinherit+0xcc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d009      	beq.n	8004a64 <xTaskPriorityDisinherit+0x34>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e7fe      	b.n	8004a62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <xTaskPriorityDisinherit+0x50>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	e7fe      	b.n	8004a7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d02c      	beq.n	8004af0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d128      	bne.n	8004af0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fca2 	bl	80033ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <xTaskPriorityDisinherit+0xd0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d903      	bls.n	8004ad0 <xTaskPriorityDisinherit+0xa0>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <xTaskPriorityDisinherit+0xd0>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <xTaskPriorityDisinherit+0xd4>)
 8004ade:	441a      	add	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7fe fc25 	bl	8003336 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004af0:	697b      	ldr	r3, [r7, #20]
	}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200006ec 	.word	0x200006ec
 8004b00:	20000bc8 	.word	0x20000bc8
 8004b04:	200006f0 	.word	0x200006f0

08004b08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fc64 	bl	80033ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b2a:	d10a      	bne.n	8004b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4819      	ldr	r0, [pc, #100]	; (8004ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b3c:	f7fe fbfb 	bl	8003336 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b40:	e026      	b.n	8004b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d209      	bcs.n	8004b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f7fe fc08 	bl	800337c <vListInsert>
}
 8004b6c:	e010      	b.n	8004b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7fe fbfe 	bl	800337c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d202      	bcs.n	8004b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000bc4 	.word	0x20000bc4
 8004b9c:	200006ec 	.word	0x200006ec
 8004ba0:	20000bac 	.word	0x20000bac
 8004ba4:	20000b7c 	.word	0x20000b7c
 8004ba8:	20000b78 	.word	0x20000b78
 8004bac:	20000be0 	.word	0x20000be0

08004bb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bba:	f000 fac3 	bl	8005144 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <xTimerCreateTimerTask+0x80>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d021      	beq.n	8004c0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bce:	1d3a      	adds	r2, r7, #4
 8004bd0:	f107 0108 	add.w	r1, r7, #8
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fb67 	bl	80032ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	9202      	str	r2, [sp, #8]
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	2302      	movs	r3, #2
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	460a      	mov	r2, r1
 8004bf0:	4910      	ldr	r1, [pc, #64]	; (8004c34 <xTimerCreateTimerTask+0x84>)
 8004bf2:	4811      	ldr	r0, [pc, #68]	; (8004c38 <xTimerCreateTimerTask+0x88>)
 8004bf4:	f7ff f8f8 	bl	8003de8 <xTaskCreateStatic>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <xTimerCreateTimerTask+0x8c>)
 8004bfc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <xTimerCreateTimerTask+0x8c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c06:	2301      	movs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <xTimerCreateTimerTask+0x74>
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e7fe      	b.n	8004c22 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004c24:	697b      	ldr	r3, [r7, #20]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000c1c 	.word	0x20000c1c
 8004c34:	08006498 	.word	0x08006498
 8004c38:	08004d59 	.word	0x08004d59
 8004c3c:	20000c20 	.word	0x20000c20

08004c40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <xTimerGenericCommand+0x2c>
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	e7fe      	b.n	8004c6a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <xTimerGenericCommand+0x94>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02a      	beq.n	8004cca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	dc18      	bgt.n	8004cb8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c86:	f7ff feb5 	bl	80049f4 <xTaskGetSchedulerState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d109      	bne.n	8004ca4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c90:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <xTimerGenericCommand+0x94>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f107 0110 	add.w	r1, r7, #16
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	f7fe fcce 	bl	800363c <xQueueGenericSend>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8004ca2:	e012      	b.n	8004cca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <xTimerGenericCommand+0x94>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f107 0110 	add.w	r1, r7, #16
 8004cac:	2300      	movs	r3, #0
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f7fe fcc4 	bl	800363c <xQueueGenericSend>
 8004cb4:	6278      	str	r0, [r7, #36]	; 0x24
 8004cb6:	e008      	b.n	8004cca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <xTimerGenericCommand+0x94>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	f107 0110 	add.w	r1, r7, #16
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	f7fe fdb4 	bl	8003830 <xQueueGenericSendFromISR>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000c1c 	.word	0x20000c1c

08004cd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvProcessExpiredTimer+0x7c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fb7b 	bl	80033ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d121      	bne.n	8004d42 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	18d1      	adds	r1, r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f000 f8c8 	bl	8004ea0 <prvInsertTimerInActiveList>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d015      	beq.n	8004d42 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d16:	2300      	movs	r3, #0
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	6978      	ldr	r0, [r7, #20]
 8004d22:	f7ff ff8d 	bl	8004c40 <xTimerGenericCommand>
 8004d26:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <prvProcessExpiredTimer+0x6a>
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e7fe      	b.n	8004d40 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	4798      	blx	r3
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000c14 	.word	0x20000c14

08004d58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d60:	f107 0308 	add.w	r3, r7, #8
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f857 	bl	8004e18 <prvGetNextExpireTime>
 8004d6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f803 	bl	8004d7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d76:	f000 f8d5 	bl	8004f24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d7a:	e7f1      	b.n	8004d60 <prvTimerTask+0x8>

08004d7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d86:	f7ff fa5b 	bl	8004240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f866 	bl	8004e60 <prvSampleTimeNow>
 8004d94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d130      	bne.n	8004dfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <prvProcessTimerOrBlockTask+0x3c>
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d806      	bhi.n	8004db8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004daa:	f7ff fa57 	bl	800425c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff91 	bl	8004cd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004db6:	e024      	b.n	8004e02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <prvProcessTimerOrBlockTask+0x90>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <prvProcessTimerOrBlockTask+0x94>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f7fe ffcf 	bl	8003d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004de2:	f7ff fa3b 	bl	800425c <xTaskResumeAll>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvProcessTimerOrBlockTask+0x98>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
}
 8004dfc:	e001      	b.n	8004e02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dfe:	f7ff fa2d 	bl	800425c <xTaskResumeAll>
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000c18 	.word	0x20000c18
 8004e10:	20000c1c 	.word	0x20000c1c
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <prvGetNextExpireTime+0x44>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <prvGetNextExpireTime+0x44>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e001      	b.n	8004e4e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000c14 	.word	0x20000c14

08004e60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e68:	f7ff fa94 	bl	8004394 <xTaskGetTickCount>
 8004e6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <prvSampleTimeNow+0x3c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d205      	bcs.n	8004e84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e78:	f000 f904 	bl	8005084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e8a:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <prvSampleTimeNow+0x3c>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000c24 	.word	0x20000c24

08004ea0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d812      	bhi.n	8004eec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad2      	subs	r2, r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e01b      	b.n	8004f12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <prvInsertTimerInActiveList+0x7c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fe fa49 	bl	800337c <vListInsert>
 8004eea:	e012      	b.n	8004f12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d206      	bcs.n	8004f02 <prvInsertTimerInActiveList+0x62>
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e007      	b.n	8004f12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <prvInsertTimerInActiveList+0x80>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7fe fa35 	bl	800337c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f12:	697b      	ldr	r3, [r7, #20]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000c18 	.word	0x20000c18
 8004f20:	20000c14 	.word	0x20000c14

08004f24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
 8004f28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f2a:	e099      	b.n	8005060 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da17      	bge.n	8004f62 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	3304      	adds	r3, #4
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <prvProcessReceivedCommands+0x2e>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e7fe      	b.n	8004f50 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f58:	6850      	ldr	r0, [r2, #4]
 8004f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5c:	6892      	ldr	r2, [r2, #8]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	db7a      	blt.n	800505e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	3304      	adds	r3, #4
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe fa37 	bl	80033ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f7e:	463b      	mov	r3, r7
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff6d 	bl	8004e60 <prvSampleTimeNow>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b09      	cmp	r3, #9
 8004f8c:	d868      	bhi.n	8005060 <prvProcessReceivedCommands+0x13c>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <prvProcessReceivedCommands+0x70>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fbd 	.word	0x08004fbd
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08005017 	.word	0x08005017
 8004fa8:	0800504d 	.word	0x0800504d
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fbd 	.word	0x08004fbd
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	08005017 	.word	0x08005017
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	18d1      	adds	r1, r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fca:	f7ff ff69 	bl	8004ea0 <prvInsertTimerInActiveList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d045      	beq.n	8005060 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d13d      	bne.n	8005060 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	441a      	add	r2, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff6:	f7ff fe23 	bl	8004c40 <xTimerGenericCommand>
 8004ffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d12e      	bne.n	8005060 <prvProcessReceivedCommands+0x13c>
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e7fe      	b.n	8005014 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <prvProcessReceivedCommands+0x114>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e7fe      	b.n	8005036 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005046:	f7ff ff2b 	bl	8004ea0 <prvInsertTimerInActiveList>
					break;
 800504a:	e009      	b.n	8005060 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005058:	f000 fb56 	bl	8005708 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800505c:	e000      	b.n	8005060 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800505e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <prvProcessReceivedCommands+0x15c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1d39      	adds	r1, r7, #4
 8005066:	2200      	movs	r2, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fc75 	bl	8003958 <xQueueReceive>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f af5b 	bne.w	8004f2c <prvProcessReceivedCommands+0x8>
	}
}
 8005076:	bf00      	nop
 8005078:	3730      	adds	r7, #48	; 0x30
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000c1c 	.word	0x20000c1c

08005084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800508a:	e044      	b.n	8005116 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <prvSwitchTimerLists+0xb8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <prvSwitchTimerLists+0xb8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f9a1 	bl	80033ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d12d      	bne.n	8005116 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d90e      	bls.n	80050ea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050d8:	4b18      	ldr	r3, [pc, #96]	; (800513c <prvSwitchTimerLists+0xb8>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7fe f94a 	bl	800337c <vListInsert>
 80050e8:	e015      	b.n	8005116 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050ea:	2300      	movs	r3, #0
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2300      	movs	r3, #0
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	2100      	movs	r1, #0
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fda3 	bl	8004c40 <xTimerGenericCommand>
 80050fa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <prvSwitchTimerLists+0x92>
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	e7fe      	b.n	8005114 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <prvSwitchTimerLists+0xb8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1b5      	bne.n	800508c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <prvSwitchTimerLists+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <prvSwitchTimerLists+0xbc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <prvSwitchTimerLists+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800512e:	4a04      	ldr	r2, [pc, #16]	; (8005140 <prvSwitchTimerLists+0xbc>)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000c14 	.word	0x20000c14
 8005140:	20000c18 	.word	0x20000c18

08005144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800514a:	f000 f925 	bl	8005398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <prvCheckForValidListAndQueue+0x60>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d120      	bne.n	8005198 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005156:	4814      	ldr	r0, [pc, #80]	; (80051a8 <prvCheckForValidListAndQueue+0x64>)
 8005158:	f7fe f8c2 	bl	80032e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800515c:	4813      	ldr	r0, [pc, #76]	; (80051ac <prvCheckForValidListAndQueue+0x68>)
 800515e:	f7fe f8bf 	bl	80032e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <prvCheckForValidListAndQueue+0x6c>)
 8005164:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <prvCheckForValidListAndQueue+0x64>)
 8005166:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <prvCheckForValidListAndQueue+0x70>)
 800516a:	4a10      	ldr	r2, [pc, #64]	; (80051ac <prvCheckForValidListAndQueue+0x68>)
 800516c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800516e:	2300      	movs	r3, #0
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <prvCheckForValidListAndQueue+0x74>)
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <prvCheckForValidListAndQueue+0x78>)
 8005176:	2110      	movs	r1, #16
 8005178:	200a      	movs	r0, #10
 800517a:	f7fe f9c9 	bl	8003510 <xQueueGenericCreateStatic>
 800517e:	4602      	mov	r2, r0
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <prvCheckForValidListAndQueue+0x60>)
 8005182:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <prvCheckForValidListAndQueue+0x60>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <prvCheckForValidListAndQueue+0x60>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <prvCheckForValidListAndQueue+0x7c>)
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fdcc 	bl	8003d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005198:	f000 f92c 	bl	80053f4 <vPortExitCritical>
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000c1c 	.word	0x20000c1c
 80051a8:	20000bec 	.word	0x20000bec
 80051ac:	20000c00 	.word	0x20000c00
 80051b0:	20000c14 	.word	0x20000c14
 80051b4:	20000c18 	.word	0x20000c18
 80051b8:	20000cc8 	.word	0x20000cc8
 80051bc:	20000c28 	.word	0x20000c28
 80051c0:	080064a0 	.word	0x080064a0

080051c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b04      	subs	r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051f4:	4a08      	ldr	r2, [pc, #32]	; (8005218 <pxPortInitialiseStack+0x54>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b14      	subs	r3, #20
 80051fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b20      	subs	r3, #32
 800520a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800520c:	68fb      	ldr	r3, [r7, #12]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr
 8005218:	0800521d 	.word	0x0800521d

0800521c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <prvTaskExitError+0x4c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800522e:	d009      	beq.n	8005244 <prvTaskExitError+0x28>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e7fe      	b.n	8005242 <prvTaskExitError+0x26>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005256:	bf00      	nop
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0fc      	beq.n	8005258 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	2000000c 	.word	0x2000000c
 800526c:	00000000 	.word	0x00000000

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	f04e 0e0d 	orr.w	lr, lr, #13
 800528e:	4770      	bx	lr

08005290 <pxCurrentTCBConst2>:
 8005290:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005298:	4806      	ldr	r0, [pc, #24]	; (80052b4 <prvPortStartFirstTask+0x1c>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	b662      	cpsie	i
 80052a4:	b661      	cpsie	f
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	df00      	svc	0
 80052b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052b2:	bf00      	nop
 80052b4:	e000ed08 	.word	0xe000ed08

080052b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <xPortStartScheduler+0xcc>)
 80052c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22ff      	movs	r2, #255	; 0xff
 80052ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b29      	ldr	r3, [pc, #164]	; (8005388 <xPortStartScheduler+0xd0>)
 80052e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <xPortStartScheduler+0xd4>)
 80052e8:	2207      	movs	r2, #7
 80052ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ec:	e009      	b.n	8005302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <xPortStartScheduler+0xd4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4a25      	ldr	r2, [pc, #148]	; (800538c <xPortStartScheduler+0xd4>)
 80052f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b80      	cmp	r3, #128	; 0x80
 800530c:	d0ef      	beq.n	80052ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800530e:	4b1f      	ldr	r3, [pc, #124]	; (800538c <xPortStartScheduler+0xd4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1c3 0307 	rsb	r3, r3, #7
 8005316:	2b04      	cmp	r3, #4
 8005318:	d009      	beq.n	800532e <xPortStartScheduler+0x76>
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	e7fe      	b.n	800532c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <xPortStartScheduler+0xd4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <xPortStartScheduler+0xd4>)
 8005336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <xPortStartScheduler+0xd4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005340:	4a12      	ldr	r2, [pc, #72]	; (800538c <xPortStartScheduler+0xd4>)
 8005342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800534c:	4b10      	ldr	r3, [pc, #64]	; (8005390 <xPortStartScheduler+0xd8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0f      	ldr	r2, [pc, #60]	; (8005390 <xPortStartScheduler+0xd8>)
 8005352:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <xPortStartScheduler+0xd8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <xPortStartScheduler+0xd8>)
 800535e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005364:	f000 f8b0 	bl	80054c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <xPortStartScheduler+0xdc>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800536e:	f7ff ff93 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005372:	f7ff f8db 	bl	800452c <vTaskSwitchContext>
	prvTaskExitError();
 8005376:	f7ff ff51 	bl	800521c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	e000e400 	.word	0xe000e400
 8005388:	20000d18 	.word	0x20000d18
 800538c:	20000d1c 	.word	0x20000d1c
 8005390:	e000ed20 	.word	0xe000ed20
 8005394:	2000000c 	.word	0x2000000c

08005398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <vPortEnterCritical+0x54>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <vPortEnterCritical+0x54>)
 80053b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ba:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <vPortEnterCritical+0x54>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10e      	bne.n	80053e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortEnterCritical+0x58>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <vPortEnterCritical+0x48>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	e7fe      	b.n	80053de <vPortEnterCritical+0x46>
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <vPortExitCritical+0x48>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <vPortExitCritical+0x22>
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	e7fe      	b.n	8005414 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <vPortExitCritical+0x48>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a07      	ldr	r2, [pc, #28]	; (800543c <vPortExitCritical+0x48>)
 800541e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <vPortExitCritical+0x48>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <vPortExitCritical+0x3e>
 8005428:	2300      	movs	r3, #0
 800542a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	2000000c 	.word	0x2000000c

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005450:	6010      	str	r0, [r2, #0]
 8005452:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005456:	f04f 0050 	mov.w	r0, #80	; 0x50
 800545a:	f380 8811 	msr	BASEPRI, r0
 800545e:	f7ff f865 	bl	800452c <vTaskSwitchContext>
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005476:	f380 8809 	msr	PSP, r0
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	4770      	bx	lr

08005480 <pxCurrentTCBConst>:
 8005480:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054a0:	f7fe ff86 	bl	80043b0 <xTaskIncrementTick>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <SysTick_Handler+0x3c>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	2300      	movs	r3, #0
 80054b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <vPortSetupTimerInterrupt+0x30>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <vPortSetupTimerInterrupt+0x34>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <vPortSetupTimerInterrupt+0x38>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a09      	ldr	r2, [pc, #36]	; (8005504 <vPortSetupTimerInterrupt+0x3c>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <vPortSetupTimerInterrupt+0x40>)
 80054e6:	3b01      	subs	r3, #1
 80054e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <vPortSetupTimerInterrupt+0x30>)
 80054ec:	2207      	movs	r2, #7
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	e000e010 	.word	0xe000e010
 80054fc:	e000e018 	.word	0xe000e018
 8005500:	20000000 	.word	0x20000000
 8005504:	10624dd3 	.word	0x10624dd3
 8005508:	e000e014 	.word	0xe000e014

0800550c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005512:	f3ef 8305 	mrs	r3, IPSR
 8005516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d913      	bls.n	8005546 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <vPortValidateInterruptPriority+0x68>)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <vPortValidateInterruptPriority+0x6c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	7afa      	ldrb	r2, [r7, #11]
 800552e:	429a      	cmp	r2, r3
 8005530:	d209      	bcs.n	8005546 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	e7fe      	b.n	8005544 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <vPortValidateInterruptPriority+0x70>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <vPortValidateInterruptPriority+0x74>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d909      	bls.n	800556a <vPortValidateInterruptPriority+0x5e>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	e7fe      	b.n	8005568 <vPortValidateInterruptPriority+0x5c>
	}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	e000e3f0 	.word	0xe000e3f0
 8005578:	20000d18 	.word	0x20000d18
 800557c:	e000ed0c 	.word	0xe000ed0c
 8005580:	20000d1c 	.word	0x20000d1c

08005584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005590:	f7fe fe56 	bl	8004240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005594:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <pvPortMalloc+0x170>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800559c:	f000 f90c 	bl	80057b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a0:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <pvPortMalloc+0x174>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 808c 	bne.w	80056c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01c      	beq.n	80055ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055b4:	2208      	movs	r2, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f023 0307 	bic.w	r3, r3, #7
 80055cc:	3308      	adds	r3, #8
 80055ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <pvPortMalloc+0x6a>
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e7fe      	b.n	80055ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d068      	beq.n	80056c6 <pvPortMalloc+0x142>
 80055f4:	4b41      	ldr	r3, [pc, #260]	; (80056fc <pvPortMalloc+0x178>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d863      	bhi.n	80056c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055fe:	4b40      	ldr	r3, [pc, #256]	; (8005700 <pvPortMalloc+0x17c>)
 8005600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <pvPortMalloc+0x17c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005608:	e004      	b.n	8005614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <pvPortMalloc+0xa2>
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f1      	bne.n	800560a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005626:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <pvPortMalloc+0x170>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	429a      	cmp	r2, r3
 800562e:	d04a      	beq.n	80056c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	4413      	add	r3, r2
 8005638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	2308      	movs	r3, #8
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d91e      	bls.n	8005690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4413      	add	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <pvPortMalloc+0xf4>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e7fe      	b.n	8005676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f000 f8f6 	bl	800587c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <pvPortMalloc+0x178>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <pvPortMalloc+0x178>)
 800569c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <pvPortMalloc+0x178>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b18      	ldr	r3, [pc, #96]	; (8005704 <pvPortMalloc+0x180>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d203      	bcs.n	80056b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <pvPortMalloc+0x178>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <pvPortMalloc+0x180>)
 80056b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <pvPortMalloc+0x174>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056c6:	f7fe fdc9 	bl	800425c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <pvPortMalloc+0x164>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e7fe      	b.n	80056e6 <pvPortMalloc+0x162>
	return pvReturn;
 80056e8:	69fb      	ldr	r3, [r7, #28]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20003528 	.word	0x20003528
 80056f8:	20003534 	.word	0x20003534
 80056fc:	2000352c 	.word	0x2000352c
 8005700:	20003520 	.word	0x20003520
 8005704:	20003530 	.word	0x20003530

08005708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d046      	beq.n	80057a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800571a:	2308      	movs	r3, #8
 800571c:	425b      	negs	r3, r3
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <vPortFree+0xa8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <vPortFree+0x42>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e7fe      	b.n	8005748 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <vPortFree+0x5e>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	e7fe      	b.n	8005764 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <vPortFree+0xa8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d019      	beq.n	80057a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d115      	bne.n	80057a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortFree+0xa8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800578c:	f7fe fd58 	bl	8004240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <vPortFree+0xac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4413      	add	r3, r2
 800579a:	4a06      	ldr	r2, [pc, #24]	; (80057b4 <vPortFree+0xac>)
 800579c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f000 f86c 	bl	800587c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057a4:	f7fe fd5a 	bl	800425c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20003534 	.word	0x20003534
 80057b4:	2000352c 	.word	0x2000352c

080057b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <prvHeapInit+0xac>)
 80057c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3307      	adds	r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <prvHeapInit+0xac>)
 80057e8:	4413      	add	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <prvHeapInit+0xb0>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <prvHeapInit+0xb0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005804:	2208      	movs	r2, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <prvHeapInit+0xb4>)
 8005818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <prvHeapInit+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <prvHeapInit+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <prvHeapInit+0xb4>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <prvHeapInit+0xb8>)
 8005846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <prvHeapInit+0xbc>)
 800584e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <prvHeapInit+0xc0>)
 8005852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000d20 	.word	0x20000d20
 8005868:	20003520 	.word	0x20003520
 800586c:	20003528 	.word	0x20003528
 8005870:	20003530 	.word	0x20003530
 8005874:	2000352c 	.word	0x2000352c
 8005878:	20003534 	.word	0x20003534

0800587c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <prvInsertBlockIntoFreeList+0xa8>)
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e002      	b.n	8005890 <prvInsertBlockIntoFreeList+0x14>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d8f7      	bhi.n	800588a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d108      	bne.n	80058be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d118      	bne.n	8005904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <prvInsertBlockIntoFreeList+0xac>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d00d      	beq.n	80058fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e008      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <prvInsertBlockIntoFreeList+0xac>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e003      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d002      	beq.n	800591a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	20003520 	.word	0x20003520
 8005928:	20003528 	.word	0x20003528

0800592c <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc1,ADC_HandleTypeDef *adc2){
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	  HAL_ADC_Start(adc1);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb f9aa 	bl	8000c90 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 800593c:	2164      	movs	r1, #100	; 0x64
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fa80 	bl	8000e44 <HAL_ADC_PollForConversion>
	  analogValue1 = HAL_ADC_GetValue(adc1);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fb fb77 	bl	8001038 <HAL_ADC_GetValue>
 800594a:	4603      	mov	r3, r0
 800594c:	b29a      	uxth	r2, r3
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <readAnalog2Values+0x58>)
 8005950:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb fa4a 	bl	8000dec <HAL_ADC_Stop>
	  HAL_ADC_Start(adc2);
 8005958:	6838      	ldr	r0, [r7, #0]
 800595a:	f7fb f999 	bl	8000c90 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 800595e:	2164      	movs	r1, #100	; 0x64
 8005960:	6838      	ldr	r0, [r7, #0]
 8005962:	f7fb fa6f 	bl	8000e44 <HAL_ADC_PollForConversion>
	  analogValue2 = HAL_ADC_GetValue(adc2);
 8005966:	6838      	ldr	r0, [r7, #0]
 8005968:	f7fb fb66 	bl	8001038 <HAL_ADC_GetValue>
 800596c:	4603      	mov	r3, r0
 800596e:	b29a      	uxth	r2, r3
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <readAnalog2Values+0x5c>)
 8005972:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 8005974:	6838      	ldr	r0, [r7, #0]
 8005976:	f7fb fa39 	bl	8000dec <HAL_ADC_Stop>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2000371e 	.word	0x2000371e
 8005988:	2000371c 	.word	0x2000371c

0800598c <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <getAnalogValue1+0x10>)
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	2000371e 	.word	0x2000371e

080059a0 <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <getAnalogValue2+0x10>)
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	2000371c 	.word	0x2000371c

080059b4 <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 80059b4:	b490      	push	{r4, r7}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4623      	mov	r3, r4
 80059c4:	80fb      	strh	r3, [r7, #6]
 80059c6:	4603      	mov	r3, r0
 80059c8:	80bb      	strh	r3, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	807b      	strh	r3, [r7, #2]
 80059ce:	4613      	mov	r3, r2
 80059d0:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	88bb      	ldrh	r3, [r7, #4]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	8a39      	ldrh	r1, [r7, #16]
 80059da:	883a      	ldrh	r2, [r7, #0]
 80059dc:	1a8a      	subs	r2, r1, r2
 80059de:	fb02 f203 	mul.w	r2, r2, r3
 80059e2:	8879      	ldrh	r1, [r7, #2]
 80059e4:	88bb      	ldrh	r3, [r7, #4]
 80059e6:	1acb      	subs	r3, r1, r3
 80059e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	883b      	ldrh	r3, [r7, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	b29b      	uxth	r3, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc90      	pop	{r4, r7}
 80059fc:	4770      	bx	lr
	...

08005a00 <buttonCounterIncrease>:
mD_interface drv1,drv2;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 8005a04:	2120      	movs	r1, #32
 8005a06:	4815      	ldr	r0, [pc, #84]	; (8005a5c <buttonCounterIncrease+0x5c>)
 8005a08:	f7fb fee0 	bl	80017cc <HAL_GPIO_ReadPin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <buttonCounterIncrease+0x20>
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <buttonCounterIncrease+0x60>)
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <buttonCounterIncrease+0x60>)
 8005a1c:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 8005a1e:	e01a      	b.n	8005a56 <buttonCounterIncrease+0x56>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	480e      	ldr	r0, [pc, #56]	; (8005a5c <buttonCounterIncrease+0x5c>)
 8005a24:	f7fb fed2 	bl	80017cc <HAL_GPIO_ReadPin>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <buttonCounterIncrease+0x3c>
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <buttonCounterIncrease+0x64>)
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <buttonCounterIncrease+0x64>)
 8005a38:	801a      	strh	r2, [r3, #0]
}
 8005a3a:	e00c      	b.n	8005a56 <buttonCounterIncrease+0x56>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	4807      	ldr	r0, [pc, #28]	; (8005a5c <buttonCounterIncrease+0x5c>)
 8005a40:	f7fb fec4 	bl	80017cc <HAL_GPIO_ReadPin>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <buttonCounterIncrease+0x56>
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <buttonCounterIncrease+0x68>)
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <buttonCounterIncrease+0x68>)
 8005a54:	801a      	strh	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40010800 	.word	0x40010800
 8005a60:	20003538 	.word	0x20003538
 8005a64:	2000353a 	.word	0x2000353a
 8005a68:	2000353c 	.word	0x2000353c

08005a6c <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8005a70:	2120      	movs	r1, #32
 8005a72:	480f      	ldr	r0, [pc, #60]	; (8005ab0 <selectButton_Listenner_For_MenuControl+0x44>)
 8005a74:	f7fb feaa 	bl	80017cc <HAL_GPIO_ReadPin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <selectButton_Listenner_For_MenuControl+0x48>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a86:	d304      	bcc.n	8005a92 <selectButton_Listenner_For_MenuControl+0x26>
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <selectButton_Listenner_For_MenuControl+0x48>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e00c      	b.n	8005aac <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <selectButton_Listenner_For_MenuControl+0x48>)
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	2b09      	cmp	r3, #9
 8005a98:	d904      	bls.n	8005aa4 <selectButton_Listenner_For_MenuControl+0x38>
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <selectButton_Listenner_For_MenuControl+0x48>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e003      	b.n	8005aac <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <selectButton_Listenner_For_MenuControl+0x48>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40010800 	.word	0x40010800
 8005ab4:	20003538 	.word	0x20003538

08005ab8 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	480f      	ldr	r0, [pc, #60]	; (8005afc <plusButton_Listenner_For_MenuControl+0x44>)
 8005ac0:	f7fb fe84 	bl	80017cc <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d015      	beq.n	8005af6 <plusButton_Listenner_For_MenuControl+0x3e>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <plusButton_Listenner_For_MenuControl+0x48>)
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ad2:	d304      	bcc.n	8005ade <plusButton_Listenner_For_MenuControl+0x26>
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <plusButton_Listenner_For_MenuControl+0x48>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	2302      	movs	r3, #2
 8005adc:	e00c      	b.n	8005af8 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <plusButton_Listenner_For_MenuControl+0x48>)
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d904      	bls.n	8005af0 <plusButton_Listenner_For_MenuControl+0x38>
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <plusButton_Listenner_For_MenuControl+0x48>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	2301      	movs	r3, #1
 8005aee:	e003      	b.n	8005af8 <plusButton_Listenner_For_MenuControl+0x40>
		plusbtncounter=0;
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <plusButton_Listenner_For_MenuControl+0x48>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40010800 	.word	0x40010800
 8005b00:	2000353a 	.word	0x2000353a

08005b04 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8005b08:	2180      	movs	r1, #128	; 0x80
 8005b0a:	480f      	ldr	r0, [pc, #60]	; (8005b48 <minusButton_Listenner_For_MenuControl+0x44>)
 8005b0c:	f7fb fe5e 	bl	80017cc <HAL_GPIO_ReadPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d015      	beq.n	8005b42 <minusButton_Listenner_For_MenuControl+0x3e>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <minusButton_Listenner_For_MenuControl+0x48>)
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b1e:	d304      	bcc.n	8005b2a <minusButton_Listenner_For_MenuControl+0x26>
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <minusButton_Listenner_For_MenuControl+0x48>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	2302      	movs	r3, #2
 8005b28:	e00c      	b.n	8005b44 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8005b2a:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <minusButton_Listenner_For_MenuControl+0x48>)
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d904      	bls.n	8005b3c <minusButton_Listenner_For_MenuControl+0x38>
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <minusButton_Listenner_For_MenuControl+0x48>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e003      	b.n	8005b44 <minusButton_Listenner_For_MenuControl+0x40>
		minusbtncounter=0;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <minusButton_Listenner_For_MenuControl+0x48>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40010800 	.word	0x40010800
 8005b4c:	2000353c 	.word	0x2000353c

08005b50 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8005b54:	4811      	ldr	r0, [pc, #68]	; (8005b9c <btnParameterInit+0x4c>)
 8005b56:	f7fc fc5f 	bl	8002418 <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <btnParameterInit+0x50>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <btnParameterInit+0x50>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8005b66:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <btnParameterInit+0x50>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <btnParameterInit+0x50>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <btnParameterInit+0x50>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <btnParameterInit+0x54>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=0;
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <btnParameterInit+0x54>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=0;
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <btnParameterInit+0x54>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=0;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <btnParameterInit+0x54>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	709a      	strb	r2, [r3, #2]
	drv2.factor=0;
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <btnParameterInit+0x54>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	70da      	strb	r2, [r3, #3]
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20003550 	.word	0x20003550
 8005ba0:	20003720 	.word	0x20003720
 8005ba4:	20003728 	.word	0x20003728

08005ba8 <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <setDriver1AngleValue+0x1c>)
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	8093      	strh	r3, [r2, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20003720 	.word	0x20003720

08005bc8 <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8005bd2:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <setDriver2AngleValue+0x1c>)
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	8093      	strh	r3, [r2, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20003728 	.word	0x20003728

08005be8 <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <buttonController+0x270>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80ac 	beq.w	8005d4e <buttonController+0x166>
		if(2==selectBtnListenner){ selectedMDI=false; item=0;}
 8005bf6:	4b99      	ldr	r3, [pc, #612]	; (8005e5c <buttonController+0x274>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d105      	bne.n	8005c0a <buttonController+0x22>
 8005bfe:	4b96      	ldr	r3, [pc, #600]	; (8005e58 <buttonController+0x270>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	4b96      	ldr	r3, [pc, #600]	; (8005e60 <buttonController+0x278>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8005c0a:	4b94      	ldr	r3, [pc, #592]	; (8005e5c <buttonController+0x274>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d110      	bne.n	8005c34 <buttonController+0x4c>
			if(item<ITEM_MAX)item++;
 8005c12:	4b93      	ldr	r3, [pc, #588]	; (8005e60 <buttonController+0x278>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	dc05      	bgt.n	8005c26 <buttonController+0x3e>
 8005c1a:	4b91      	ldr	r3, [pc, #580]	; (8005e60 <buttonController+0x278>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	4a8f      	ldr	r2, [pc, #572]	; (8005e60 <buttonController+0x278>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	e006      	b.n	8005c34 <buttonController+0x4c>
			else if(item==ITEM_MAX)item=0;
 8005c26:	4b8e      	ldr	r3, [pc, #568]	; (8005e60 <buttonController+0x278>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d102      	bne.n	8005c34 <buttonController+0x4c>
 8005c2e:	4b8c      	ldr	r3, [pc, #560]	; (8005e60 <buttonController+0x278>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		}
		if(1==plusBtnListenner){
 8005c34:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <buttonController+0x27c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d142      	bne.n	8005cc2 <buttonController+0xda>
			switch(item){
 8005c3c:	4b88      	ldr	r3, [pc, #544]	; (8005e60 <buttonController+0x278>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d83e      	bhi.n	8005cc2 <buttonController+0xda>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <buttonController+0x64>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c73 	.word	0x08005c73
 8005c54:	08005c89 	.word	0x08005c89
 8005c58:	08005c9f 	.word	0x08005c9f
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8005c5c:	4b82      	ldr	r3, [pc, #520]	; (8005e68 <buttonController+0x280>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2bff      	cmp	r3, #255	; 0xff
 8005c62:	d027      	beq.n	8005cb4 <buttonController+0xcc>
 8005c64:	4b80      	ldr	r3, [pc, #512]	; (8005e68 <buttonController+0x280>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	4b7e      	ldr	r3, [pc, #504]	; (8005e68 <buttonController+0x280>)
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e020      	b.n	8005cb4 <buttonController+0xcc>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8005c72:	4b7d      	ldr	r3, [pc, #500]	; (8005e68 <buttonController+0x280>)
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2bff      	cmp	r3, #255	; 0xff
 8005c78:	d01e      	beq.n	8005cb8 <buttonController+0xd0>
 8005c7a:	4b7b      	ldr	r3, [pc, #492]	; (8005e68 <buttonController+0x280>)
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b79      	ldr	r3, [pc, #484]	; (8005e68 <buttonController+0x280>)
 8005c84:	705a      	strb	r2, [r3, #1]
 8005c86:	e017      	b.n	8005cb8 <buttonController+0xd0>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8005c88:	4b77      	ldr	r3, [pc, #476]	; (8005e68 <buttonController+0x280>)
 8005c8a:	789b      	ldrb	r3, [r3, #2]
 8005c8c:	2bff      	cmp	r3, #255	; 0xff
 8005c8e:	d015      	beq.n	8005cbc <buttonController+0xd4>
 8005c90:	4b75      	ldr	r3, [pc, #468]	; (8005e68 <buttonController+0x280>)
 8005c92:	789b      	ldrb	r3, [r3, #2]
 8005c94:	3301      	adds	r3, #1
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	4b73      	ldr	r3, [pc, #460]	; (8005e68 <buttonController+0x280>)
 8005c9a:	709a      	strb	r2, [r3, #2]
 8005c9c:	e00e      	b.n	8005cbc <buttonController+0xd4>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8005c9e:	4b72      	ldr	r3, [pc, #456]	; (8005e68 <buttonController+0x280>)
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d00c      	beq.n	8005cc0 <buttonController+0xd8>
 8005ca6:	4b70      	ldr	r3, [pc, #448]	; (8005e68 <buttonController+0x280>)
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	3301      	adds	r3, #1
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4b6e      	ldr	r3, [pc, #440]	; (8005e68 <buttonController+0x280>)
 8005cb0:	70da      	strb	r2, [r3, #3]
 8005cb2:	e005      	b.n	8005cc0 <buttonController+0xd8>
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8005cb4:	bf00      	nop
 8005cb6:	e004      	b.n	8005cc2 <buttonController+0xda>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8005cb8:	bf00      	nop
 8005cba:	e002      	b.n	8005cc2 <buttonController+0xda>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <buttonController+0xda>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8005cc0:	bf00      	nop
			}
		}
		if(1==minusBtnListenner){
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <buttonController+0x284>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	f040 8104 	bne.w	8005ed4 <buttonController+0x2ec>
			switch(item){
 8005ccc:	4b64      	ldr	r3, [pc, #400]	; (8005e60 <buttonController+0x278>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	f200 80ff 	bhi.w	8005ed4 <buttonController+0x2ec>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <buttonController+0xf4>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d1d 	.word	0x08005d1d
 8005ce8:	08005d35 	.word	0x08005d35
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8005cec:	4b5e      	ldr	r3, [pc, #376]	; (8005e68 <buttonController+0x280>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80e0 	beq.w	8005eb6 <buttonController+0x2ce>
 8005cf6:	4b5c      	ldr	r3, [pc, #368]	; (8005e68 <buttonController+0x280>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	4b5a      	ldr	r3, [pc, #360]	; (8005e68 <buttonController+0x280>)
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e0d8      	b.n	8005eb6 <buttonController+0x2ce>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8005d04:	4b58      	ldr	r3, [pc, #352]	; (8005e68 <buttonController+0x280>)
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80d6 	beq.w	8005eba <buttonController+0x2d2>
 8005d0e:	4b56      	ldr	r3, [pc, #344]	; (8005e68 <buttonController+0x280>)
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4b54      	ldr	r3, [pc, #336]	; (8005e68 <buttonController+0x280>)
 8005d18:	705a      	strb	r2, [r3, #1]
 8005d1a:	e0ce      	b.n	8005eba <buttonController+0x2d2>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8005d1c:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <buttonController+0x280>)
 8005d1e:	789b      	ldrb	r3, [r3, #2]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80cc 	beq.w	8005ebe <buttonController+0x2d6>
 8005d26:	4b50      	ldr	r3, [pc, #320]	; (8005e68 <buttonController+0x280>)
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <buttonController+0x280>)
 8005d30:	709a      	strb	r2, [r3, #2]
 8005d32:	e0c4      	b.n	8005ebe <buttonController+0x2d6>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8005d34:	4b4c      	ldr	r3, [pc, #304]	; (8005e68 <buttonController+0x280>)
 8005d36:	78db      	ldrb	r3, [r3, #3]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80c2 	beq.w	8005ec2 <buttonController+0x2da>
 8005d3e:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <buttonController+0x280>)
 8005d40:	78db      	ldrb	r3, [r3, #3]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4b48      	ldr	r3, [pc, #288]	; (8005e68 <buttonController+0x280>)
 8005d48:	70da      	strb	r2, [r3, #3]
 8005d4a:	bf00      	nop
 8005d4c:	e0b9      	b.n	8005ec2 <buttonController+0x2da>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; item=0;}
 8005d4e:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <buttonController+0x274>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d105      	bne.n	8005d62 <buttonController+0x17a>
 8005d56:	4b40      	ldr	r3, [pc, #256]	; (8005e58 <buttonController+0x270>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <buttonController+0x278>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8005d62:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <buttonController+0x274>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d110      	bne.n	8005d8c <buttonController+0x1a4>
			if(item<ITEM_MAX)item++;
 8005d6a:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <buttonController+0x278>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	dc05      	bgt.n	8005d7e <buttonController+0x196>
 8005d72:	4b3b      	ldr	r3, [pc, #236]	; (8005e60 <buttonController+0x278>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3301      	adds	r3, #1
 8005d78:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <buttonController+0x278>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e006      	b.n	8005d8c <buttonController+0x1a4>
			else if(item==ITEM_MAX)item=0;
 8005d7e:	4b38      	ldr	r3, [pc, #224]	; (8005e60 <buttonController+0x278>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d102      	bne.n	8005d8c <buttonController+0x1a4>
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <buttonController+0x278>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
		}
		if(1==plusBtnListenner){
 8005d8c:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <buttonController+0x27c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d142      	bne.n	8005e1a <buttonController+0x232>
			switch(item){
 8005d94:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <buttonController+0x278>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d83e      	bhi.n	8005e1a <buttonController+0x232>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <buttonController+0x1bc>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dcb 	.word	0x08005dcb
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005df7 	.word	0x08005df7
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <buttonController+0x288>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2bff      	cmp	r3, #255	; 0xff
 8005dba:	d027      	beq.n	8005e0c <buttonController+0x224>
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <buttonController+0x288>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <buttonController+0x288>)
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	e020      	b.n	8005e0c <buttonController+0x224>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8005dca:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <buttonController+0x288>)
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d01e      	beq.n	8005e10 <buttonController+0x228>
 8005dd2:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <buttonController+0x288>)
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <buttonController+0x288>)
 8005ddc:	705a      	strb	r2, [r3, #1]
 8005dde:	e017      	b.n	8005e10 <buttonController+0x228>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8005de0:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <buttonController+0x288>)
 8005de2:	789b      	ldrb	r3, [r3, #2]
 8005de4:	2bff      	cmp	r3, #255	; 0xff
 8005de6:	d015      	beq.n	8005e14 <buttonController+0x22c>
 8005de8:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <buttonController+0x288>)
 8005dea:	789b      	ldrb	r3, [r3, #2]
 8005dec:	3301      	adds	r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <buttonController+0x288>)
 8005df2:	709a      	strb	r2, [r3, #2]
 8005df4:	e00e      	b.n	8005e14 <buttonController+0x22c>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8005df6:	4b1e      	ldr	r3, [pc, #120]	; (8005e70 <buttonController+0x288>)
 8005df8:	78db      	ldrb	r3, [r3, #3]
 8005dfa:	2bff      	cmp	r3, #255	; 0xff
 8005dfc:	d00c      	beq.n	8005e18 <buttonController+0x230>
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <buttonController+0x288>)
 8005e00:	78db      	ldrb	r3, [r3, #3]
 8005e02:	3301      	adds	r3, #1
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <buttonController+0x288>)
 8005e08:	70da      	strb	r2, [r3, #3]
 8005e0a:	e005      	b.n	8005e18 <buttonController+0x230>
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8005e0c:	bf00      	nop
 8005e0e:	e004      	b.n	8005e1a <buttonController+0x232>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8005e10:	bf00      	nop
 8005e12:	e002      	b.n	8005e1a <buttonController+0x232>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8005e14:	bf00      	nop
 8005e16:	e000      	b.n	8005e1a <buttonController+0x232>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8005e18:	bf00      	nop
			}
		}
		if(1==minusBtnListenner){
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <buttonController+0x284>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d158      	bne.n	8005ed4 <buttonController+0x2ec>
			switch(item){
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <buttonController+0x278>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d854      	bhi.n	8005ed4 <buttonController+0x2ec>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <buttonController+0x248>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e41 	.word	0x08005e41
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e8b 	.word	0x08005e8b
 8005e3c:	08005ea1 	.word	0x08005ea1
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <buttonController+0x288>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d03e      	beq.n	8005ec6 <buttonController+0x2de>
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <buttonController+0x288>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <buttonController+0x288>)
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e037      	b.n	8005ec6 <buttonController+0x2de>
 8005e56:	bf00      	nop
 8005e58:	20000010 	.word	0x20000010
 8005e5c:	2000353e 	.word	0x2000353e
 8005e60:	20003540 	.word	0x20003540
 8005e64:	20003544 	.word	0x20003544
 8005e68:	20003720 	.word	0x20003720
 8005e6c:	20003545 	.word	0x20003545
 8005e70:	20003728 	.word	0x20003728
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8005e74:	4b21      	ldr	r3, [pc, #132]	; (8005efc <buttonController+0x314>)
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d026      	beq.n	8005eca <buttonController+0x2e2>
 8005e7c:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <buttonController+0x314>)
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <buttonController+0x314>)
 8005e86:	705a      	strb	r2, [r3, #1]
 8005e88:	e01f      	b.n	8005eca <buttonController+0x2e2>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <buttonController+0x314>)
 8005e8c:	789b      	ldrb	r3, [r3, #2]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01d      	beq.n	8005ece <buttonController+0x2e6>
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <buttonController+0x314>)
 8005e94:	789b      	ldrb	r3, [r3, #2]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <buttonController+0x314>)
 8005e9c:	709a      	strb	r2, [r3, #2]
 8005e9e:	e016      	b.n	8005ece <buttonController+0x2e6>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8005ea0:	4b16      	ldr	r3, [pc, #88]	; (8005efc <buttonController+0x314>)
 8005ea2:	78db      	ldrb	r3, [r3, #3]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d014      	beq.n	8005ed2 <buttonController+0x2ea>
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <buttonController+0x314>)
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <buttonController+0x314>)
 8005eb2:	70da      	strb	r2, [r3, #3]
 8005eb4:	e00d      	b.n	8005ed2 <buttonController+0x2ea>
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8005eb6:	bf00      	nop
 8005eb8:	e00c      	b.n	8005ed4 <buttonController+0x2ec>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8005eba:	bf00      	nop
 8005ebc:	e00a      	b.n	8005ed4 <buttonController+0x2ec>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8005ebe:	bf00      	nop
 8005ec0:	e008      	b.n	8005ed4 <buttonController+0x2ec>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8005ec2:	bf00      	nop
 8005ec4:	e006      	b.n	8005ed4 <buttonController+0x2ec>
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8005ec6:	bf00      	nop
 8005ec8:	e004      	b.n	8005ed4 <buttonController+0x2ec>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <buttonController+0x2ec>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <buttonController+0x2ec>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8005ed2:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 8005ed4:	f7ff fdca 	bl	8005a6c <selectButton_Listenner_For_MenuControl>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <buttonController+0x318>)
 8005ede:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 8005ee0:	f7ff fdea 	bl	8005ab8 <plusButton_Listenner_For_MenuControl>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <buttonController+0x31c>)
 8005eea:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 8005eec:	f7ff fe0a 	bl	8005b04 <minusButton_Listenner_For_MenuControl>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <buttonController+0x320>)
 8005ef6:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 8005ef8:	bf00      	nop
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20003728 	.word	0x20003728
 8005f00:	2000353e 	.word	0x2000353e
 8005f04:	20003544 	.word	0x20003544
 8005f08:	20003545 	.word	0x20003545

08005f0c <transmissionDriver1>:
void transmissionDriver1(void){
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1(drv1.angle,drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor);
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <transmissionDriver1+0x2c>)
 8005f14:	8898      	ldrh	r0, [r3, #4]
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <transmissionDriver1+0x2c>)
 8005f18:	7819      	ldrb	r1, [r3, #0]
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <transmissionDriver1+0x2c>)
 8005f1c:	785a      	ldrb	r2, [r3, #1]
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <transmissionDriver1+0x2c>)
 8005f20:	789c      	ldrb	r4, [r3, #2]
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <transmissionDriver1+0x2c>)
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4623      	mov	r3, r4
 8005f2a:	f000 f87b 	bl	8006024 <MDI_sendDataChannel1>
}
 8005f2e:	bf00      	nop
 8005f30:	3704      	adds	r7, #4
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20003720 	.word	0x20003720

08005f3c <transmissionDriver2>:
void transmissionDriver2(void){
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2(drv2.angle,drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor);
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <transmissionDriver2+0x2c>)
 8005f44:	8898      	ldrh	r0, [r3, #4]
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <transmissionDriver2+0x2c>)
 8005f48:	7819      	ldrb	r1, [r3, #0]
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <transmissionDriver2+0x2c>)
 8005f4c:	785a      	ldrb	r2, [r3, #1]
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <transmissionDriver2+0x2c>)
 8005f50:	789c      	ldrb	r4, [r3, #2]
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <transmissionDriver2+0x2c>)
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4623      	mov	r3, r4
 8005f5a:	f000 f941 	bl	80061e0 <MDI_sendDataChannel2>
}
 8005f5e:	bf00      	nop
 8005f60:	3704      	adds	r7, #4
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20003728 	.word	0x20003728

08005f6c <MDI_writeCommand>:
 * @brief Write command to Motor Driver
 * @param uartChannel -> get uart channel
 * @param cmd -> command to write
 * @return none
 */
static void MDI_writeCommand(UART_HandleTypeDef *uartChannel,uint8_t cmd){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*) &cmd,sizeof(cmd),TIMEOUTVAL);
 8005f78:	1cf9      	adds	r1, r7, #3
 8005f7a:	2305      	movs	r3, #5
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fe35 	bl	8002bee <HAL_UART_Transmit>
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel,uint8_t data){
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*)&data,sizeof(data),TIMEOUTVAL);
 8005f98:	1cf9      	adds	r1, r7, #3
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fe25 	bl	8002bee <HAL_UART_Transmit>
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <MDI_writeBigData>:
 * @param uartChannel -> get uart channel
 * @param buff -> get data array
 * @param buff_size -> get data array size
 * @return none
 */
static void MDI_writeBigData(UART_HandleTypeDef *uartChannel,uint8_t *buff, size_t buff_size){
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
	while (buff_size > 0) {
 8005fb8:	e014      	b.n	8005fe4 <MDI_writeBigData+0x38>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bf28      	it	cs
 8005fc4:	4613      	movcs	r3, r2
 8005fc6:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(uartChannel, buff, chunk_size, TIMEOUTVAL);
 8005fc8:	8afa      	ldrh	r2, [r7, #22]
 8005fca:	2305      	movs	r3, #5
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7fc fe0d 	bl	8002bee <HAL_UART_Transmit>
		buff += chunk_size;
 8005fd4:	8afb      	ldrh	r3, [r7, #22]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4413      	add	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]
		buff_size -= chunk_size;
 8005fdc:	8afb      	ldrh	r3, [r7, #22]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	607b      	str	r3, [r7, #4]
	while (buff_size > 0) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e7      	bne.n	8005fba <MDI_writeBigData+0xe>
	}
}
 8005fea:	bf00      	nop
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <MDI_2byteWriteData>:
 * @brief Write  2 byte data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> get 2 byte data
 * @return none
 */
void MDI_2byteWriteData(UART_HandleTypeDef *uartChannel,uint16_t data){
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	807b      	strh	r3, [r7, #2]
	uint8_t arrTmp[] = {data >> 8, data & 0xFF};
 8005ffe:	887b      	ldrh	r3, [r7, #2]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	b29b      	uxth	r3, r3
 8006004:	b2db      	uxtb	r3, r3
 8006006:	733b      	strb	r3, [r7, #12]
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	737b      	strb	r3, [r7, #13]
	MDI_writeBigData(uartChannel,arrTmp,sizeof(arrTmp));
 800600e:	f107 030c 	add.w	r3, r7, #12
 8006012:	2202      	movs	r2, #2
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffc8 	bl	8005fac <MDI_writeBigData>

}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <MDI_sendDataChannel1>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	80fb      	strh	r3, [r7, #6]
 8006036:	4603      	mov	r3, r0
 8006038:	717b      	strb	r3, [r7, #5]
 800603a:	460b      	mov	r3, r1
 800603c:	713b      	strb	r3, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8006042:	2300      	movs	r3, #0
 8006044:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel1,0xFF);
 8006046:	21ff      	movs	r1, #255	; 0xff
 8006048:	482d      	ldr	r0, [pc, #180]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 800604a:	f7ff ff8f 	bl	8005f6c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel1,0xFF); //Data transmission started
 800604e:	21ff      	movs	r1, #255	; 0xff
 8006050:	482b      	ldr	r0, [pc, #172]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 8006052:	f7ff ff8b 	bl	8005f6c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel1,angleVal);
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	4619      	mov	r1, r3
 800605a:	4829      	ldr	r0, [pc, #164]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 800605c:	f7ff ffc9 	bl	8005ff2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2db      	uxtb	r3, r3
 8006068:	723b      	strb	r3, [r7, #8]
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8006070:	7a3b      	ldrb	r3, [r7, #8]
 8006072:	b29a      	uxth	r2, r3
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	4413      	add	r3, r2
 8006078:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 800607a:	7a7b      	ldrb	r3, [r7, #9]
 800607c:	b29a      	uxth	r2, r3
 800607e:	89fb      	ldrh	r3, [r7, #14]
 8006080:	4413      	add	r3, r2
 8006082:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kd); checksumTmp+=kd; //writed kd
 8006084:	797b      	ldrb	r3, [r7, #5]
 8006086:	4619      	mov	r1, r3
 8006088:	481d      	ldr	r0, [pc, #116]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 800608a:	f7ff ff7f 	bl	8005f8c <MDI_writeSmallData>
 800608e:	797b      	ldrb	r3, [r7, #5]
 8006090:	b29a      	uxth	r2, r3
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	4413      	add	r3, r2
 8006096:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,ki); checksumTmp+=ki; //writed ki
 8006098:	793b      	ldrb	r3, [r7, #4]
 800609a:	4619      	mov	r1, r3
 800609c:	4818      	ldr	r0, [pc, #96]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 800609e:	f7ff ff75 	bl	8005f8c <MDI_writeSmallData>
 80060a2:	793b      	ldrb	r3, [r7, #4]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	4413      	add	r3, r2
 80060aa:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kp); checksumTmp+=kp; //writed kp
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	4619      	mov	r1, r3
 80060b0:	4813      	ldr	r0, [pc, #76]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 80060b2:	f7ff ff6b 	bl	8005f8c <MDI_writeSmallData>
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	4413      	add	r3, r2
 80060be:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,factor); checksumTmp+=factor; //writed factor
 80060c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060c4:	4619      	mov	r1, r3
 80060c6:	480e      	ldr	r0, [pc, #56]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 80060c8:	f7ff ff60 	bl	8005f8c <MDI_writeSmallData>
 80060cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	89fb      	ldrh	r3, [r7, #14]
 80060d4:	4413      	add	r3, r2
 80060d6:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 80060d8:	89fb      	ldrh	r3, [r7, #14]
 80060da:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel1,tmp); //checksum first byte
 80060dc:	7b7b      	ldrb	r3, [r7, #13]
 80060de:	4619      	mov	r1, r3
 80060e0:	4807      	ldr	r0, [pc, #28]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 80060e2:	f7ff ff53 	bl	8005f8c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	43db      	mvns	r3, r3
 80060ea:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel1,tmpComp); //checksum second byte
 80060ec:	7b3b      	ldrb	r3, [r7, #12]
 80060ee:	4619      	mov	r1, r3
 80060f0:	4803      	ldr	r0, [pc, #12]	; (8006100 <MDI_sendDataChannel1+0xdc>)
 80060f2:	f7ff ff4b 	bl	8005f8c <MDI_writeSmallData>
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	bf00      	nop
 8006100:	200035f8 	.word	0x200035f8

08006104 <MDI_getDataChannel1>:
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
uint8_t getFirstData1;
void MDI_getDataChannel1(void){
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel1,(uint8_t*)&getFirstData1,1,TIMEOUTVAL);
 800610a:	2305      	movs	r3, #5
 800610c:	2201      	movs	r2, #1
 800610e:	4930      	ldr	r1, [pc, #192]	; (80061d0 <MDI_getDataChannel1+0xcc>)
 8006110:	4830      	ldr	r0, [pc, #192]	; (80061d4 <MDI_getDataChannel1+0xd0>)
 8006112:	f7fc fdfe 	bl	8002d12 <HAL_UART_Receive>
	if(0xFF ==getFirstData1){
 8006116:	4b2e      	ldr	r3, [pc, #184]	; (80061d0 <MDI_getDataChannel1+0xcc>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2bff      	cmp	r3, #255	; 0xff
 800611c:	d153      	bne.n	80061c6 <MDI_getDataChannel1+0xc2>
		HAL_UART_Receive(&MDI_channel1,(uint8_t*)rec1Buff,9,TIMEOUTVAL*9);
 800611e:	232d      	movs	r3, #45	; 0x2d
 8006120:	2209      	movs	r2, #9
 8006122:	492d      	ldr	r1, [pc, #180]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 8006124:	482b      	ldr	r0, [pc, #172]	; (80061d4 <MDI_getDataChannel1+0xd0>)
 8006126:	f7fc fdf4 	bl	8002d12 <HAL_UART_Receive>
			if(0xFF==rec1Buff[0]){
 800612a:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2bff      	cmp	r3, #255	; 0xff
 8006130:	d13c      	bne.n	80061ac <MDI_getDataChannel1+0xa8>
				uint16_t checksumTmp=0;
 8006132:	2300      	movs	r3, #0
 8006134:	80fb      	strh	r3, [r7, #6]
				for(uint8_t c=1;c<7;c++)checksumTmp+=rec1Buff[c];
 8006136:	2301      	movs	r3, #1
 8006138:	717b      	strb	r3, [r7, #5]
 800613a:	e009      	b.n	8006150 <MDI_getDataChannel1+0x4c>
 800613c:	797b      	ldrb	r3, [r7, #5]
 800613e:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 8006140:	5cd3      	ldrb	r3, [r2, r3]
 8006142:	b29a      	uxth	r2, r3
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	4413      	add	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
 800614a:	797b      	ldrb	r3, [r7, #5]
 800614c:	3301      	adds	r3, #1
 800614e:	717b      	strb	r3, [r7, #5]
 8006150:	797b      	ldrb	r3, [r7, #5]
 8006152:	2b06      	cmp	r3, #6
 8006154:	d9f2      	bls.n	800613c <MDI_getDataChannel1+0x38>
				uint8_t tmp =checksumTmp%256;
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	70fb      	strb	r3, [r7, #3]
				uint8_t tmpComp =~tmp;
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	43db      	mvns	r3, r3
 800615e:	70bb      	strb	r3, [r7, #2]
				if(tmp == rec1Buff[7] && tmpComp == rec1Buff[8]){
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 8006162:	79db      	ldrb	r3, [r3, #7]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	429a      	cmp	r2, r3
 8006168:	d120      	bne.n	80061ac <MDI_getDataChannel1+0xa8>
 800616a:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 800616c:	7a1b      	ldrb	r3, [r3, #8]
 800616e:	78ba      	ldrb	r2, [r7, #2]
 8006170:	429a      	cmp	r2, r3
 8006172:	d11b      	bne.n	80061ac <MDI_getDataChannel1+0xa8>
					driver1.angle=((uint16_t)rec1Buff[1] << 8) | rec1Buff[2];
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b21a      	sxth	r2, r3
 800617c:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 800617e:	789b      	ldrb	r3, [r3, #2]
 8006180:	b21b      	sxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b21b      	sxth	r3, r3
 8006186:	b29a      	uxth	r2, r3
 8006188:	4b14      	ldr	r3, [pc, #80]	; (80061dc <MDI_getDataChannel1+0xd8>)
 800618a:	809a      	strh	r2, [r3, #4]
					driver1.pid_kd=rec1Buff[3];
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 800618e:	78da      	ldrb	r2, [r3, #3]
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <MDI_getDataChannel1+0xd8>)
 8006192:	701a      	strb	r2, [r3, #0]
					driver1.pid_ki=rec1Buff[4];
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 8006196:	791a      	ldrb	r2, [r3, #4]
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <MDI_getDataChannel1+0xd8>)
 800619a:	705a      	strb	r2, [r3, #1]
					driver1.pid_kp=rec1Buff[5];
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 800619e:	795a      	ldrb	r2, [r3, #5]
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <MDI_getDataChannel1+0xd8>)
 80061a2:	709a      	strb	r2, [r3, #2]
					driver1.factor=rec1Buff[6];
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 80061a6:	799a      	ldrb	r2, [r3, #6]
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <MDI_getDataChannel1+0xd8>)
 80061aa:	70da      	strb	r2, [r3, #3]
				}
			}
			for(uint8_t c=0;c<9;c++)rec1Buff[c]=0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	713b      	strb	r3, [r7, #4]
 80061b0:	e006      	b.n	80061c0 <MDI_getDataChannel1+0xbc>
 80061b2:	793b      	ldrb	r3, [r7, #4]
 80061b4:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <MDI_getDataChannel1+0xd4>)
 80061b6:	2100      	movs	r1, #0
 80061b8:	54d1      	strb	r1, [r2, r3]
 80061ba:	793b      	ldrb	r3, [r7, #4]
 80061bc:	3301      	adds	r3, #1
 80061be:	713b      	strb	r3, [r7, #4]
 80061c0:	793b      	ldrb	r3, [r7, #4]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d9f5      	bls.n	80061b2 <MDI_getDataChannel1+0xae>
	}
}//"%d - %d - %d - %d - %d - %d - %d - %d - %d - %d\n",rec1Buff[0],rec1Buff[1],rec1Buff[2],rec1Buff[3],rec1Buff[4],rec1Buff[5],rec1Buff[6],rec1Buff[7],rec1Buff[8],rec1Buff[9]
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20003749 	.word	0x20003749
 80061d4:	200035f8 	.word	0x200035f8
 80061d8:	2000374c 	.word	0x2000374c
 80061dc:	20003738 	.word	0x20003738

080061e0 <MDI_sendDataChannel2>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	80fb      	strh	r3, [r7, #6]
 80061f2:	4603      	mov	r3, r0
 80061f4:	717b      	strb	r3, [r7, #5]
 80061f6:	460b      	mov	r3, r1
 80061f8:	713b      	strb	r3, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 80061fe:	2300      	movs	r3, #0
 8006200:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel2,0xFF);
 8006202:	21ff      	movs	r1, #255	; 0xff
 8006204:	482d      	ldr	r0, [pc, #180]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 8006206:	f7ff feb1 	bl	8005f6c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel2,0xFF); //Data transmission started
 800620a:	21ff      	movs	r1, #255	; 0xff
 800620c:	482b      	ldr	r0, [pc, #172]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 800620e:	f7ff fead 	bl	8005f6c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel2,angleVal);
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	4619      	mov	r1, r3
 8006216:	4829      	ldr	r0, [pc, #164]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 8006218:	f7ff feeb 	bl	8005ff2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	723b      	strb	r3, [r7, #8]
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 800622c:	7a3b      	ldrb	r3, [r7, #8]
 800622e:	b29a      	uxth	r2, r3
 8006230:	89fb      	ldrh	r3, [r7, #14]
 8006232:	4413      	add	r3, r2
 8006234:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8006236:	7a7b      	ldrb	r3, [r7, #9]
 8006238:	b29a      	uxth	r2, r3
 800623a:	89fb      	ldrh	r3, [r7, #14]
 800623c:	4413      	add	r3, r2
 800623e:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kd); checksumTmp+=kd; //writed kd
 8006240:	797b      	ldrb	r3, [r7, #5]
 8006242:	4619      	mov	r1, r3
 8006244:	481d      	ldr	r0, [pc, #116]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 8006246:	f7ff fea1 	bl	8005f8c <MDI_writeSmallData>
 800624a:	797b      	ldrb	r3, [r7, #5]
 800624c:	b29a      	uxth	r2, r3
 800624e:	89fb      	ldrh	r3, [r7, #14]
 8006250:	4413      	add	r3, r2
 8006252:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,ki); checksumTmp+=ki; //writed ki
 8006254:	793b      	ldrb	r3, [r7, #4]
 8006256:	4619      	mov	r1, r3
 8006258:	4818      	ldr	r0, [pc, #96]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 800625a:	f7ff fe97 	bl	8005f8c <MDI_writeSmallData>
 800625e:	793b      	ldrb	r3, [r7, #4]
 8006260:	b29a      	uxth	r2, r3
 8006262:	89fb      	ldrh	r3, [r7, #14]
 8006264:	4413      	add	r3, r2
 8006266:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kp); checksumTmp+=kp; //writed kp
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	4619      	mov	r1, r3
 800626c:	4813      	ldr	r0, [pc, #76]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 800626e:	f7ff fe8d 	bl	8005f8c <MDI_writeSmallData>
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	b29a      	uxth	r2, r3
 8006276:	89fb      	ldrh	r3, [r7, #14]
 8006278:	4413      	add	r3, r2
 800627a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,factor); checksumTmp+=factor; //writed factor
 800627c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006280:	4619      	mov	r1, r3
 8006282:	480e      	ldr	r0, [pc, #56]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 8006284:	f7ff fe82 	bl	8005f8c <MDI_writeSmallData>
 8006288:	f897 3020 	ldrb.w	r3, [r7, #32]
 800628c:	b29a      	uxth	r2, r3
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	4413      	add	r3, r2
 8006292:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 8006294:	89fb      	ldrh	r3, [r7, #14]
 8006296:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel2,tmp); //checksum first byte
 8006298:	7b7b      	ldrb	r3, [r7, #13]
 800629a:	4619      	mov	r1, r3
 800629c:	4807      	ldr	r0, [pc, #28]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 800629e:	f7ff fe75 	bl	8005f8c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 80062a2:	7b7b      	ldrb	r3, [r7, #13]
 80062a4:	43db      	mvns	r3, r3
 80062a6:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel2,tmpComp); //checksum second byte
 80062a8:	7b3b      	ldrb	r3, [r7, #12]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4803      	ldr	r0, [pc, #12]	; (80062bc <MDI_sendDataChannel2+0xdc>)
 80062ae:	f7ff fe6d 	bl	8005f8c <MDI_writeSmallData>
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd90      	pop	{r4, r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20003648 	.word	0x20003648

080062c0 <MDI_getDataChannel2>:
/**
 * @brief get to Motor Driver 2 values
 * @return none
 */
uint8_t getFirstData2;
void MDI_getDataChannel2(void){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel2,(uint8_t*)&getFirstData2,1,TIMEOUTVAL);
 80062c6:	2305      	movs	r3, #5
 80062c8:	2201      	movs	r2, #1
 80062ca:	4930      	ldr	r1, [pc, #192]	; (800638c <MDI_getDataChannel2+0xcc>)
 80062cc:	4830      	ldr	r0, [pc, #192]	; (8006390 <MDI_getDataChannel2+0xd0>)
 80062ce:	f7fc fd20 	bl	8002d12 <HAL_UART_Receive>
	if(0xFF ==getFirstData2){
 80062d2:	4b2e      	ldr	r3, [pc, #184]	; (800638c <MDI_getDataChannel2+0xcc>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2bff      	cmp	r3, #255	; 0xff
 80062d8:	d153      	bne.n	8006382 <MDI_getDataChannel2+0xc2>
	HAL_UART_Receive(&MDI_channel2,(uint8_t*)rec2Buff,10,100);
 80062da:	2364      	movs	r3, #100	; 0x64
 80062dc:	220a      	movs	r2, #10
 80062de:	492d      	ldr	r1, [pc, #180]	; (8006394 <MDI_getDataChannel2+0xd4>)
 80062e0:	482b      	ldr	r0, [pc, #172]	; (8006390 <MDI_getDataChannel2+0xd0>)
 80062e2:	f7fc fd16 	bl	8002d12 <HAL_UART_Receive>
	if(0xFF==rec2Buff[0]){
 80062e6:	4b2b      	ldr	r3, [pc, #172]	; (8006394 <MDI_getDataChannel2+0xd4>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2bff      	cmp	r3, #255	; 0xff
 80062ec:	d13c      	bne.n	8006368 <MDI_getDataChannel2+0xa8>
		uint16_t checksumTmp=0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	80fb      	strh	r3, [r7, #6]
		for(uint8_t c=1;c<7;c++)checksumTmp+=rec2Buff[c];
 80062f2:	2301      	movs	r3, #1
 80062f4:	717b      	strb	r3, [r7, #5]
 80062f6:	e009      	b.n	800630c <MDI_getDataChannel2+0x4c>
 80062f8:	797b      	ldrb	r3, [r7, #5]
 80062fa:	4a26      	ldr	r2, [pc, #152]	; (8006394 <MDI_getDataChannel2+0xd4>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	4413      	add	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
 8006306:	797b      	ldrb	r3, [r7, #5]
 8006308:	3301      	adds	r3, #1
 800630a:	717b      	strb	r3, [r7, #5]
 800630c:	797b      	ldrb	r3, [r7, #5]
 800630e:	2b06      	cmp	r3, #6
 8006310:	d9f2      	bls.n	80062f8 <MDI_getDataChannel2+0x38>
		uint8_t tmp =checksumTmp%256;
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	70fb      	strb	r3, [r7, #3]
		uint8_t tmpComp =~tmp;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	43db      	mvns	r3, r3
 800631a:	70bb      	strb	r3, [r7, #2]
		if(tmp == rec2Buff[7] && tmpComp == rec2Buff[8]){
 800631c:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <MDI_getDataChannel2+0xd4>)
 800631e:	79db      	ldrb	r3, [r3, #7]
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	429a      	cmp	r2, r3
 8006324:	d120      	bne.n	8006368 <MDI_getDataChannel2+0xa8>
 8006326:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <MDI_getDataChannel2+0xd4>)
 8006328:	7a1b      	ldrb	r3, [r3, #8]
 800632a:	78ba      	ldrb	r2, [r7, #2]
 800632c:	429a      	cmp	r2, r3
 800632e:	d11b      	bne.n	8006368 <MDI_getDataChannel2+0xa8>
			driver2.angle=((uint16_t)rec2Buff[1] << 8) | rec2Buff[2];
 8006330:	4b18      	ldr	r3, [pc, #96]	; (8006394 <MDI_getDataChannel2+0xd4>)
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	b21a      	sxth	r2, r3
 8006338:	4b16      	ldr	r3, [pc, #88]	; (8006394 <MDI_getDataChannel2+0xd4>)
 800633a:	789b      	ldrb	r3, [r3, #2]
 800633c:	b21b      	sxth	r3, r3
 800633e:	4313      	orrs	r3, r2
 8006340:	b21b      	sxth	r3, r3
 8006342:	b29a      	uxth	r2, r3
 8006344:	4b14      	ldr	r3, [pc, #80]	; (8006398 <MDI_getDataChannel2+0xd8>)
 8006346:	809a      	strh	r2, [r3, #4]
			driver2.pid_kd=rec2Buff[3];
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <MDI_getDataChannel2+0xd4>)
 800634a:	78da      	ldrb	r2, [r3, #3]
 800634c:	4b12      	ldr	r3, [pc, #72]	; (8006398 <MDI_getDataChannel2+0xd8>)
 800634e:	701a      	strb	r2, [r3, #0]
			driver2.pid_ki=rec2Buff[4];
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <MDI_getDataChannel2+0xd4>)
 8006352:	791a      	ldrb	r2, [r3, #4]
 8006354:	4b10      	ldr	r3, [pc, #64]	; (8006398 <MDI_getDataChannel2+0xd8>)
 8006356:	705a      	strb	r2, [r3, #1]
			driver2.pid_kp=rec2Buff[5];
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <MDI_getDataChannel2+0xd4>)
 800635a:	795a      	ldrb	r2, [r3, #5]
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <MDI_getDataChannel2+0xd8>)
 800635e:	709a      	strb	r2, [r3, #2]
			driver2.factor=rec2Buff[6];
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <MDI_getDataChannel2+0xd4>)
 8006362:	799a      	ldrb	r2, [r3, #6]
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <MDI_getDataChannel2+0xd8>)
 8006366:	70da      	strb	r2, [r3, #3]
		}
	}
	for(uint8_t c=0;c<9;c++)rec2Buff[c]=0;
 8006368:	2300      	movs	r3, #0
 800636a:	713b      	strb	r3, [r7, #4]
 800636c:	e006      	b.n	800637c <MDI_getDataChannel2+0xbc>
 800636e:	793b      	ldrb	r3, [r7, #4]
 8006370:	4a08      	ldr	r2, [pc, #32]	; (8006394 <MDI_getDataChannel2+0xd4>)
 8006372:	2100      	movs	r1, #0
 8006374:	54d1      	strb	r1, [r2, r3]
 8006376:	793b      	ldrb	r3, [r7, #4]
 8006378:	3301      	adds	r3, #1
 800637a:	713b      	strb	r3, [r7, #4]
 800637c:	793b      	ldrb	r3, [r7, #4]
 800637e:	2b08      	cmp	r3, #8
 8006380:	d9f5      	bls.n	800636e <MDI_getDataChannel2+0xae>
	}
}//"DRV 2: angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver2.angle,driver2.pid_kd,driver2.pid_ki,driver2.pid_kp,driver2.factor
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20003755 	.word	0x20003755
 8006390:	20003648 	.word	0x20003648
 8006394:	20003740 	.word	0x20003740
 8006398:	20003730 	.word	0x20003730

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	2500      	movs	r5, #0
 80063a0:	4e0c      	ldr	r6, [pc, #48]	; (80063d4 <__libc_init_array+0x38>)
 80063a2:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a4:	1ba4      	subs	r4, r4, r6
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	f000 f82e 	bl	800640c <_init>
 80063b0:	2500      	movs	r5, #0
 80063b2:	4e0a      	ldr	r6, [pc, #40]	; (80063dc <__libc_init_array+0x40>)
 80063b4:	4c0a      	ldr	r4, [pc, #40]	; (80063e0 <__libc_init_array+0x44>)
 80063b6:	1ba4      	subs	r4, r4, r6
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	42a5      	cmp	r5, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063c4:	4798      	blx	r3
 80063c6:	3501      	adds	r5, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ce:	4798      	blx	r3
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	08006598 	.word	0x08006598
 80063d8:	08006598 	.word	0x08006598
 80063dc:	08006598 	.word	0x08006598
 80063e0:	0800659c 	.word	0x0800659c

080063e4 <memcpy>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	1e43      	subs	r3, r0, #1
 80063e8:	440a      	add	r2, r1
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	bd10      	pop	{r4, pc}
 80063f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f8:	e7f7      	b.n	80063ea <memcpy+0x6>

080063fa <memset>:
 80063fa:	4603      	mov	r3, r0
 80063fc:	4402      	add	r2, r0
 80063fe:	4293      	cmp	r3, r2
 8006400:	d100      	bne.n	8006404 <memset+0xa>
 8006402:	4770      	bx	lr
 8006404:	f803 1b01 	strb.w	r1, [r3], #1
 8006408:	e7f9      	b.n	80063fe <memset+0x4>
	...

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
