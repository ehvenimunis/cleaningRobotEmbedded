
cleaningRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006534  08006534  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006534  08006534  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006534  08006534  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800653c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003714  20000014  08006550  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003728  08006550  00023728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019434  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033fa  00000000  00000000  00039471  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0003c870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003293  00000000  00000000  0003f188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011740  00000000  00000000  0004241b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009803d  00000000  00000000  00053b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebb98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005840  00000000  00000000  000ebc14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080063a8 	.word	0x080063a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080063a8 	.word	0x080063a8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc46 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f864 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9ae 	bl	80004bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8bc 	bl	80002dc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f956 	bl	8000414 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000168:	f000 f97e 	bl	8000468 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800016c:	f000 f904 	bl	8000378 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 ff1c 	bl	8002fac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendData1 */
  sendData1Handle = osThreadNew(sendData1Task, NULL, &sendData1_attributes);
 8000174:	4a19      	ldr	r2, [pc, #100]	; (80001dc <main+0x8c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4819      	ldr	r0, [pc, #100]	; (80001e0 <main+0x90>)
 800017a:	f002 ff7d 	bl	8003078 <osThreadNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <main+0x94>)
 8000182:	601a      	str	r2, [r3, #0]

  /* creation of sendData2 */
  sendData2Handle = osThreadNew(sendData2Task, NULL, &sendData2_attributes);
 8000184:	4a18      	ldr	r2, [pc, #96]	; (80001e8 <main+0x98>)
 8000186:	2100      	movs	r1, #0
 8000188:	4818      	ldr	r0, [pc, #96]	; (80001ec <main+0x9c>)
 800018a:	f002 ff75 	bl	8003078 <osThreadNew>
 800018e:	4602      	mov	r2, r0
 8000190:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <main+0xa0>)
 8000192:	601a      	str	r2, [r3, #0]

  /* creation of readAdc */
  readAdcHandle = osThreadNew(readAdcTask, NULL, &readAdc_attributes);
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <main+0xa4>)
 8000196:	2100      	movs	r1, #0
 8000198:	4817      	ldr	r0, [pc, #92]	; (80001f8 <main+0xa8>)
 800019a:	f002 ff6d 	bl	8003078 <osThreadNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b16      	ldr	r3, [pc, #88]	; (80001fc <main+0xac>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of getData1 */
  getData1Handle = osThreadNew(getData1Task, NULL, &getData1_attributes);
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <main+0xb0>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4816      	ldr	r0, [pc, #88]	; (8000204 <main+0xb4>)
 80001aa:	f002 ff65 	bl	8003078 <osThreadNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b15      	ldr	r3, [pc, #84]	; (8000208 <main+0xb8>)
 80001b2:	601a      	str	r2, [r3, #0]

  /* creation of getData2 */
  getData2Handle = osThreadNew(getData2Task, NULL, &getData2_attributes);
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <main+0xbc>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4815      	ldr	r0, [pc, #84]	; (8000210 <main+0xc0>)
 80001ba:	f002 ff5d 	bl	8003078 <osThreadNew>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b14      	ldr	r3, [pc, #80]	; (8000214 <main+0xc4>)
 80001c2:	601a      	str	r2, [r3, #0]

  /* creation of btnControl */
  btnControlHandle = osThreadNew(btnControlTask, NULL, &btnControl_attributes);
 80001c4:	4a14      	ldr	r2, [pc, #80]	; (8000218 <main+0xc8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4814      	ldr	r0, [pc, #80]	; (800021c <main+0xcc>)
 80001ca:	f002 ff55 	bl	8003078 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <main+0xd0>)
 80001d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f002 ff1c 	bl	8003010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x88>
 80001da:	bf00      	nop
 80001dc:	08006444 	.word	0x08006444
 80001e0:	08000541 	.word	0x08000541
 80001e4:	20003654 	.word	0x20003654
 80001e8:	08006468 	.word	0x08006468
 80001ec:	08000559 	.word	0x08000559
 80001f0:	20003648 	.word	0x20003648
 80001f4:	0800648c 	.word	0x0800648c
 80001f8:	0800056d 	.word	0x0800056d
 80001fc:	2000365c 	.word	0x2000365c
 8000200:	080064b0 	.word	0x080064b0
 8000204:	080005d9 	.word	0x080005d9
 8000208:	20003548 	.word	0x20003548
 800020c:	080064d4 	.word	0x080064d4
 8000210:	080005ed 	.word	0x080005ed
 8000214:	2000354c 	.word	0x2000354c
 8000218:	080064f8 	.word	0x080064f8
 800021c:	08000601 	.word	0x08000601
 8000220:	20003650 	.word	0x20003650

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	; 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f006 f8af 	bl	8006396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000270:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fa94 	bl	80017a8 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000286:	f000 f9d9 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fcfe 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b2:	f000 f9c3 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b6:	2302      	movs	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 febc 	bl	8002040 <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ce:	f000 f9b5 	bl	800063c <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3750      	adds	r7, #80	; 0x50
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b20      	ldr	r3, [pc, #128]	; (8000370 <MX_ADC1_Init+0x94>)
 80002ee:	4a21      	ldr	r2, [pc, #132]	; (8000374 <MX_ADC1_Init+0x98>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_ADC1_Init+0x94>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_ADC1_Init+0x94>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_ADC1_Init+0x94>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_ADC1_Init+0x94>)
 8000308:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_ADC1_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_ADC1_Init+0x94>)
 8000316:	2202      	movs	r2, #2
 8000318:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <MX_ADC1_Init+0x94>)
 800031c:	f000 fbb6 	bl	8000a8c <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000326:	f000 f989 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000332:	2306      	movs	r3, #6
 8000334:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <MX_ADC1_Init+0x94>)
 800033c:	f000 fe5e 	bl	8000ffc <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f979 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800034a:	2301      	movs	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034e:	2302      	movs	r3, #2
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <MX_ADC1_Init+0x94>)
 8000358:	f000 fe50 	bl	8000ffc <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000362:	f000 f96b 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200035d8 	.word	0x200035d8
 8000374:	40012400 	.word	0x40012400

08000378 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_TIM4_Init+0x94>)
 8000396:	4a1e      	ldr	r2, [pc, #120]	; (8000410 <MX_TIM4_Init+0x98>)
 8000398:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MX_TIM4_Init+0x94>)
 800039c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_TIM4_Init+0x94>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_TIM4_Init+0x94>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_TIM4_Init+0x94>)
 80003b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_TIM4_Init+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003bc:	4813      	ldr	r0, [pc, #76]	; (800040c <MX_TIM4_Init+0x94>)
 80003be:	f001 ffb1 	bl	8002324 <HAL_TIM_Base_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80003c8:	f000 f938 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	4619      	mov	r1, r3
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <MX_TIM4_Init+0x94>)
 80003da:	f002 f94d 	bl	8002678 <HAL_TIM_ConfigClockSource>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80003e4:	f000 f92a 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003e8:	2320      	movs	r3, #32
 80003ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003f0:	463b      	mov	r3, r7
 80003f2:	4619      	mov	r1, r3
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_TIM4_Init+0x94>)
 80003f6:	f002 fb13 	bl	8002a20 <HAL_TIMEx_MasterConfigSynchronization>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000400:	f000 f91c 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20003550 	.word	0x20003550
 8000410:	40000800 	.word	0x40000800

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <MX_USART1_UART_Init+0x50>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 8000420:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_USART1_UART_Init+0x4c>)
 800044c:	f002 fb58 	bl	8002b00 <HAL_UART_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000456:	f000 f8f1 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20003608 	.word	0x20003608
 8000464:	40013800 	.word	0x40013800

08000468 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <MX_USART3_UART_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 8000474:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_USART3_UART_Init+0x4c>)
 80004a0:	f002 fb2e 	bl	8002b00 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004aa:	f000 f8c7 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20003598 	.word	0x20003598
 80004b8:	40004800 	.word	0x40004800

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_GPIO_Init+0x7c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_GPIO_Init+0x7c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <MX_GPIO_Init+0x7c>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_GPIO_Init+0x7c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : select_Pin plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = select_Pin|plus_Pin|minus_Pin;
 8000518:	23e0      	movs	r3, #224	; 0xe0
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000520:	2301      	movs	r3, #1
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0x80>)
 800052c:	f000 ffca 	bl	80014c4 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800

08000540 <sendData1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendData1Task */
void sendData1Task(void *argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	btnParameterInit();
 8000548:	f005 fad6 	bl	8005af8 <btnParameterInit>
  /* Infinite loop */
  for(;;)
  {
  transmissionDriver1();
 800054c:	f005 fcb2 	bl	8005eb4 <transmissionDriver1>
  osDelay(10);
 8000550:	200a      	movs	r0, #10
 8000552:	f002 fe3b 	bl	80031cc <osDelay>
  transmissionDriver1();
 8000556:	e7f9      	b.n	800054c <sendData1Task+0xc>

08000558 <sendData2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendData2Task */
void sendData2Task(void *argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendData2Task */
  /* Infinite loop */
  for(;;)
  {
	transmissionDriver2();
 8000560:	f005 fcc0 	bl	8005ee4 <transmissionDriver2>
	osDelay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f002 fe31 	bl	80031cc <osDelay>
	transmissionDriver2();
 800056a:	e7f9      	b.n	8000560 <sendData2Task+0x8>

0800056c <readAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAdcTask */
void readAdcTask(void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readAdcTask */
	uint16_t val1,val2;
  /* Infinite loop */
  for(;;)
  {
	readAnalog2Values(&hadc1);
 8000574:	4817      	ldr	r0, [pc, #92]	; (80005d4 <readAdcTask+0x68>)
 8000576:	f005 f9b1 	bl	80058dc <readAnalog2Values>
	val1=valuesMap(getAnalogValue1(),0,4095,0,1000);
 800057a:	f005 f9db 	bl	8005934 <getAnalogValue1>
 800057e:	4603      	mov	r3, r0
 8000580:	4618      	mov	r0, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800058e:	2100      	movs	r1, #0
 8000590:	f005 f9e4 	bl	800595c <valuesMap>
 8000594:	4603      	mov	r3, r0
 8000596:	81fb      	strh	r3, [r7, #14]
	setDriver1AngleValue(val1);
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fad8 	bl	8005b50 <setDriver1AngleValue>
	osDelay(15);
 80005a0:	200f      	movs	r0, #15
 80005a2:	f002 fe13 	bl	80031cc <osDelay>
	val2=valuesMap(getAnalogValue2(),0,4095,0,1000);
 80005a6:	f005 f9cf 	bl	8005948 <getAnalogValue2>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005ba:	2100      	movs	r1, #0
 80005bc:	f005 f9ce 	bl	800595c <valuesMap>
 80005c0:	4603      	mov	r3, r0
 80005c2:	81bb      	strh	r3, [r7, #12]
	setDriver2AngleValue(val2);
 80005c4:	89bb      	ldrh	r3, [r7, #12]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fad2 	bl	8005b70 <setDriver2AngleValue>
	osDelay(15);
 80005cc:	200f      	movs	r0, #15
 80005ce:	f002 fdfd 	bl	80031cc <osDelay>
	readAnalog2Values(&hadc1);
 80005d2:	e7cf      	b.n	8000574 <readAdcTask+0x8>
 80005d4:	200035d8 	.word	0x200035d8

080005d8 <getData1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getData1Task */
void getData1Task(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getData1Task */
  /* Infinite loop */
  for(;;)
  {
	MDI_getDataChannel1();
 80005e0:	f005 fd64 	bl	80060ac <MDI_getDataChannel1>
	osDelay(15);
 80005e4:	200f      	movs	r0, #15
 80005e6:	f002 fdf1 	bl	80031cc <osDelay>
	MDI_getDataChannel1();
 80005ea:	e7f9      	b.n	80005e0 <getData1Task+0x8>

080005ec <getData2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getData2Task */
void getData2Task(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getData2Task */
  /* Infinite loop */
  for(;;)
  {
	MDI_getDataChannel2();
 80005f4:	f005 fe30 	bl	8006258 <MDI_getDataChannel2>
	osDelay(15);
 80005f8:	200f      	movs	r0, #15
 80005fa:	f002 fde7 	bl	80031cc <osDelay>
	MDI_getDataChannel2();
 80005fe:	e7f9      	b.n	80005f4 <getData2Task+0x8>

08000600 <btnControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btnControlTask */
void btnControlTask(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btnControlTask */
	buttonController();
 8000608:	f005 fac2 	bl	8005b90 <buttonController>
  /* Infinite loop */
  for(;;)
  {
	buttonController();
 800060c:	f005 fac0 	bl	8005b90 <buttonController>
    osDelay(50);
 8000610:	2032      	movs	r0, #50	; 0x32
 8000612:	f002 fddb 	bl	80031cc <osDelay>
	buttonController();
 8000616:	e7f9      	b.n	800060c <btnControlTask+0xc>

08000618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062a:	f000 f9f1 	bl	8000a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012c00 	.word	0x40012c00

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x6>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_MspInit+0x68>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_MspInit+0x68>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_MspInit+0x68>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_MspInit+0x68>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <HAL_MspInit+0x68>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x68>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	210f      	movs	r1, #15
 800067e:	f06f 0001 	mvn.w	r0, #1
 8000682:	f000 fef4 	bl	800146e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_MspInit+0x6c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_MspInit+0x6c>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_ADC_MspInit+0x6c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d121      	bne.n	8000718 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_ADC_MspInit+0x70>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000704:	2303      	movs	r3, #3
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	2303      	movs	r3, #3
 800070a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_ADC_MspInit+0x74>)
 8000714:	f000 fed6 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40012400 	.word	0x40012400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d113      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2105      	movs	r1, #5
 800075a:	201e      	movs	r0, #30
 800075c:	f000 fe87 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000760:	201e      	movs	r0, #30
 8000762:	f000 fea0 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40000800 	.word	0x40000800
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a38      	ldr	r2, [pc, #224]	; (8000874 <HAL_UART_MspInit+0xfc>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d132      	bne.n	80007fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <HAL_UART_MspInit+0x100>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a36      	ldr	r2, [pc, #216]	; (8000878 <HAL_UART_MspInit+0x100>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <HAL_UART_MspInit+0x100>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <HAL_UART_MspInit+0x100>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a30      	ldr	r2, [pc, #192]	; (8000878 <HAL_UART_MspInit+0x100>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <HAL_UART_MspInit+0x100>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	4619      	mov	r1, r3
 80007dc:	4827      	ldr	r0, [pc, #156]	; (800087c <HAL_UART_MspInit+0x104>)
 80007de:	f000 fe71 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <HAL_UART_MspInit+0x104>)
 80007f8:	f000 fe64 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007fc:	e036      	b.n	800086c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <HAL_UART_MspInit+0x108>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d131      	bne.n	800086c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <HAL_UART_MspInit+0x100>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	4a1a      	ldr	r2, [pc, #104]	; (8000878 <HAL_UART_MspInit+0x100>)
 800080e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000812:	61d3      	str	r3, [r2, #28]
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_UART_MspInit+0x100>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_MspInit+0x100>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_UART_MspInit+0x100>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_UART_MspInit+0x100>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	4619      	mov	r1, r3
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <HAL_UART_MspInit+0x10c>)
 800084e:	f000 fe39 	bl	80014c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <HAL_UART_MspInit+0x10c>)
 8000868:	f000 fe2c 	bl	80014c4 <HAL_GPIO_Init>
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40013800 	.word	0x40013800
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800
 8000880:	40004800 	.word	0x40004800
 8000884:	40010c00 	.word	0x40010c00

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2019      	movs	r0, #25
 800089e:	f000 fde6 	bl	800146e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80008a2:	2019      	movs	r0, #25
 80008a4:	f000 fdff 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_InitTick+0x9c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_InitTick+0x9c>)
 80008ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_InitTick+0x9c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb6a 	bl	8001fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008d0:	f001 fb54 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 80008d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_InitTick+0xa0>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_InitTick+0xa4>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_InitTick+0xa8>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_InitTick+0xa4>)
 80008ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_InitTick+0xa4>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_InitTick+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_InitTick+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_InitTick+0xa4>)
 8000906:	f001 fd0d 	bl	8002324 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_InitTick+0xa4>)
 8000912:	f001 fd57 	bl	80023c4 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20003660 	.word	0x20003660
 8000930:	40012c00 	.word	0x40012c00

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM1_UP_IRQHandler+0x10>)
 8000966:	f001 fd7f 	bl	8002468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20003660 	.word	0x20003660

08000974 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <TIM4_IRQHandler+0x14>)
 800097a:	f001 fd75 	bl	8002468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  buttonCounterIncrease();
 800097e:	f005 f813 	bl	80059a8 <buttonCounterIncrease>
  /* USER CODE END TIM4_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20003550 	.word	0x20003550

0800098c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000998:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800099a:	e003      	b.n	80009a4 <LoopCopyDataInit>

0800099c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800099e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009a2:	3104      	adds	r1, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009ac:	d3f6      	bcc.n	800099c <CopyDataInit>
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009b0:	e002      	b.n	80009b8 <LoopFillZerobss>

080009b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009b4:	f842 3b04 	str.w	r3, [r2], #4

080009b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009bc:	d3f9      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009be:	f7ff ffe5 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f005 fcb9 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fbc3 	bl	8000150 <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r3, =_sidata
 80009cc:	0800653c 	.word	0x0800653c
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d4:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80009d8:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80009dc:	20003728 	.word	0x20003728

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_Init+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_Init+0x28>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 fd2f 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ff44 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fe20 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200036a8 	.word	0x200036a8

08000a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	200036a8 	.word	0x200036a8

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff fff0 	bl	8000a34 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_Delay+0x40>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffe0 	bl	8000a34 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e0be      	b.n	8000c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdf2 	bl	80006b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 fbdd 	bl	8001290 <ADC_ConversionStop_Disable>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f040 8099 	bne.w	8000c1a <HAL_ADC_Init+0x18e>
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f040 8095 	bne.w	8000c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000af8:	f023 0302 	bic.w	r3, r3, #2
 8000afc:	f043 0202 	orr.w	r2, r3, #2
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7b1b      	ldrb	r3, [r3, #12]
 8000b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b24:	d003      	beq.n	8000b2e <HAL_ADC_Init+0xa2>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <HAL_ADC_Init+0xa8>
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	e000      	b.n	8000b36 <HAL_ADC_Init+0xaa>
 8000b34:	2300      	movs	r3, #0
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d119      	bne.n	8000b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7b1b      	ldrb	r3, [r3, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	035a      	lsls	r2, r3, #13
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	e00b      	b.n	8000b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	f043 0220 	orr.w	r2, r3, #32
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <HAL_ADC_Init+0x1a8>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_Init+0x126>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d104      	bne.n	8000bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	051b      	lsls	r3, r3, #20
 8000bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_ADC_Init+0x1ac>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d10b      	bne.n	8000bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f023 0303 	bic.w	r3, r3, #3
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf6:	e018      	b.n	8000c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f023 0312 	bic.w	r3, r3, #18
 8000c00:	f043 0210 	orr.w	r2, r3, #16
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	f043 0201 	orr.w	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c18:	e007      	b.n	8000c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f043 0210 	orr.w	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	ffe1f7fd 	.word	0xffe1f7fd
 8000c38:	ff1f0efe 	.word	0xff1f0efe

08000c3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ADC_Start+0x1a>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e098      	b.n	8000d88 <HAL_ADC_Start+0x14c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fac4 	bl	80011ec <ADC_Enable>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8087 	bne.w	8000d7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d105      	bne.n	8000c9a <HAL_ADC_Start+0x5e>
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d115      	bne.n	8000cc6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d026      	beq.n	8000d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cc4:	e01d      	b.n	8000d02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d004      	beq.n	8000ce6 <HAL_ADC_Start+0xaa>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10d      	bne.n	8000d02 <HAL_ADC_Start+0xc6>
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	f023 0206 	bic.w	r2, r3, #6
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f06f 0202 	mvn.w	r2, #2
 8000d32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d42:	d113      	bne.n	8000d6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d105      	bne.n	8000d5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d108      	bne.n	8000d6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	e00c      	b.n	8000d86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	e003      	b.n	8000d86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40012800 	.word	0x40012800
 8000d94:	40012400 	.word	0x40012400

08000d98 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Stop+0x1a>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e01a      	b.n	8000de8 <HAL_ADC_Stop+0x50>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fa68 	bl	8001290 <ADC_ConversionStop_Disable>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d109      	bne.n	8000dde <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e06:	f7ff fe15 	bl	8000a34 <HAL_GetTick>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	f043 0220 	orr.w	r2, r3, #32
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0c8      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d12a      	bne.n	8000e96 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d123      	bne.n	8000e96 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e4e:	e01a      	b.n	8000e86 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e56:	d016      	beq.n	8000e86 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <HAL_ADC_PollForConversion+0x7e>
 8000e5e:	f7ff fde9 	bl	8000a34 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d20b      	bcs.n	8000e86 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f043 0204 	orr.w	r2, r3, #4
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e09e      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0dd      	beq.n	8000e50 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e94:	e06c      	b.n	8000f70 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e96:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_ADC_PollForConversion+0x1dc>)
 8000e98:	681c      	ldr	r4, [r3, #0]
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f001 f986 	bl	80021ac <HAL_RCCEx_GetPeriphCLKFreq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6919      	ldr	r1, [r3, #16]
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <HAL_ADC_PollForConversion+0x1e0>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d118      	bne.n	8000ee6 <HAL_ADC_PollForConversion+0xf6>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68d9      	ldr	r1, [r3, #12]
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_ADC_PollForConversion+0x1e4>)
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d111      	bne.n	8000ee6 <HAL_ADC_PollForConversion+0xf6>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6919      	ldr	r1, [r3, #16]
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_ADC_PollForConversion+0x1e8>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d108      	bne.n	8000ee2 <HAL_ADC_PollForConversion+0xf2>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68d9      	ldr	r1, [r3, #12]
 8000ed6:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <HAL_ADC_PollForConversion+0x1ec>)
 8000ed8:	400b      	ands	r3, r1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_ADC_PollForConversion+0xf2>
 8000ede:	2314      	movs	r3, #20
 8000ee0:	e020      	b.n	8000f24 <HAL_ADC_PollForConversion+0x134>
 8000ee2:	2329      	movs	r3, #41	; 0x29
 8000ee4:	e01e      	b.n	8000f24 <HAL_ADC_PollForConversion+0x134>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6919      	ldr	r1, [r3, #16]
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_ADC_PollForConversion+0x1e8>)
 8000eee:	400b      	ands	r3, r1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d106      	bne.n	8000f02 <HAL_ADC_PollForConversion+0x112>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_ADC_PollForConversion+0x1ec>)
 8000efc:	400b      	ands	r3, r1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00d      	beq.n	8000f1e <HAL_ADC_PollForConversion+0x12e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6919      	ldr	r1, [r3, #16]
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f0>)
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d108      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x132>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68d9      	ldr	r1, [r3, #12]
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f0>)
 8000f18:	400b      	ands	r3, r1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x132>
 8000f1e:	2354      	movs	r3, #84	; 0x54
 8000f20:	e000      	b.n	8000f24 <HAL_ADC_PollForConversion+0x134>
 8000f22:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f2a:	e01d      	b.n	8000f68 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f32:	d016      	beq.n	8000f62 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x15a>
 8000f3a:	f7ff fd7b 	bl	8000a34 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d20b      	bcs.n	8000f62 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	f043 0204 	orr.w	r2, r3, #4
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e030      	b.n	8000fc4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8dd      	bhi.n	8000f2c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f06f 0212 	mvn.w	r2, #18
 8000f78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f94:	d115      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d111      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	24924924 	.word	0x24924924
 8000fd4:	00924924 	.word	0x00924924
 8000fd8:	12492492 	.word	0x12492492
 8000fdc:	00492492 	.word	0x00492492
 8000fe0:	00249249 	.word	0x00249249

08000fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_ConfigChannel+0x20>
 8001018:	2302      	movs	r3, #2
 800101a:	e0dc      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1da>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d81c      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	3b05      	subs	r3, #5
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b05      	subs	r3, #5
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
 8001064:	e03c      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d81c      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b23      	subs	r3, #35	; 0x23
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	4019      	ands	r1, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b23      	subs	r3, #35	; 0x23
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
 80010a6:	e01b      	b.n	80010e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b41      	subs	r3, #65	; 0x41
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b41      	subs	r3, #65	; 0x41
 80010d4:	fa00 f203 	lsl.w	r2, r0, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d91c      	bls.n	8001122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3b1e      	subs	r3, #30
 80010fa:	2207      	movs	r2, #7
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6898      	ldr	r0, [r3, #8]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	3b1e      	subs	r3, #30
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	e019      	b.n	8001156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6919      	ldr	r1, [r3, #16]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	fa00 f203 	lsl.w	r2, r0, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d003      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	2b11      	cmp	r3, #17
 8001164:	d132      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d125      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d126      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800118c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d11a      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9a      	lsrs	r2, r3, #18
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x1b2>
 80011ba:	e007      	b.n	80011cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40012400 	.word	0x40012400
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83

080011ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d039      	beq.n	800127e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <ADC_Enable+0x9c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <ADC_Enable+0xa0>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001228:	e002      	b.n	8001230 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001236:	f7ff fbfd 	bl	8000a34 <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800123c:	e018      	b.n	8001270 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123e:	f7ff fbf9 	bl	8000a34 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d911      	bls.n	8001270 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e007      	b.n	8001280 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d1df      	bne.n	800123e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d127      	bne.n	80012fa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fbbb 	bl	8000a34 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	e014      	b.n	80012ec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012c2:	f7ff fbb7 	bl	8000a34 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d90d      	bls.n	80012ec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e007      	b.n	80012fc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d0e3      	beq.n	80012c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff4f 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff64 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ffb2 	bl	80013f4 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff81 	bl	80013a0 <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff57 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	e127      	b.n	8001728 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d8:	2201      	movs	r2, #1
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8116 	bne.w	8001722 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d034      	beq.n	8001568 <HAL_GPIO_Init+0xa4>
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d80d      	bhi.n	800151e <HAL_GPIO_Init+0x5a>
 8001502:	2b02      	cmp	r3, #2
 8001504:	d02b      	beq.n	800155e <HAL_GPIO_Init+0x9a>
 8001506:	2b02      	cmp	r3, #2
 8001508:	d804      	bhi.n	8001514 <HAL_GPIO_Init+0x50>
 800150a:	2b00      	cmp	r3, #0
 800150c:	d031      	beq.n	8001572 <HAL_GPIO_Init+0xae>
 800150e:	2b01      	cmp	r3, #1
 8001510:	d01c      	beq.n	800154c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e048      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001514:	2b03      	cmp	r3, #3
 8001516:	d043      	beq.n	80015a0 <HAL_GPIO_Init+0xdc>
 8001518:	2b11      	cmp	r3, #17
 800151a:	d01b      	beq.n	8001554 <HAL_GPIO_Init+0x90>
          break;
 800151c:	e043      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800151e:	4a89      	ldr	r2, [pc, #548]	; (8001744 <HAL_GPIO_Init+0x280>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d026      	beq.n	8001572 <HAL_GPIO_Init+0xae>
 8001524:	4a87      	ldr	r2, [pc, #540]	; (8001744 <HAL_GPIO_Init+0x280>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d806      	bhi.n	8001538 <HAL_GPIO_Init+0x74>
 800152a:	4a87      	ldr	r2, [pc, #540]	; (8001748 <HAL_GPIO_Init+0x284>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d020      	beq.n	8001572 <HAL_GPIO_Init+0xae>
 8001530:	4a86      	ldr	r2, [pc, #536]	; (800174c <HAL_GPIO_Init+0x288>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01d      	beq.n	8001572 <HAL_GPIO_Init+0xae>
          break;
 8001536:	e036      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001538:	4a85      	ldr	r2, [pc, #532]	; (8001750 <HAL_GPIO_Init+0x28c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0xae>
 800153e:	4a85      	ldr	r2, [pc, #532]	; (8001754 <HAL_GPIO_Init+0x290>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d016      	beq.n	8001572 <HAL_GPIO_Init+0xae>
 8001544:	4a84      	ldr	r2, [pc, #528]	; (8001758 <HAL_GPIO_Init+0x294>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0xae>
          break;
 800154a:	e02c      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e028      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	3304      	adds	r3, #4
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e023      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	3308      	adds	r3, #8
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e01e      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	330c      	adds	r3, #12
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e019      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157a:	2304      	movs	r3, #4
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e012      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	611a      	str	r2, [r3, #16]
          break;
 8001592:	e008      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	615a      	str	r2, [r3, #20]
          break;
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2bff      	cmp	r3, #255	; 0xff
 80015aa:	d801      	bhi.n	80015b0 <HAL_GPIO_Init+0xec>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	e001      	b.n	80015b4 <HAL_GPIO_Init+0xf0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3304      	adds	r3, #4
 80015b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2bff      	cmp	r3, #255	; 0xff
 80015ba:	d802      	bhi.n	80015c2 <HAL_GPIO_Init+0xfe>
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x104>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	3b08      	subs	r3, #8
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	210f      	movs	r1, #15
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	401a      	ands	r2, r3
 80015da:	6a39      	ldr	r1, [r7, #32]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	431a      	orrs	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8096 	beq.w	8001722 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_GPIO_Init+0x298>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_GPIO_Init+0x298>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_GPIO_Init+0x298>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800160e:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_GPIO_Init+0x29c>)
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <HAL_GPIO_Init+0x2a0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x19e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4a      	ldr	r2, [pc, #296]	; (8001768 <HAL_GPIO_Init+0x2a4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x19a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_GPIO_Init+0x2a8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x196>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a48      	ldr	r2, [pc, #288]	; (8001770 <HAL_GPIO_Init+0x2ac>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x192>
 8001652:	2303      	movs	r3, #3
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x1a0>
 8001656:	2304      	movs	r3, #4
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x1a0>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x1a0>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x1a0>
 8001662:	2300      	movs	r3, #0
 8001664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001674:	493a      	ldr	r1, [pc, #232]	; (8001760 <HAL_GPIO_Init+0x29c>)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4938      	ldr	r1, [pc, #224]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4933      	ldr	r1, [pc, #204]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	492e      	ldr	r1, [pc, #184]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4929      	ldr	r1, [pc, #164]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4924      	ldr	r1, [pc, #144]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	491f      	ldr	r1, [pc, #124]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	491a      	ldr	r1, [pc, #104]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	60cb      	str	r3, [r1, #12]
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4915      	ldr	r1, [pc, #84]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 800171e:	4013      	ands	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f aed0 	bne.w	80014d8 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	372c      	adds	r7, #44	; 0x2c
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	10210000 	.word	0x10210000
 8001748:	10110000 	.word	0x10110000
 800174c:	10120000 	.word	0x10120000
 8001750:	10310000 	.word	0x10310000
 8001754:	10320000 	.word	0x10320000
 8001758:	10220000 	.word	0x10220000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e26c      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d00c      	beq.n	80017ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d4:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d112      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
 80017e0:	4b8c      	ldr	r3, [pc, #560]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ee:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d06c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x12c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d168      	bne.n	80018d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e246      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x76>
 8001810:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a7f      	ldr	r2, [pc, #508]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x98>
 8001826:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b78      	ldr	r3, [pc, #480]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a77      	ldr	r2, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0xbc>
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a71      	ldr	r2, [pc, #452]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xd4>
 8001864:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6a      	ldr	r2, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a67      	ldr	r2, [pc, #412]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f8d6 	bl	8000a34 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff f8d2 	bl	8000a34 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1fa      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xe4>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f8c2 	bl	8000a34 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f8be 	bl	8000a34 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1e6      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x10c>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d063      	beq.n	80019aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d11c      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e1ba      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4939      	ldr	r1, [pc, #228]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	e03a      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x270>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f877 	bl	8000a34 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f873 	bl	8000a34 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e19b      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4927      	ldr	r1, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_RCC_OscConfig+0x270>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f856 	bl	8000a34 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff f852 	bl	8000a34 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e17a      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03a      	beq.n	8001a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff f836 	bl	8000a34 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f832 	bl	8000a34 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e15a      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fb0a 	bl	8002004 <RCC_Delay>
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_OscConfig+0x274>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f81c 	bl	8000a34 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fe:	e00f      	b.n	8001a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff f818 	bl	8000a34 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d908      	bls.n	8001a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e140      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	42420000 	.word	0x42420000
 8001a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b9e      	ldr	r3, [pc, #632]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e9      	bne.n	8001a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a6 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	4b8b      	ldr	r3, [pc, #556]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a8a      	ldr	r2, [pc, #552]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe ffd9 	bl	8000a34 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7fe ffd5 	bl	8000a34 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0fd      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x312>
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x334>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x356>
 8001ae4:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a69      	ldr	r2, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x36e>
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7fe ff89 	bl	8000a34 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7fe ff85 	bl	8000a34 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0ab      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x37e>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7fe ff73 	bl	8000a34 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe ff6f 	bl	8000a34 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e095      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8081 	beq.w	8001c92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d061      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d146      	bne.n	8001c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7fe ff43 	bl	8000a34 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe ff3f 	bl	8000a34 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e067      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bda:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	492d      	ldr	r1, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a19      	ldr	r1, [r3, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe ff13 	bl	8000a34 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7fe ff0f 	bl	8000a34 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e037      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46a>
 8001c30:	e02f      	b.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_RCC_OscConfig+0x4fc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe fefc 	bl	8000a34 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe fef8 	bl	8000a34 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e020      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x498>
 8001c5e:	e018      	b.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e013      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42420060 	.word	0x42420060

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d910      	bls.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4965      	ldr	r1, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e073      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4936      	ldr	r1, [pc, #216]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7fe fe4c 	bl	8000a34 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe fe48 	bl	8000a34 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e053      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4922      	ldr	r1, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1cc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fd16 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	0800651c 	.word	0x0800651c
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b490      	push	{r4, r7}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e84:	1d3c      	adds	r4, r7, #4
 8001e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8001eba:	e02d      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	e02d      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ed4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c5b      	lsrs	r3, r3, #17
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eee:	4413      	add	r3, r2
 8001ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ef4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001efa:	fb02 f203 	mul.w	r2, r2, r3
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e004      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	623b      	str	r3, [r7, #32]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc90      	pop	{r4, r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	08006404 	.word	0x08006404
 8001f30:	08006414 	.word	0x08006414
 8001f34:	40021000 	.word	0x40021000
 8001f38:	007a1200 	.word	0x007a1200
 8001f3c:	003d0900 	.word	0x003d0900

08001f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f58:	f7ff fff2 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	0800652c 	.word	0x0800652c

08001f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f84:	4601      	mov	r1, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0adb      	lsrs	r3, r3, #11
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	0800652c 	.word	0x0800652c

08001fa4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_GetClockConfig+0x58>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCC_GetClockConfig+0x58>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_GetClockConfig+0x58>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_RCC_GetClockConfig+0x58>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0207 	and.w	r2, r3, #7
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <RCC_Delay+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <RCC_Delay+0x38>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002020:	bf00      	nop
  }
  while (Delay --);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <RCC_Delay+0x1c>
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d07d      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002060:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10d      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002076:	61d3      	str	r3, [r2, #28]
 8002078:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002084:	2301      	movs	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d118      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fcc8 	bl	8000a34 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	e008      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a8:	f7fe fcc4 	bl	8000a34 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e06d      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d02e      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d027      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020fa:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d014      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fc93 	bl	8000a34 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fc8f 	bl	8000a34 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e036      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ee      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4917      	ldr	r1, [pc, #92]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	4313      	orrs	r3, r2
 8002144:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	490b      	ldr	r1, [pc, #44]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4904      	ldr	r1, [pc, #16]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42420440 	.word	0x42420440

080021ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b08d      	sub	sp, #52	; 0x34
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021b6:	f107 040c 	add.w	r4, r7, #12
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d07f      	beq.n	80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d002      	beq.n	80021ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d048      	beq.n	800227a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021e8:	e08b      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d07f      	beq.n	80022fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002208:	4413      	add	r3, r2
 800220a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800220e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d018      	beq.n	800224c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0c5b      	lsrs	r3, r3, #17
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002228:	4413      	add	r3, r2
 800222a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224a:	e004      	b.n	8002256 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d102      	bne.n	800226a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002268:	e048      	b.n	80022fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002278:	e040      	b.n	80022fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228a:	d108      	bne.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	e01f      	b.n	80022de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	d109      	bne.n	80022be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80022b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80022bc:	e00f      	b.n	80022de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022c8:	d11a      	bne.n	8002300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80022d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022dc:	e010      	b.n	8002300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80022de:	e00f      	b.n	8002300 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022e0:	f7ff fe4c 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0b9b      	lsrs	r3, r3, #14
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002300:	bf00      	nop
    }
  }
  return (frequency);
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002304:	4618      	mov	r0, r3
 8002306:	3734      	adds	r7, #52	; 0x34
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	08006418 	.word	0x08006418
 8002310:	08006428 	.word	0x08006428
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	003d0900 	.word	0x003d0900
 8002320:	aaaaaaab 	.word	0xaaaaaaab

08002324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f9ee 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 fa64 	bl	8002830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e03a      	b.n	8002452 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_TIM_Base_Start_IT+0x98>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x58>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d009      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x58>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <HAL_TIM_Base_Start_IT+0x9c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x58>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <HAL_TIM_Base_Start_IT+0xa0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d111      	bne.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d010      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	e007      	b.n	8002450 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40000400 	.word	0x40000400
 8002464:	40000800 	.word	0x40000800

08002468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b02      	cmp	r3, #2
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0202 	mvn.w	r2, #2
 8002494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f9a4 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f997 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f9a6 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0204 	mvn.w	r2, #4
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f97a 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f96d 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f97c 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b08      	cmp	r3, #8
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b08      	cmp	r3, #8
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0208 	mvn.w	r2, #8
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2204      	movs	r2, #4
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f950 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f943 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f952 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b10      	cmp	r3, #16
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0210 	mvn.w	r2, #16
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2208      	movs	r2, #8
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f926 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f919 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f928 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0201 	mvn.w	r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f816 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d10e      	bne.n	8002618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d107      	bne.n	8002618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa6b 	bl	8002aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d107      	bne.n	8002644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8ec 	bl	800281c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b20      	cmp	r3, #32
 8002650:	d10e      	bne.n	8002670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b20      	cmp	r3, #32
 800265e:	d107      	bne.n	8002670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0220 	mvn.w	r2, #32
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa36 	bl	8002adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x18>
 800268c:	2302      	movs	r3, #2
 800268e:	e0a6      	b.n	80027de <HAL_TIM_ConfigClockSource+0x166>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d067      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0x120>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d80b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x6c>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d073      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d802      	bhi.n	80026da <HAL_TIM_ConfigClockSource+0x62>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d06f      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026d8:	e078      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d06c      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026de:	2b30      	cmp	r3, #48	; 0x30
 80026e0:	d06a      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026e2:	e073      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d00d      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x8c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d804      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x7e>
 80026ec:	2b50      	cmp	r3, #80	; 0x50
 80026ee:	d033      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0xe0>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d041      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026f4:	e06a      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d066      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x152>
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d017      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002702:	e063      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 f965 	bl	80029e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002726:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
      break;
 8002730:	e04c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f000 f94e 	bl	80029e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002754:	609a      	str	r2, [r3, #8]
      break;
 8002756:	e039      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f000 f8c5 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2150      	movs	r1, #80	; 0x50
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f91c 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 8002776:	e029      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	461a      	mov	r2, r3
 8002786:	f000 f8e3 	bl	8002950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2160      	movs	r1, #96	; 0x60
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f90c 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 8002796:	e019      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f000 f8a5 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f8fc 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 80027b6:	e009      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 f8f3 	bl	80029ae <TIM_ITRx_SetConfig>
        break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
	...

08002830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <TIM_Base_SetConfig+0xb8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <TIM_Base_SetConfig+0x30>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d007      	beq.n	8002860 <TIM_Base_SetConfig+0x30>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a26      	ldr	r2, [pc, #152]	; (80028ec <TIM_Base_SetConfig+0xbc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_Base_SetConfig+0x30>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <TIM_Base_SetConfig+0xc0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <TIM_Base_SetConfig+0xb8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <TIM_Base_SetConfig+0x62>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d007      	beq.n	8002892 <TIM_Base_SetConfig+0x62>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <TIM_Base_SetConfig+0xbc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_Base_SetConfig+0x62>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <TIM_Base_SetConfig+0xc0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d108      	bne.n	80028a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <TIM_Base_SetConfig+0xb8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	615a      	str	r2, [r3, #20]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 030a 	bic.w	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	621a      	str	r2, [r3, #32]
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 0210 	bic.w	r2, r3, #16
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800297a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	031b      	lsls	r3, r3, #12
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800298c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f043 0307 	orr.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b087      	sub	sp, #28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e046      	b.n	8002ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d009      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10c      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800

08002adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e03f      	b.n	8002b92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fe26 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f9a3 	bl	8002e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b08a      	sub	sp, #40	; 0x28
 8002b9e:	af02      	add	r7, sp, #8
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d17c      	bne.n	8002cb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_UART_Transmit+0x2c>
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e075      	b.n	8002cb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Transmit+0x3e>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e06e      	b.n	8002cb6 <HAL_UART_Transmit+0x11c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2221      	movs	r2, #33	; 0x21
 8002bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bee:	f7fd ff21 	bl	8000a34 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	88fa      	ldrh	r2, [r7, #6]
 8002bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	d108      	bne.n	8002c1c <HAL_UART_Transmit+0x82>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e003      	b.n	8002c24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c2c:	e02a      	b.n	8002c84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f8df 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e036      	b.n	8002cb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10b      	bne.n	8002c66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3302      	adds	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e007      	b.n	8002c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3301      	adds	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1cf      	bne.n	8002c2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f8af 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 8089 	bne.w	8002df2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Receive+0x2e>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e081      	b.n	8002df4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Receive+0x40>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e07a      	b.n	8002df4 <HAL_UART_Receive+0x136>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2222      	movs	r2, #34	; 0x22
 8002d10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d14:	f7fd fe8e 	bl	8000a34 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2e:	d108      	bne.n	8002d42 <HAL_UART_Receive+0x84>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e003      	b.n	8002d4a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d52:	e043      	b.n	8002ddc <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2120      	movs	r1, #32
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f84c 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e042      	b.n	8002df4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10c      	bne.n	8002d8e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e01f      	b.n	8002dce <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	d007      	beq.n	8002da8 <HAL_UART_Receive+0xea>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_UART_Receive+0xf8>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e008      	b.n	8002dc8 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1b6      	bne.n	8002d54 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	e02c      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d028      	beq.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e1c:	f7fd fe0a 	bl	8000a34 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d21d      	bcs.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e00f      	b.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d0c3      	beq.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eca:	f023 030c 	bic.w	r3, r3, #12
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <UART_SetConfig+0x114>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff f840 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	e002      	b.n	8002f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff f828 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8002f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	0119      	lsls	r1, r3, #4
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2064      	movs	r0, #100	; 0x64
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	4419      	add	r1, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f76:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2064      	movs	r0, #100	; 0x64
 8002f7e:	fb00 f303 	mul.w	r3, r0, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	440a      	add	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	51eb851f 	.word	0x51eb851f

08002fac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb2:	f3ef 8305 	mrs	r3, IPSR
 8002fb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc2:	607b      	str	r3, [r7, #4]
  return(result);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <osKernelInitialize+0x32>
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <osKernelInitialize+0x60>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d109      	bne.n	8002fe6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002fde:	f06f 0305 	mvn.w	r3, #5
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e00c      	b.n	8003000 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <osKernelInitialize+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <osKernelInitialize+0x60>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e002      	b.n	8003000 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	20000030 	.word	0x20000030

08003010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003016:	f3ef 8305 	mrs	r3, IPSR
 800301a:	60bb      	str	r3, [r7, #8]
  return(result);
 800301c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	607b      	str	r3, [r7, #4]
  return(result);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <osKernelStart+0x32>
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <osKernelStart+0x64>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d109      	bne.n	800304a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003036:	f3ef 8311 	mrs	r3, BASEPRI
 800303a:	603b      	str	r3, [r7, #0]
  return(result);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003042:	f06f 0305 	mvn.w	r3, #5
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e00e      	b.n	8003068 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <osKernelStart+0x64>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <osKernelStart+0x64>)
 8003054:	2202      	movs	r2, #2
 8003056:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003058:	f001 f864 	bl	8004124 <vTaskStartScheduler>
      stat = osOK;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e002      	b.n	8003068 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003066:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000030 	.word	0x20000030

08003078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b092      	sub	sp, #72	; 0x48
 800307c:	af04      	add	r7, sp, #16
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003088:	f3ef 8305 	mrs	r3, IPSR
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8094 	bne.w	80031be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003096:	f3ef 8310 	mrs	r3, PRIMASK
 800309a:	623b      	str	r3, [r7, #32]
  return(result);
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 808d 	bne.w	80031be <osThreadNew+0x146>
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <osThreadNew+0x150>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d106      	bne.n	80030ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ac:	f3ef 8311 	mrs	r3, BASEPRI
 80030b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 8082 	bne.w	80031be <osThreadNew+0x146>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d07e      	beq.n	80031be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80030c4:	2318      	movs	r3, #24
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80030c8:	2300      	movs	r3, #0
 80030ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80030cc:	f107 031b 	add.w	r3, r7, #27
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d045      	beq.n	800316a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <osThreadNew+0x74>
        name = attr->name;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <osThreadNew+0x9a>
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b38      	cmp	r3, #56	; 0x38
 8003104:	d805      	bhi.n	8003112 <osThreadNew+0x9a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <osThreadNew+0x9e>
        return (NULL);
 8003112:	2300      	movs	r3, #0
 8003114:	e054      	b.n	80031c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00e      	beq.n	800314c <osThreadNew+0xd4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b5b      	cmp	r3, #91	; 0x5b
 8003134:	d90a      	bls.n	800314c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <osThreadNew+0xd4>
        mem = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 800314a:	e010      	b.n	800316e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <osThreadNew+0xf6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <osThreadNew+0xf6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <osThreadNew+0xf6>
          mem = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
 8003168:	e001      	b.n	800316e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	2b01      	cmp	r3, #1
 8003172:	d110      	bne.n	8003196 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800317c:	9202      	str	r2, [sp, #8]
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fe02 	bl	8003d94 <xTaskCreateStatic>
 8003190:	4603      	mov	r3, r0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e013      	b.n	80031be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	d110      	bne.n	80031be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fe49 	bl	8003e46 <xTaskCreate>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <osThreadNew+0x146>
          hTask = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031be:	697b      	ldr	r3, [r7, #20]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3738      	adds	r7, #56	; 0x38
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000030 	.word	0x20000030

080031cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d4:	f3ef 8305 	mrs	r3, IPSR
 80031d8:	613b      	str	r3, [r7, #16]
  return(result);
 80031da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e0:	f3ef 8310 	mrs	r3, PRIMASK
 80031e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <osDelay+0x34>
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <osDelay+0x58>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d109      	bne.n	8003208 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031f4:	f3ef 8311 	mrs	r3, BASEPRI
 80031f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <osDelay+0x3c>
    stat = osErrorISR;
 8003200:	f06f 0305 	mvn.w	r3, #5
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e007      	b.n	8003218 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 ff52 	bl	80040bc <vTaskDelay>
    }
  }

  return (stat);
 8003218:	697b      	ldr	r3, [r7, #20]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000030 	.word	0x20000030

08003228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a06      	ldr	r2, [pc, #24]	; (8003250 <vApplicationGetIdleTaskMemory+0x28>)
 8003238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4a05      	ldr	r2, [pc, #20]	; (8003254 <vApplicationGetIdleTaskMemory+0x2c>)
 800323e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000034 	.word	0x20000034
 8003254:	20000090 	.word	0x20000090

08003258 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <vApplicationGetTimerTaskMemory+0x2c>)
 8003268:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <vApplicationGetTimerTaskMemory+0x30>)
 800326e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000290 	.word	0x20000290
 8003288:	200002ec 	.word	0x200002ec

0800328c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f103 0208 	add.w	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f103 0208 	add.w	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f103 0208 	add.w	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800333e:	d103      	bne.n	8003348 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e00c      	b.n	8003362 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3308      	adds	r3, #8
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e002      	b.n	8003356 <vListInsert+0x2e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d2f6      	bcs.n	8003350 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6892      	ldr	r2, [r2, #8]
 80033ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d103      	bne.n	80033cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1e5a      	subs	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	e7fe      	b.n	8003412 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003414:	f001 ff98 	bl	8005348 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	68f9      	ldr	r1, [r7, #12]
 8003422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	441a      	add	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	3b01      	subs	r3, #1
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	441a      	add	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01a      	beq.n	80034a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3310      	adds	r3, #16
 8003476:	4618      	mov	r0, r3
 8003478:	f001 f8d8 	bl	800462c <xTaskRemoveFromEventList>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d012      	beq.n	80034a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <xQueueGenericReset+0xcc>)
 8003484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	e009      	b.n	80034a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3310      	adds	r3, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fef7 	bl	800328c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3324      	adds	r3, #36	; 0x24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fef2 	bl	800328c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034a8:	f001 ff7c 	bl	80053a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034ac:	2301      	movs	r3, #1
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	; 0x38
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericCreateStatic+0x28>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <xQueueGenericCreateStatic+0x42>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <xQueueGenericCreateStatic+0x4e>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <xQueueGenericCreateStatic+0x52>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <xQueueGenericCreateStatic+0x54>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <xQueueGenericCreateStatic+0x6c>
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	e7fe      	b.n	8003526 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <xQueueGenericCreateStatic+0x78>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <xQueueGenericCreateStatic+0x7c>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <xQueueGenericCreateStatic+0x7e>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <xQueueGenericCreateStatic+0x96>
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e7fe      	b.n	8003550 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003552:	2350      	movs	r3, #80	; 0x50
 8003554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b50      	cmp	r3, #80	; 0x50
 800355a:	d009      	beq.n	8003570 <xQueueGenericCreateStatic+0xb4>
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e7fe      	b.n	800356e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003582:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f805 	bl	80035a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003598:	4618      	mov	r0, r3
 800359a:	3730      	adds	r7, #48	; 0x30
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035ce:	2101      	movs	r1, #1
 80035d0:	69b8      	ldr	r0, [r7, #24]
 80035d2:	f7ff ff0b 	bl	80033ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <xQueueGenericSend+0x30>
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <xQueueGenericSend+0x3e>
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <xQueueGenericSend+0x42>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueGenericSend+0x44>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <xQueueGenericSend+0x5c>
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e7fe      	b.n	8003642 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <xQueueGenericSend+0x6a>
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <xQueueGenericSend+0x6e>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericSend+0x70>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <xQueueGenericSend+0x88>
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	e7fe      	b.n	800366e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003670:	f001 f996 	bl	80049a0 <xTaskGetSchedulerState>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xQueueGenericSend+0x98>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <xQueueGenericSend+0x9c>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <xQueueGenericSend+0x9e>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <xQueueGenericSend+0xb6>
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e7fe      	b.n	800369c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800369e:	f001 fe53 	bl	8005348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <xQueueGenericSend+0xcc>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d129      	bne.n	8003708 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ba:	f000 f9ff 	bl	8003abc <prvCopyDataToQueue>
 80036be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ffad 	bl	800462c <xTaskRemoveFromEventList>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	e00a      	b.n	8003700 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003700:	f001 fe50 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 8003704:	2301      	movs	r3, #1
 8003706:	e063      	b.n	80037d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800370e:	f001 fe49 	bl	80053a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003712:	2300      	movs	r3, #0
 8003714:	e05c      	b.n	80037d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4618      	mov	r0, r3
 8003722:	f000 ffe5 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800372a:	f001 fe3b 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800372e:	f000 fd5d 	bl	80041ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003732:	f001 fe09 	bl	8005348 <vPortEnterCritical>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800373c:	b25b      	sxtb	r3, r3
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003742:	d103      	bne.n	800374c <xQueueGenericSend+0x164>
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003758:	d103      	bne.n	8003762 <xQueueGenericSend+0x17a>
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003762:	f001 fe1f 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003766:	1d3a      	adds	r2, r7, #4
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 ffd4 	bl	800471c <xTaskCheckForTimeOut>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d124      	bne.n	80037c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800377a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377c:	f000 fa96 	bl	8003cac <prvIsQueueFull>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d018      	beq.n	80037b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	3310      	adds	r3, #16
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fefe 	bl	8004590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003796:	f000 fa21 	bl	8003bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800379a:	f000 fd35 	bl	8004208 <xTaskResumeAll>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f af7c 	bne.w	800369e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <xQueueGenericSend+0x1f0>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	e772      	b.n	800369e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ba:	f000 fa0f 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037be:	f000 fd23 	bl	8004208 <xTaskResumeAll>
 80037c2:	e76c      	b.n	800369e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c6:	f000 fa09 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ca:	f000 fd1d 	bl	8004208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037ce:	2300      	movs	r3, #0
		}
	}
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3738      	adds	r7, #56	; 0x38
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	; 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <xQueueGenericSendFromISR+0x2c>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e7fe      	b.n	8003806 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <xQueueGenericSendFromISR+0x3a>
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <xQueueGenericSendFromISR+0x3e>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <xQueueGenericSendFromISR+0x40>
 800381a:	2300      	movs	r3, #0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <xQueueGenericSendFromISR+0x58>
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	e7fe      	b.n	8003832 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d103      	bne.n	8003842 <xQueueGenericSendFromISR+0x66>
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <xQueueGenericSendFromISR+0x6a>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <xQueueGenericSendFromISR+0x6c>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <xQueueGenericSendFromISR+0x84>
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e7fe      	b.n	800385e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003860:	f001 fe2c 	bl	80054bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003864:	f3ef 8211 	mrs	r2, BASEPRI
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	61ba      	str	r2, [r7, #24]
 800387a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800387c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	429a      	cmp	r2, r3
 800388a:	d302      	bcc.n	8003892 <xQueueGenericSendFromISR+0xb6>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d12c      	bne.n	80038ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a2:	f000 f90b 	bl	8003abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ae:	d112      	bne.n	80038d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 feb5 	bl	800462c <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038da:	3301      	adds	r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	b25a      	sxtb	r2, r3
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038e6:	2301      	movs	r3, #1
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038ea:	e001      	b.n	80038f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	; 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <xQueueReceive+0x2e>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	e7fe      	b.n	8003930 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <xQueueReceive+0x3c>
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <xQueueReceive+0x40>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <xQueueReceive+0x42>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <xQueueReceive+0x5a>
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e7fe      	b.n	800395c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395e:	f001 f81f 	bl	80049a0 <xTaskGetSchedulerState>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xQueueReceive+0x6a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueReceive+0x6e>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueReceive+0x70>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <xQueueReceive+0x88>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e7fe      	b.n	800398a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800398c:	f001 fcdc 	bl	8005348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a0:	f000 f8f6 	bl	8003b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	3310      	adds	r3, #16
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe37 	bl	800462c <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <xQueueReceive+0x1b4>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039d4:	f001 fce6 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e069      	b.n	8003ab0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f001 fcdf 	bl	80053a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e062      	b.n	8003ab0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fe7b 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f001 fcd1 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fbf3 	bl	80041ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f001 fc9f 	bl	8005348 <vPortEnterCritical>
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d103      	bne.n	8003a20 <xQueueReceive+0x11c>
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0x132>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a36:	f001 fcb5 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fe6a 	bl	800471c <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d123      	bne.n	8003a96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a50:	f000 f916 	bl	8003c80 <prvIsQueueEmpty>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fd94 	bl	8004590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6a:	f000 f8b7 	bl	8003bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fbcb 	bl	8004208 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d189      	bne.n	800398c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <xQueueReceive+0x1b4>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	e780      	b.n	800398c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f000 f8a6 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a90:	f000 fbba 	bl	8004208 <xTaskResumeAll>
 8003a94:	e77a      	b.n	800398c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a98:	f000 f8a0 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9c:	f000 fbb4 	bl	8004208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa2:	f000 f8ed 	bl	8003c80 <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f43f af6f 	beq.w	800398c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	; 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d14d      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ff78 	bl	80049dc <xTaskPriorityDisinherit>
 8003aec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	e043      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d119      	bne.n	8003b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6898      	ldr	r0, [r3, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f002 fc3a 	bl	8006380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d32b      	bcc.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	e026      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68d8      	ldr	r0, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	f002 fc20 	bl	8006380 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	425b      	negs	r3, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d207      	bcs.n	8003b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	425b      	negs	r3, r3
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d105      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d303      	bcc.n	8003bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f002 fbd6 	bl	8006380 <memcpy>
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f001 fbb0 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf0:	e011      	b.n	8003c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	; 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fd14 	bl	800462c <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c0a:	f000 fde7 	bl	80047dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dce9      	bgt.n	8003bf2 <prvUnlockQueue+0x16>
 8003c1e:	e000      	b.n	8003c22 <prvUnlockQueue+0x46>
					break;
 8003c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 fbbb 	bl	80053a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2e:	f001 fb8b 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	e011      	b.n	8003c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fcef 	bl	800462c <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c54:	f000 fdc2 	bl	80047dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dce9      	bgt.n	8003c3c <prvUnlockQueue+0x60>
 8003c68:	e000      	b.n	8003c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 fb96 	bl	80053a4 <vPortExitCritical>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c88:	f001 fb5e 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 fb81 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb4:	f001 fb48 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d102      	bne.n	8003cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 fb69 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e014      	b.n	8003d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cf8:	490b      	ldr	r1, [pc, #44]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <vQueueAddToRegistry+0x4c>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d0e:	e005      	b.n	8003d1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d9e7      	bls.n	8003cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200036ac 	.word	0x200036ac

08003d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d3c:	f001 fb04 	bl	8005348 <vPortEnterCritical>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d103      	bne.n	8003d56 <vQueueWaitForMessageRestricted+0x2a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d62:	d103      	bne.n	8003d6c <vQueueWaitForMessageRestricted+0x40>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d6c:	f001 fb1a 	bl	80053a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fc29 	bl	80045d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d86:	6978      	ldr	r0, [r7, #20]
 8003d88:	f7ff ff28 	bl	8003bdc <prvUnlockQueue>
	}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af04      	add	r7, sp, #16
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <xTaskCreateStatic+0x28>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	e7fe      	b.n	8003dba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <xTaskCreateStatic+0x42>
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dd6:	235c      	movs	r3, #92	; 0x5c
 8003dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8003dde:	d009      	beq.n	8003df4 <xTaskCreateStatic+0x60>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e7fe      	b.n	8003df2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <xTaskCreateStatic+0xa4>
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01b      	beq.n	8003e38 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e12:	2300      	movs	r3, #0
 8003e14:	9303      	str	r3, [sp, #12]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	9302      	str	r3, [sp, #8]
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f850 	bl	8003ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e32:	f000 f8d3 	bl	8003fdc <prvAddNewTaskToReadyList>
 8003e36:	e001      	b.n	8003e3c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08c      	sub	sp, #48	; 0x30
 8003e4a:	af04      	add	r7, sp, #16
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fb6a 	bl	8005534 <pvPortMalloc>
 8003e60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e68:	205c      	movs	r0, #92	; 0x5c
 8003e6a:	f001 fb63 	bl	8005534 <pvPortMalloc>
 8003e6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7c:	e005      	b.n	8003e8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f001 fc1a 	bl	80056b8 <vPortFree>
 8003e84:	e001      	b.n	8003e8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d017      	beq.n	8003ec0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9303      	str	r3, [sp, #12]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f80e 	bl	8003ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb4:	69f8      	ldr	r0, [r7, #28]
 8003eb6:	f000 f891 	bl	8003fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e002      	b.n	8003ec6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	21a5      	movs	r1, #165	; 0xa5
 8003eea:	f002 fa54 	bl	8006396 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <prvInitialiseNewTask+0x56>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e7fe      	b.n	8003f24 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e012      	b.n	8003f52 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	7819      	ldrb	r1, [r3, #0]
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3334      	adds	r3, #52	; 0x34
 8003f3c:	460a      	mov	r2, r1
 8003f3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d9e9      	bls.n	8003f2c <prvInitialiseNewTask+0x5c>
 8003f58:	e000      	b.n	8003f5c <prvInitialiseNewTask+0x8c>
		{
			break;
 8003f5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	2b37      	cmp	r3, #55	; 0x37
 8003f68:	d901      	bls.n	8003f6e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f6a:	2337      	movs	r3, #55	; 0x37
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f9a0 	bl	80032ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f99b 	bl	80032ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	69b8      	ldr	r0, [r7, #24]
 8003fbe:	f001 f8d7 	bl	8005170 <pxPortInitialiseStack>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fe4:	f001 f9b0 	bl	8005348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8003ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <prvAddNewTaskToReadyList+0xc4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d110      	bne.n	800402a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004008:	f000 fc0c 	bl	8004824 <prvInitialiseTaskLists>
 800400c:	e00d      	b.n	800402a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <prvAddNewTaskToReadyList+0xcc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	429a      	cmp	r2, r3
 8004022:	d802      	bhi.n	800402a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3301      	adds	r3, #1
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 8004032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <prvAddNewTaskToReadyList+0xd0>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <prvAddNewTaskToReadyList+0xd4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d903      	bls.n	8004050 <prvAddNewTaskToReadyList+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4a18      	ldr	r2, [pc, #96]	; (80040b0 <prvAddNewTaskToReadyList+0xd4>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <prvAddNewTaskToReadyList+0xd8>)
 800405e:	441a      	add	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7ff f93b 	bl	80032e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800406c:	f001 f99a 	bl	80053a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <prvAddNewTaskToReadyList+0xcc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	429a      	cmp	r2, r3
 8004084:	d207      	bcs.n	8004096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <prvAddNewTaskToReadyList+0xdc>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000bc0 	.word	0x20000bc0
 80040a4:	200006ec 	.word	0x200006ec
 80040a8:	20000bcc 	.word	0x20000bcc
 80040ac:	20000bdc 	.word	0x20000bdc
 80040b0:	20000bc8 	.word	0x20000bc8
 80040b4:	200006f0 	.word	0x200006f0
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <vTaskDelay+0x60>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <vTaskDelay+0x2e>
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	e7fe      	b.n	80040e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80040ea:	f000 f87f 	bl	80041ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fcdf 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040f6:	f000 f887 	bl	8004208 <xTaskResumeAll>
 80040fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <vTaskDelay+0x64>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000be8 	.word	0x20000be8
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	; 0x28
 8004128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004132:	463a      	mov	r2, r7
 8004134:	1d39      	adds	r1, r7, #4
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff f874 	bl	8003228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	9202      	str	r2, [sp, #8]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	460a      	mov	r2, r1
 8004152:	4920      	ldr	r1, [pc, #128]	; (80041d4 <vTaskStartScheduler+0xb0>)
 8004154:	4820      	ldr	r0, [pc, #128]	; (80041d8 <vTaskStartScheduler+0xb4>)
 8004156:	f7ff fe1d 	bl	8003d94 <xTaskCreateStatic>
 800415a:	4602      	mov	r2, r0
 800415c:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <vTaskStartScheduler+0xb8>)
 800415e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <vTaskStartScheduler+0xb8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e001      	b.n	8004172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004178:	f000 fcf0 	bl	8004b5c <xTimerCreateTimerTask>
 800417c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d115      	bne.n	80041b0 <vTaskStartScheduler+0x8c>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <vTaskStartScheduler+0xbc>)
 8004198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800419c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <vTaskStartScheduler+0xc0>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <vTaskStartScheduler+0xc4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041aa:	f001 f85d 	bl	8005268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041ae:	e00d      	b.n	80041cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b6:	d109      	bne.n	80041cc <vTaskStartScheduler+0xa8>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e7fe      	b.n	80041ca <vTaskStartScheduler+0xa6>
}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	0800642c 	.word	0x0800642c
 80041d8:	080047f5 	.word	0x080047f5
 80041dc:	20000be4 	.word	0x20000be4
 80041e0:	20000be0 	.word	0x20000be0
 80041e4:	20000bcc 	.word	0x20000bcc
 80041e8:	20000bc4 	.word	0x20000bc4

080041ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <vTaskSuspendAll+0x18>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a03      	ldr	r2, [pc, #12]	; (8004204 <vTaskSuspendAll+0x18>)
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000be8 	.word	0x20000be8

08004208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <xTaskResumeAll+0x114>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <xTaskResumeAll+0x2a>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	e7fe      	b.n	8004230 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004232:	f001 f889 	bl	8005348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <xTaskResumeAll+0x114>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a37      	ldr	r2, [pc, #220]	; (800431c <xTaskResumeAll+0x114>)
 800423e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <xTaskResumeAll+0x114>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d162      	bne.n	800430e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <xTaskResumeAll+0x118>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05e      	beq.n	800430e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004250:	e02f      	b.n	80042b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <xTaskResumeAll+0x11c>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3318      	adds	r3, #24
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f89a 	bl	8003398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff f895 	bl	8003398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <xTaskResumeAll+0x120>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d903      	bls.n	8004282 <xTaskResumeAll+0x7a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <xTaskResumeAll+0x120>)
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <xTaskResumeAll+0x124>)
 8004290:	441a      	add	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7ff f822 	bl	80032e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <xTaskResumeAll+0x128>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <xTaskResumeAll+0x12c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xTaskResumeAll+0x11c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cb      	bne.n	8004252 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042c0:	f000 fb4a 	bl	8004958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <xTaskResumeAll+0x130>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042d0:	f000 f844 	bl	800435c <xTaskIncrementTick>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <xTaskResumeAll+0x12c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f1      	bne.n	80042d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <xTaskResumeAll+0x130>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <xTaskResumeAll+0x12c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <xTaskResumeAll+0x134>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800430e:	f001 f849 	bl	80053a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000be8 	.word	0x20000be8
 8004320:	20000bc0 	.word	0x20000bc0
 8004324:	20000b80 	.word	0x20000b80
 8004328:	20000bc8 	.word	0x20000bc8
 800432c:	200006f0 	.word	0x200006f0
 8004330:	200006ec 	.word	0x200006ec
 8004334:	20000bd4 	.word	0x20000bd4
 8004338:	20000bd0 	.word	0x20000bd0
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <xTaskGetTickCount+0x18>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800434c:	687b      	ldr	r3, [r7, #4]
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000bc4 	.word	0x20000bc4

0800435c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <xTaskIncrementTick+0x150>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 808d 	bne.w	800448a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <xTaskIncrementTick+0x154>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004378:	4a4d      	ldr	r2, [pc, #308]	; (80044b0 <xTaskIncrementTick+0x154>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11f      	bne.n	80043c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <xTaskIncrementTick+0x158>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <xTaskIncrementTick+0x46>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	e7fe      	b.n	80043a0 <xTaskIncrementTick+0x44>
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <xTaskIncrementTick+0x15c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a41      	ldr	r2, [pc, #260]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <xTaskIncrementTick+0x15c>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <xTaskIncrementTick+0x160>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a3f      	ldr	r2, [pc, #252]	; (80044bc <xTaskIncrementTick+0x160>)
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	f000 faca 	bl	8004958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043c4:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <xTaskIncrementTick+0x164>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d34e      	bcc.n	800446c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ce:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <xTaskIncrementTick+0x80>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <xTaskIncrementTick+0x82>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <xTaskIncrementTick+0x164>)
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043e8:	601a      	str	r2, [r3, #0]
					break;
 80043ea:	e03f      	b.n	800446c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xTaskIncrementTick+0x158>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d203      	bcs.n	800440c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <xTaskIncrementTick+0x164>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
						break;
 800440a:	e02f      	b.n	800446c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe ffc1 	bl	8003398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3318      	adds	r3, #24
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe ffb8 	bl	8003398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <xTaskIncrementTick+0x168>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d903      	bls.n	800443c <xTaskIncrementTick+0xe0>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <xTaskIncrementTick+0x168>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <xTaskIncrementTick+0x16c>)
 800444a:	441a      	add	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe ff45 	bl	80032e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <xTaskIncrementTick+0x170>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	429a      	cmp	r2, r3
 8004464:	d3b3      	bcc.n	80043ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446a:	e7b0      	b.n	80043ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <xTaskIncrementTick+0x170>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	4915      	ldr	r1, [pc, #84]	; (80044c8 <xTaskIncrementTick+0x16c>)
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d907      	bls.n	8004494 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e004      	b.n	8004494 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <xTaskIncrementTick+0x174>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <xTaskIncrementTick+0x174>)
 8004492:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <xTaskIncrementTick+0x178>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044a0:	697b      	ldr	r3, [r7, #20]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000be8 	.word	0x20000be8
 80044b0:	20000bc4 	.word	0x20000bc4
 80044b4:	20000b78 	.word	0x20000b78
 80044b8:	20000b7c 	.word	0x20000b7c
 80044bc:	20000bd8 	.word	0x20000bd8
 80044c0:	20000be0 	.word	0x20000be0
 80044c4:	20000bc8 	.word	0x20000bc8
 80044c8:	200006f0 	.word	0x200006f0
 80044cc:	200006ec 	.word	0x200006ec
 80044d0:	20000bd0 	.word	0x20000bd0
 80044d4:	20000bd4 	.word	0x20000bd4

080044d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <vTaskSwitchContext+0xa4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044ec:	e040      	b.n	8004570 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <vTaskSwitchContext+0xac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e00f      	b.n	800451c <vTaskSwitchContext+0x44>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <vTaskSwitchContext+0x3e>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e7fe      	b.n	8004514 <vTaskSwitchContext+0x3c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b01      	subs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	491a      	ldr	r1, [pc, #104]	; (8004588 <vTaskSwitchContext+0xb0>)
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0e5      	beq.n	80044fc <vTaskSwitchContext+0x24>
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a13      	ldr	r2, [pc, #76]	; (8004588 <vTaskSwitchContext+0xb0>)
 800453c:	4413      	add	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3308      	adds	r3, #8
 8004552:	429a      	cmp	r2, r3
 8004554:	d104      	bne.n	8004560 <vTaskSwitchContext+0x88>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <vTaskSwitchContext+0xb4>)
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4a06      	ldr	r2, [pc, #24]	; (8004584 <vTaskSwitchContext+0xac>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000be8 	.word	0x20000be8
 8004580:	20000bd4 	.word	0x20000bd4
 8004584:	20000bc8 	.word	0x20000bc8
 8004588:	200006f0 	.word	0x200006f0
 800458c:	200006ec 	.word	0x200006ec

08004590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <vTaskPlaceOnEventList+0x24>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e7fe      	b.n	80045b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vTaskPlaceOnEventList+0x44>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3318      	adds	r3, #24
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fe feb3 	bl	8003328 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045c2:	2101      	movs	r1, #1
 80045c4:	6838      	ldr	r0, [r7, #0]
 80045c6:	f000 fa75 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200006ec 	.word	0x200006ec

080045d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <vTaskPlaceOnEventListRestricted+0x26>
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e7fe      	b.n	80045fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <vTaskPlaceOnEventListRestricted+0x50>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3318      	adds	r3, #24
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7fe fe6b 	bl	80032e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004616:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f000 fa4a 	bl	8004ab4 <prvAddCurrentTaskToDelayedList>
	}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200006ec 	.word	0x200006ec

0800462c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <xTaskRemoveFromEventList+0x2a>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e7fe      	b.n	8004654 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3318      	adds	r3, #24
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fe9c 	bl	8003398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <xTaskRemoveFromEventList+0xac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11d      	bne.n	80046a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fe93 	bl	8003398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <xTaskRemoveFromEventList+0xb0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <xTaskRemoveFromEventList+0x5a>
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <xTaskRemoveFromEventList+0xb0>)
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <xTaskRemoveFromEventList+0xb4>)
 8004694:	441a      	add	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe fe20 	bl	80032e2 <vListInsertEnd>
 80046a2:	e005      	b.n	80046b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4619      	mov	r1, r3
 80046aa:	480e      	ldr	r0, [pc, #56]	; (80046e4 <xTaskRemoveFromEventList+0xb8>)
 80046ac:	f7fe fe19 	bl	80032e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <xTaskRemoveFromEventList+0xbc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d905      	bls.n	80046ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <xTaskRemoveFromEventList+0xc0>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e001      	b.n	80046ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000be8 	.word	0x20000be8
 80046dc:	20000bc8 	.word	0x20000bc8
 80046e0:	200006f0 	.word	0x200006f0
 80046e4:	20000b80 	.word	0x20000b80
 80046e8:	200006ec 	.word	0x200006ec
 80046ec:	20000bd4 	.word	0x20000bd4

080046f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <vTaskInternalSetTimeOutState+0x24>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <vTaskInternalSetTimeOutState+0x28>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000bd8 	.word	0x20000bd8
 8004718:	20000bc4 	.word	0x20000bc4

0800471c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <xTaskCheckForTimeOut+0x24>
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e7fe      	b.n	800473e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <xTaskCheckForTimeOut+0x3e>
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e7fe      	b.n	8004758 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800475a:	f000 fdf5 	bl	8005348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <xTaskCheckForTimeOut+0xb8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d102      	bne.n	800477e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e023      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <xTaskCheckForTimeOut+0xbc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d007      	beq.n	800479a <xTaskCheckForTimeOut+0x7e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e015      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d20b      	bcs.n	80047bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff9d 	bl	80046f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e004      	b.n	80047c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047c6:	f000 fded 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 80047ca:	69fb      	ldr	r3, [r7, #28]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000bc4 	.word	0x20000bc4
 80047d8:	20000bd8 	.word	0x20000bd8

080047dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <vTaskMissedYield+0x14>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000bd4 	.word	0x20000bd4

080047f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047fc:	f000 f852 	bl	80048a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <prvIdleTask+0x28>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d9f9      	bls.n	80047fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <prvIdleTask+0x2c>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004818:	e7f0      	b.n	80047fc <prvIdleTask+0x8>
 800481a:	bf00      	nop
 800481c:	200006f0 	.word	0x200006f0
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	e00c      	b.n	800484a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <prvInitialiseTaskLists+0x60>)
 800483c:	4413      	add	r3, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fd24 	bl	800328c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b37      	cmp	r3, #55	; 0x37
 800484e:	d9ef      	bls.n	8004830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004850:	480d      	ldr	r0, [pc, #52]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004852:	f7fe fd1b 	bl	800328c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004856:	480d      	ldr	r0, [pc, #52]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004858:	f7fe fd18 	bl	800328c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800485c:	480c      	ldr	r0, [pc, #48]	; (8004890 <prvInitialiseTaskLists+0x6c>)
 800485e:	f7fe fd15 	bl	800328c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004862:	480c      	ldr	r0, [pc, #48]	; (8004894 <prvInitialiseTaskLists+0x70>)
 8004864:	f7fe fd12 	bl	800328c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <prvInitialiseTaskLists+0x74>)
 800486a:	f7fe fd0f 	bl	800328c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvInitialiseTaskLists+0x78>)
 8004870:	4a05      	ldr	r2, [pc, #20]	; (8004888 <prvInitialiseTaskLists+0x64>)
 8004872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <prvInitialiseTaskLists+0x7c>)
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <prvInitialiseTaskLists+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200006f0 	.word	0x200006f0
 8004888:	20000b50 	.word	0x20000b50
 800488c:	20000b64 	.word	0x20000b64
 8004890:	20000b80 	.word	0x20000b80
 8004894:	20000b94 	.word	0x20000b94
 8004898:	20000bac 	.word	0x20000bac
 800489c:	20000b78 	.word	0x20000b78
 80048a0:	20000b7c 	.word	0x20000b7c

080048a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048aa:	e019      	b.n	80048e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048ac:	f000 fd4c 	bl	8005348 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <prvCheckTasksWaitingTermination+0x4c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fd6b 	bl	8003398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <prvCheckTasksWaitingTermination+0x50>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <prvCheckTasksWaitingTermination+0x50>)
 80048ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048d6:	f000 fd65 	bl	80053a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f80e 	bl	80048fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <prvCheckTasksWaitingTermination+0x54>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e1      	bne.n	80048ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000b94 	.word	0x20000b94
 80048f4:	20000bc0 	.word	0x20000bc0
 80048f8:	20000ba8 	.word	0x20000ba8

080048fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fed0 	bl	80056b8 <vPortFree>
				vPortFree( pxTCB );
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fecd 	bl	80056b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800491e:	e017      	b.n	8004950 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004926:	2b01      	cmp	r3, #1
 8004928:	d103      	bne.n	8004932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fec4 	bl	80056b8 <vPortFree>
	}
 8004930:	e00e      	b.n	8004950 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004938:	2b02      	cmp	r3, #2
 800493a:	d009      	beq.n	8004950 <prvDeleteTCB+0x54>
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e7fe      	b.n	800494e <prvDeleteTCB+0x52>
	}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <prvResetNextTaskUnblockTime+0x40>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <prvResetNextTaskUnblockTime+0x14>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <prvResetNextTaskUnblockTime+0x16>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <prvResetNextTaskUnblockTime+0x44>)
 8004974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004978:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800497a:	e008      	b.n	800498e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <prvResetNextTaskUnblockTime+0x40>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <prvResetNextTaskUnblockTime+0x44>)
 800498c:	6013      	str	r3, [r2, #0]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	20000b78 	.word	0x20000b78
 800499c:	20000be0 	.word	0x20000be0

080049a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <xTaskGetSchedulerState+0x34>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ae:	2301      	movs	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	e008      	b.n	80049c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <xTaskGetSchedulerState+0x38>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049bc:	2302      	movs	r3, #2
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	e001      	b.n	80049c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049c6:	687b      	ldr	r3, [r7, #4]
	}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000bcc 	.word	0x20000bcc
 80049d8:	20000be8 	.word	0x20000be8

080049dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d054      	beq.n	8004a9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <xTaskPriorityDisinherit+0xcc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d009      	beq.n	8004a10 <xTaskPriorityDisinherit+0x34>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e7fe      	b.n	8004a0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xTaskPriorityDisinherit+0x50>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	e7fe      	b.n	8004a2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d02c      	beq.n	8004a9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d128      	bne.n	8004a9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fca2 	bl	8003398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <xTaskPriorityDisinherit+0xd0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d903      	bls.n	8004a7c <xTaskPriorityDisinherit+0xa0>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <xTaskPriorityDisinherit+0xd0>)
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <xTaskPriorityDisinherit+0xd4>)
 8004a8a:	441a      	add	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f7fe fc25 	bl	80032e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a9c:	697b      	ldr	r3, [r7, #20]
	}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200006ec 	.word	0x200006ec
 8004aac:	20000bc8 	.word	0x20000bc8
 8004ab0:	200006f0 	.word	0x200006f0

08004ab4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fc64 	bl	8003398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad6:	d10a      	bne.n	8004aee <prvAddCurrentTaskToDelayedList+0x3a>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4819      	ldr	r0, [pc, #100]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ae8:	f7fe fbfb 	bl	80032e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aec:	e026      	b.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d209      	bcs.n	8004b1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fe fc08 	bl	8003328 <vListInsert>
}
 8004b18:	e010      	b.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe fbfe 	bl	8003328 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d202      	bcs.n	8004b3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000bc4 	.word	0x20000bc4
 8004b48:	200006ec 	.word	0x200006ec
 8004b4c:	20000bac 	.word	0x20000bac
 8004b50:	20000b7c 	.word	0x20000b7c
 8004b54:	20000b78 	.word	0x20000b78
 8004b58:	20000be0 	.word	0x20000be0

08004b5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b66:	f000 fac3 	bl	80050f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b6a:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <xTimerCreateTimerTask+0x80>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d021      	beq.n	8004bb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b7a:	1d3a      	adds	r2, r7, #4
 8004b7c:	f107 0108 	add.w	r1, r7, #8
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fb67 	bl	8003258 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	2302      	movs	r3, #2
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	4910      	ldr	r1, [pc, #64]	; (8004be0 <xTimerCreateTimerTask+0x84>)
 8004b9e:	4811      	ldr	r0, [pc, #68]	; (8004be4 <xTimerCreateTimerTask+0x88>)
 8004ba0:	f7ff f8f8 	bl	8003d94 <xTaskCreateStatic>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <xTimerCreateTimerTask+0x8c>)
 8004ba8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <xTimerCreateTimerTask+0x8c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <xTimerCreateTimerTask+0x74>
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e7fe      	b.n	8004bce <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000c1c 	.word	0x20000c1c
 8004be0:	08006434 	.word	0x08006434
 8004be4:	08004d05 	.word	0x08004d05
 8004be8:	20000c20 	.word	0x20000c20

08004bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <xTimerGenericCommand+0x2c>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	e7fe      	b.n	8004c16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02a      	beq.n	8004c76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	dc18      	bgt.n	8004c64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c32:	f7ff feb5 	bl	80049a0 <xTaskGetSchedulerState>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d109      	bne.n	8004c50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	f107 0110 	add.w	r1, r7, #16
 8004c44:	2300      	movs	r3, #0
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	f7fe fcce 	bl	80035e8 <xQueueGenericSend>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004c4e:	e012      	b.n	8004c76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	f107 0110 	add.w	r1, r7, #16
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f7fe fcc4 	bl	80035e8 <xQueueGenericSend>
 8004c60:	6278      	str	r0, [r7, #36]	; 0x24
 8004c62:	e008      	b.n	8004c76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <xTimerGenericCommand+0x94>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f107 0110 	add.w	r1, r7, #16
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	f7fe fdb4 	bl	80037dc <xQueueGenericSendFromISR>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000c1c 	.word	0x20000c1c

08004c84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <prvProcessExpiredTimer+0x7c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fb7b 	bl	8003398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d121      	bne.n	8004cee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	18d1      	adds	r1, r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f000 f8c8 	bl	8004e4c <prvInsertTimerInActiveList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f7ff ff8d 	bl	8004bec <xTimerGenericCommand>
 8004cd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <prvProcessExpiredTimer+0x6a>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e7fe      	b.n	8004cec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	4798      	blx	r3
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000c14 	.word	0x20000c14

08004d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f857 	bl	8004dc4 <prvGetNextExpireTime>
 8004d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f803 	bl	8004d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d22:	f000 f8d5 	bl	8004ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d26:	e7f1      	b.n	8004d0c <prvTimerTask+0x8>

08004d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d32:	f7ff fa5b 	bl	80041ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f866 	bl	8004e0c <prvSampleTimeNow>
 8004d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d130      	bne.n	8004daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <prvProcessTimerOrBlockTask+0x3c>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d806      	bhi.n	8004d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d56:	f7ff fa57 	bl	8004208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff91 	bl	8004c84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d62:	e024      	b.n	8004dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <prvProcessTimerOrBlockTask+0x90>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <prvProcessTimerOrBlockTask+0x94>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f7fe ffcf 	bl	8003d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d8e:	f7ff fa3b 	bl	8004208 <xTaskResumeAll>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <prvProcessTimerOrBlockTask+0x98>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
}
 8004da8:	e001      	b.n	8004dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004daa:	f7ff fa2d 	bl	8004208 <xTaskResumeAll>
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000c18 	.word	0x20000c18
 8004dbc:	20000c1c 	.word	0x20000c1c
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <prvGetNextExpireTime+0x44>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <prvGetNextExpireTime+0x44>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e001      	b.n	8004dfa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000c14 	.word	0x20000c14

08004e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e14:	f7ff fa94 	bl	8004340 <xTaskGetTickCount>
 8004e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvSampleTimeNow+0x3c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d205      	bcs.n	8004e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e24:	f000 f904 	bl	8005030 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e36:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <prvSampleTimeNow+0x3c>)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000c24 	.word	0x20000c24

08004e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d812      	bhi.n	8004e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e01b      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <prvInsertTimerInActiveList+0x7c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fa49 	bl	8003328 <vListInsert>
 8004e96:	e012      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d206      	bcs.n	8004eae <prvInsertTimerInActiveList+0x62>
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e007      	b.n	8004ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <prvInsertTimerInActiveList+0x80>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe fa35 	bl	8003328 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ebe:	697b      	ldr	r3, [r7, #20]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000c18 	.word	0x20000c18
 8004ecc:	20000c14 	.word	0x20000c14

08004ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08e      	sub	sp, #56	; 0x38
 8004ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ed6:	e099      	b.n	800500c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da17      	bge.n	8004f0e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <prvProcessReceivedCommands+0x2e>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e7fe      	b.n	8004efc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	6850      	ldr	r0, [r2, #4]
 8004f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db7a      	blt.n	800500a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fe fa37 	bl	8003398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff6d 	bl	8004e0c <prvSampleTimeNow>
 8004f32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d868      	bhi.n	800500c <prvProcessReceivedCommands+0x13c>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <prvProcessReceivedCommands+0x70>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	0800500d 	.word	0x0800500d
 8004f50:	08004fc3 	.word	0x08004fc3
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004f69 	.word	0x08004f69
 8004f60:	0800500d 	.word	0x0800500d
 8004f64:	08004fc3 	.word	0x08004fc3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	18d1      	adds	r1, r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f7ff ff69 	bl	8004e4c <prvInsertTimerInActiveList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d045      	beq.n	800500c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d13d      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	441a      	add	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f7ff fe23 	bl	8004bec <xTimerGenericCommand>
 8004fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d12e      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e7fe      	b.n	8004fc0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <prvProcessReceivedCommands+0x114>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e7fe      	b.n	8004fe2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	18d1      	adds	r1, r2, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff2:	f7ff ff2b 	bl	8004e4c <prvInsertTimerInActiveList>
					break;
 8004ff6:	e009      	b.n	800500c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005004:	f000 fb58 	bl	80056b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005008:	e000      	b.n	800500c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800500a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <prvProcessReceivedCommands+0x15c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1d39      	adds	r1, r7, #4
 8005012:	2200      	movs	r2, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fc75 	bl	8003904 <xQueueReceive>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f af5b 	bne.w	8004ed8 <prvProcessReceivedCommands+0x8>
	}
}
 8005022:	bf00      	nop
 8005024:	3730      	adds	r7, #48	; 0x30
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000c1c 	.word	0x20000c1c

08005030 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005036:	e044      	b.n	80050c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe f9a1 	bl	8003398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d12d      	bne.n	80050c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d90e      	bls.n	8005096 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe f94a 	bl	8003328 <vListInsert>
 8005094:	e015      	b.n	80050c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	2100      	movs	r1, #0
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fda3 	bl	8004bec <xTimerGenericCommand>
 80050a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <prvSwitchTimerLists+0x92>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e7fe      	b.n	80050c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1b5      	bne.n	8005038 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <prvSwitchTimerLists+0xbc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <prvSwitchTimerLists+0xb8>)
 80050d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050da:	4a04      	ldr	r2, [pc, #16]	; (80050ec <prvSwitchTimerLists+0xbc>)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	6013      	str	r3, [r2, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000c14 	.word	0x20000c14
 80050ec:	20000c18 	.word	0x20000c18

080050f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050f6:	f000 f927 	bl	8005348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d120      	bne.n	8005144 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005102:	4814      	ldr	r0, [pc, #80]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005104:	f7fe f8c2 	bl	800328c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005108:	4813      	ldr	r0, [pc, #76]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 800510a:	f7fe f8bf 	bl	800328c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <prvCheckForValidListAndQueue+0x6c>)
 8005110:	4a10      	ldr	r2, [pc, #64]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005112:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <prvCheckForValidListAndQueue+0x70>)
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <prvCheckForValidListAndQueue+0x74>)
 8005120:	4a11      	ldr	r2, [pc, #68]	; (8005168 <prvCheckForValidListAndQueue+0x78>)
 8005122:	2110      	movs	r1, #16
 8005124:	200a      	movs	r0, #10
 8005126:	f7fe f9c9 	bl	80034bc <xQueueGenericCreateStatic>
 800512a:	4602      	mov	r2, r0
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800512e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	490b      	ldr	r1, [pc, #44]	; (800516c <prvCheckForValidListAndQueue+0x7c>)
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fdcc 	bl	8003cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005144:	f000 f92e 	bl	80053a4 <vPortExitCritical>
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000c1c 	.word	0x20000c1c
 8005154:	20000bec 	.word	0x20000bec
 8005158:	20000c00 	.word	0x20000c00
 800515c:	20000c14 	.word	0x20000c14
 8005160:	20000c18 	.word	0x20000c18
 8005164:	20000cc8 	.word	0x20000cc8
 8005168:	20000c28 	.word	0x20000c28
 800516c:	0800643c 	.word	0x0800643c

08005170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b04      	subs	r3, #4
 8005180:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <pxPortInitialiseStack+0x54>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b14      	subs	r3, #20
 80051aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b20      	subs	r3, #32
 80051b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	080051c9 	.word	0x080051c9

080051c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <prvTaskExitError+0x4c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d009      	beq.n	80051f0 <prvTaskExitError+0x28>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e7fe      	b.n	80051ee <prvTaskExitError+0x26>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005202:	bf00      	nop
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0fc      	beq.n	8005204 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	2000000c 	.word	0x2000000c
	...

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	f04e 0e0d 	orr.w	lr, lr, #13
 800523e:	4770      	bx	lr

08005240 <pxCurrentTCBConst2>:
 8005240:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005248:	4806      	ldr	r0, [pc, #24]	; (8005264 <prvPortStartFirstTask+0x1c>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	b662      	cpsie	i
 8005254:	b661      	cpsie	f
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	df00      	svc	0
 8005260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005262:	bf00      	nop
 8005264:	e000ed08 	.word	0xe000ed08

08005268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <xPortStartScheduler+0xcc>)
 8005270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b29      	ldr	r3, [pc, #164]	; (8005338 <xPortStartScheduler+0xd0>)
 8005294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <xPortStartScheduler+0xd4>)
 8005298:	2207      	movs	r2, #7
 800529a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529c:	e009      	b.n	80052b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800529e:	4b27      	ldr	r3, [pc, #156]	; (800533c <xPortStartScheduler+0xd4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4a25      	ldr	r2, [pc, #148]	; (800533c <xPortStartScheduler+0xd4>)
 80052a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d0ef      	beq.n	800529e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052be:	4b1f      	ldr	r3, [pc, #124]	; (800533c <xPortStartScheduler+0xd4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1c3 0307 	rsb	r3, r3, #7
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d009      	beq.n	80052de <xPortStartScheduler+0x76>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	e7fe      	b.n	80052dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <xPortStartScheduler+0xd4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <xPortStartScheduler+0xd4>)
 80052e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <xPortStartScheduler+0xd4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f0:	4a12      	ldr	r2, [pc, #72]	; (800533c <xPortStartScheduler+0xd4>)
 80052f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xPortStartScheduler+0xd8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <xPortStartScheduler+0xd8>)
 8005302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005308:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <xPortStartScheduler+0xd8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <xPortStartScheduler+0xd8>)
 800530e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005314:	f000 f8b0 	bl	8005478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <xPortStartScheduler+0xdc>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800531e:	f7ff ff93 	bl	8005248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005322:	f7ff f8d9 	bl	80044d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005326:	f7ff ff4f 	bl	80051c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	e000e400 	.word	0xe000e400
 8005338:	20000d18 	.word	0x20000d18
 800533c:	20000d1c 	.word	0x20000d1c
 8005340:	e000ed20 	.word	0xe000ed20
 8005344:	2000000c 	.word	0x2000000c

08005348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <vPortEnterCritical+0x54>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a0d      	ldr	r2, [pc, #52]	; (800539c <vPortEnterCritical+0x54>)
 8005368:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <vPortEnterCritical+0x54>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10e      	bne.n	8005390 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <vPortEnterCritical+0x58>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <vPortEnterCritical+0x48>
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	e7fe      	b.n	800538e <vPortEnterCritical+0x46>
	}
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	2000000c 	.word	0x2000000c
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <vPortExitCritical+0x48>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <vPortExitCritical+0x22>
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	e7fe      	b.n	80053c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <vPortExitCritical+0x48>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a07      	ldr	r2, [pc, #28]	; (80053ec <vPortExitCritical+0x48>)
 80053ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <vPortExitCritical+0x48>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <vPortExitCritical+0x3e>
 80053d8:	2300      	movs	r3, #0
 80053da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	2000000c 	.word	0x2000000c

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005400:	6010      	str	r0, [r2, #0]
 8005402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005406:	f04f 0050 	mov.w	r0, #80	; 0x50
 800540a:	f380 8811 	msr	BASEPRI, r0
 800540e:	f7ff f863 	bl	80044d8 <vTaskSwitchContext>
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005426:	f380 8809 	msr	PSP, r0
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	4770      	bx	lr

08005430 <pxCurrentTCBConst>:
 8005430:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005450:	f7fe ff84 	bl	800435c <xTaskIncrementTick>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <SysTick_Handler+0x3c>)
 800545c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	2300      	movs	r3, #0
 8005464:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <vPortSetupTimerInterrupt+0x30>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <vPortSetupTimerInterrupt+0x34>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <vPortSetupTimerInterrupt+0x38>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <vPortSetupTimerInterrupt+0x3c>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <vPortSetupTimerInterrupt+0x40>)
 8005496:	3b01      	subs	r3, #1
 8005498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <vPortSetupTimerInterrupt+0x30>)
 800549c:	2207      	movs	r2, #7
 800549e:	601a      	str	r2, [r3, #0]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	e000e010 	.word	0xe000e010
 80054ac:	e000e018 	.word	0xe000e018
 80054b0:	20000000 	.word	0x20000000
 80054b4:	10624dd3 	.word	0x10624dd3
 80054b8:	e000e014 	.word	0xe000e014

080054bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054c2:	f3ef 8305 	mrs	r3, IPSR
 80054c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d913      	bls.n	80054f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <vPortValidateInterruptPriority+0x68>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <vPortValidateInterruptPriority+0x6c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	7afa      	ldrb	r2, [r7, #11]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d209      	bcs.n	80054f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e7fe      	b.n	80054f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <vPortValidateInterruptPriority+0x70>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <vPortValidateInterruptPriority+0x74>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d909      	bls.n	800551a <vPortValidateInterruptPriority+0x5e>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	e7fe      	b.n	8005518 <vPortValidateInterruptPriority+0x5c>
	}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	e000e3f0 	.word	0xe000e3f0
 8005528:	20000d18 	.word	0x20000d18
 800552c:	e000ed0c 	.word	0xe000ed0c
 8005530:	20000d1c 	.word	0x20000d1c

08005534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005540:	f7fe fe54 	bl	80041ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005544:	4b57      	ldr	r3, [pc, #348]	; (80056a4 <pvPortMalloc+0x170>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800554c:	f000 f90c 	bl	8005768 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005550:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <pvPortMalloc+0x174>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 808c 	bne.w	8005676 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01c      	beq.n	800559e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005564:	2208      	movs	r2, #8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	3308      	adds	r3, #8
 800557e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <pvPortMalloc+0x6a>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e7fe      	b.n	800559c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d068      	beq.n	8005676 <pvPortMalloc+0x142>
 80055a4:	4b41      	ldr	r3, [pc, #260]	; (80056ac <pvPortMalloc+0x178>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d863      	bhi.n	8005676 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055ae:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <pvPortMalloc+0x17c>)
 80055b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055b2:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <pvPortMalloc+0x17c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055b8:	e004      	b.n	80055c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d903      	bls.n	80055d6 <pvPortMalloc+0xa2>
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f1      	bne.n	80055ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055d6:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <pvPortMalloc+0x170>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	d04a      	beq.n	8005676 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2208      	movs	r2, #8
 80055e6:	4413      	add	r3, r2
 80055e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	2308      	movs	r3, #8
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	429a      	cmp	r2, r3
 8005600:	d91e      	bls.n	8005640 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <pvPortMalloc+0xf4>
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e7fe      	b.n	8005626 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800563a:	69b8      	ldr	r0, [r7, #24]
 800563c:	f000 f8f6 	bl	800582c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005640:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <pvPortMalloc+0x178>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <pvPortMalloc+0x178>)
 800564c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800564e:	4b17      	ldr	r3, [pc, #92]	; (80056ac <pvPortMalloc+0x178>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <pvPortMalloc+0x180>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d203      	bcs.n	8005662 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <pvPortMalloc+0x178>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <pvPortMalloc+0x180>)
 8005660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <pvPortMalloc+0x174>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	431a      	orrs	r2, r3
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005676:	f7fe fdc7 	bl	8004208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <pvPortMalloc+0x164>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e7fe      	b.n	8005696 <pvPortMalloc+0x162>
	return pvReturn;
 8005698:	69fb      	ldr	r3, [r7, #28]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20003528 	.word	0x20003528
 80056a8:	20003534 	.word	0x20003534
 80056ac:	2000352c 	.word	0x2000352c
 80056b0:	20003520 	.word	0x20003520
 80056b4:	20003530 	.word	0x20003530

080056b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d046      	beq.n	8005758 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ca:	2308      	movs	r3, #8
 80056cc:	425b      	negs	r3, r3
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b20      	ldr	r3, [pc, #128]	; (8005760 <vPortFree+0xa8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <vPortFree+0x42>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e7fe      	b.n	80056f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <vPortFree+0x5e>
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	e7fe      	b.n	8005714 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <vPortFree+0xa8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d019      	beq.n	8005758 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <vPortFree+0xa8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800573c:	f7fe fd56 	bl	80041ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <vPortFree+0xac>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4413      	add	r3, r2
 800574a:	4a06      	ldr	r2, [pc, #24]	; (8005764 <vPortFree+0xac>)
 800574c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800574e:	6938      	ldr	r0, [r7, #16]
 8005750:	f000 f86c 	bl	800582c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005754:	f7fe fd58 	bl	8004208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005758:	bf00      	nop
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20003534 	.word	0x20003534
 8005764:	2000352c 	.word	0x2000352c

08005768 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800576e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005772:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <prvHeapInit+0xac>)
 8005776:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3307      	adds	r3, #7
 8005786:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <prvHeapInit+0xac>)
 8005798:	4413      	add	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057a0:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <prvHeapInit+0xb0>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <prvHeapInit+0xb0>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057b4:	2208      	movs	r2, #8
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0307 	bic.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <prvHeapInit+0xb4>)
 80057c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <prvHeapInit+0xb4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <prvHeapInit+0xb4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <prvHeapInit+0xb4>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <prvHeapInit+0xb8>)
 80057f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <prvHeapInit+0xbc>)
 80057fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <prvHeapInit+0xc0>)
 8005802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000d20 	.word	0x20000d20
 8005818:	20003520 	.word	0x20003520
 800581c:	20003528 	.word	0x20003528
 8005820:	20003530 	.word	0x20003530
 8005824:	2000352c 	.word	0x2000352c
 8005828:	20003534 	.word	0x20003534

0800582c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005834:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e002      	b.n	8005840 <prvInsertBlockIntoFreeList+0x14>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d8f7      	bhi.n	800583a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d108      	bne.n	800586e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	441a      	add	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d118      	bne.n	80058b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <prvInsertBlockIntoFreeList+0xac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d00d      	beq.n	80058aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e008      	b.n	80058bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <prvInsertBlockIntoFreeList+0xac>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e003      	b.n	80058bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d002      	beq.n	80058ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	20003520 	.word	0x20003520
 80058d8:	20003528 	.word	0x20003528

080058dc <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc){
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	  HAL_Delay(100);
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	f7fb f8af 	bl	8000a48 <HAL_Delay>
	  HAL_ADC_Start(adc);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fb f9a6 	bl	8000c3c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc, ADCTIMEOUT);
 80058f0:	2164      	movs	r1, #100	; 0x64
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fb fa7c 	bl	8000df0 <HAL_ADC_PollForConversion>
	  analogValue1 = HAL_ADC_GetValue(adc);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fb fb73 	bl	8000fe4 <HAL_ADC_GetValue>
 80058fe:	4603      	mov	r3, r0
 8005900:	b29a      	uxth	r2, r3
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <readAnalog2Values+0x50>)
 8005904:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(adc, ADCTIMEOUT);
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb fa71 	bl	8000df0 <HAL_ADC_PollForConversion>
	  analogValue2 = HAL_ADC_GetValue(adc);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb fb68 	bl	8000fe4 <HAL_ADC_GetValue>
 8005914:	4603      	mov	r3, r0
 8005916:	b29a      	uxth	r2, r3
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <readAnalog2Values+0x54>)
 800591a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fa3b 	bl	8000d98 <HAL_ADC_Stop>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200036ee 	.word	0x200036ee
 8005930:	200036ec 	.word	0x200036ec

08005934 <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <getAnalogValue1+0x10>)
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	200036ee 	.word	0x200036ee

08005948 <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <getAnalogValue2+0x10>)
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr
 8005958:	200036ec 	.word	0x200036ec

0800595c <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 800595c:	b490      	push	{r4, r7}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4623      	mov	r3, r4
 800596c:	80fb      	strh	r3, [r7, #6]
 800596e:	4603      	mov	r3, r0
 8005970:	80bb      	strh	r3, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	807b      	strh	r3, [r7, #2]
 8005976:	4613      	mov	r3, r2
 8005978:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	88bb      	ldrh	r3, [r7, #4]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	8a39      	ldrh	r1, [r7, #16]
 8005982:	883a      	ldrh	r2, [r7, #0]
 8005984:	1a8a      	subs	r2, r1, r2
 8005986:	fb02 f203 	mul.w	r2, r2, r3
 800598a:	8879      	ldrh	r1, [r7, #2]
 800598c:	88bb      	ldrh	r3, [r7, #4]
 800598e:	1acb      	subs	r3, r1, r3
 8005990:	fb92 f3f3 	sdiv	r3, r2, r3
 8005994:	b29a      	uxth	r2, r3
 8005996:	883b      	ldrh	r3, [r7, #0]
 8005998:	4413      	add	r3, r2
 800599a:	b29b      	uxth	r3, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc90      	pop	{r4, r7}
 80059a4:	4770      	bx	lr
	...

080059a8 <buttonCounterIncrease>:
mD_interface drv1,drv2;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 80059ac:	2120      	movs	r1, #32
 80059ae:	4815      	ldr	r0, [pc, #84]	; (8005a04 <buttonCounterIncrease+0x5c>)
 80059b0:	f7fb fee2 	bl	8001778 <HAL_GPIO_ReadPin>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <buttonCounterIncrease+0x20>
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <buttonCounterIncrease+0x60>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <buttonCounterIncrease+0x60>)
 80059c4:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 80059c6:	e01a      	b.n	80059fe <buttonCounterIncrease+0x56>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	480e      	ldr	r0, [pc, #56]	; (8005a04 <buttonCounterIncrease+0x5c>)
 80059cc:	f7fb fed4 	bl	8001778 <HAL_GPIO_ReadPin>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <buttonCounterIncrease+0x3c>
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <buttonCounterIncrease+0x64>)
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <buttonCounterIncrease+0x64>)
 80059e0:	801a      	strh	r2, [r3, #0]
}
 80059e2:	e00c      	b.n	80059fe <buttonCounterIncrease+0x56>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	4807      	ldr	r0, [pc, #28]	; (8005a04 <buttonCounterIncrease+0x5c>)
 80059e8:	f7fb fec6 	bl	8001778 <HAL_GPIO_ReadPin>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <buttonCounterIncrease+0x56>
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <buttonCounterIncrease+0x68>)
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <buttonCounterIncrease+0x68>)
 80059fc:	801a      	strh	r2, [r3, #0]
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40010800 	.word	0x40010800
 8005a08:	20003538 	.word	0x20003538
 8005a0c:	2000353a 	.word	0x2000353a
 8005a10:	2000353c 	.word	0x2000353c

08005a14 <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8005a18:	2120      	movs	r1, #32
 8005a1a:	480f      	ldr	r0, [pc, #60]	; (8005a58 <selectButton_Listenner_For_MenuControl+0x44>)
 8005a1c:	f7fb feac 	bl	8001778 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d015      	beq.n	8005a52 <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <selectButton_Listenner_For_MenuControl+0x48>)
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a2e:	d304      	bcc.n	8005a3a <selectButton_Listenner_For_MenuControl+0x26>
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <selectButton_Listenner_For_MenuControl+0x48>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	2302      	movs	r3, #2
 8005a38:	e00c      	b.n	8005a54 <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <selectButton_Listenner_For_MenuControl+0x48>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2b09      	cmp	r3, #9
 8005a40:	d904      	bls.n	8005a4c <selectButton_Listenner_For_MenuControl+0x38>
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <selectButton_Listenner_For_MenuControl+0x48>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e003      	b.n	8005a54 <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <selectButton_Listenner_For_MenuControl+0x48>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40010800 	.word	0x40010800
 8005a5c:	20003538 	.word	0x20003538

08005a60 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8005a64:	2140      	movs	r1, #64	; 0x40
 8005a66:	480f      	ldr	r0, [pc, #60]	; (8005aa4 <plusButton_Listenner_For_MenuControl+0x44>)
 8005a68:	f7fb fe86 	bl	8001778 <HAL_GPIO_ReadPin>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d015      	beq.n	8005a9e <plusButton_Listenner_For_MenuControl+0x3e>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <plusButton_Listenner_For_MenuControl+0x48>)
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a7a:	d304      	bcc.n	8005a86 <plusButton_Listenner_For_MenuControl+0x26>
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <plusButton_Listenner_For_MenuControl+0x48>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	2302      	movs	r3, #2
 8005a84:	e00c      	b.n	8005aa0 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8005a86:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <plusButton_Listenner_For_MenuControl+0x48>)
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d904      	bls.n	8005a98 <plusButton_Listenner_For_MenuControl+0x38>
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <plusButton_Listenner_For_MenuControl+0x48>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	2301      	movs	r3, #1
 8005a96:	e003      	b.n	8005aa0 <plusButton_Listenner_For_MenuControl+0x40>
		plusbtncounter=0;
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <plusButton_Listenner_For_MenuControl+0x48>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40010800 	.word	0x40010800
 8005aa8:	2000353a 	.word	0x2000353a

08005aac <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	480f      	ldr	r0, [pc, #60]	; (8005af0 <minusButton_Listenner_For_MenuControl+0x44>)
 8005ab4:	f7fb fe60 	bl	8001778 <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d015      	beq.n	8005aea <minusButton_Listenner_For_MenuControl+0x3e>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <minusButton_Listenner_For_MenuControl+0x48>)
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ac6:	d304      	bcc.n	8005ad2 <minusButton_Listenner_For_MenuControl+0x26>
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <minusButton_Listenner_For_MenuControl+0x48>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e00c      	b.n	8005aec <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <minusButton_Listenner_For_MenuControl+0x48>)
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d904      	bls.n	8005ae4 <minusButton_Listenner_For_MenuControl+0x38>
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <minusButton_Listenner_For_MenuControl+0x48>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e003      	b.n	8005aec <minusButton_Listenner_For_MenuControl+0x40>
		minusbtncounter=0;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <minusButton_Listenner_For_MenuControl+0x48>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010800 	.word	0x40010800
 8005af4:	2000353c 	.word	0x2000353c

08005af8 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8005afc:	4811      	ldr	r0, [pc, #68]	; (8005b44 <btnParameterInit+0x4c>)
 8005afe:	f7fc fc61 	bl	80023c4 <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <btnParameterInit+0x50>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <btnParameterInit+0x50>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <btnParameterInit+0x50>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <btnParameterInit+0x50>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <btnParameterInit+0x50>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <btnParameterInit+0x54>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=0;
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <btnParameterInit+0x54>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=0;
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <btnParameterInit+0x54>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=0;
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <btnParameterInit+0x54>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	709a      	strb	r2, [r3, #2]
	drv2.factor=0;
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <btnParameterInit+0x54>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	70da      	strb	r2, [r3, #3]
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20003550 	.word	0x20003550
 8005b48:	200036f0 	.word	0x200036f0
 8005b4c:	200036f8 	.word	0x200036f8

08005b50 <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8005b5a:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <setDriver1AngleValue+0x1c>)
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	8093      	strh	r3, [r2, #4]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	200036f0 	.word	0x200036f0

08005b70 <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8005b7a:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <setDriver2AngleValue+0x1c>)
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	8093      	strh	r3, [r2, #4]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200036f8 	.word	0x200036f8

08005b90 <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8005b94:	4b9a      	ldr	r3, [pc, #616]	; (8005e00 <buttonController+0x270>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80ac 	beq.w	8005cf6 <buttonController+0x166>
		if(2==selectBtnListenner){ selectedMDI=false; item=0;}
 8005b9e:	4b99      	ldr	r3, [pc, #612]	; (8005e04 <buttonController+0x274>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d105      	bne.n	8005bb2 <buttonController+0x22>
 8005ba6:	4b96      	ldr	r3, [pc, #600]	; (8005e00 <buttonController+0x270>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	4b96      	ldr	r3, [pc, #600]	; (8005e08 <buttonController+0x278>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8005bb2:	4b94      	ldr	r3, [pc, #592]	; (8005e04 <buttonController+0x274>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d110      	bne.n	8005bdc <buttonController+0x4c>
			if(item<ITEM_MAX)item++;
 8005bba:	4b93      	ldr	r3, [pc, #588]	; (8005e08 <buttonController+0x278>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	dc05      	bgt.n	8005bce <buttonController+0x3e>
 8005bc2:	4b91      	ldr	r3, [pc, #580]	; (8005e08 <buttonController+0x278>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a8f      	ldr	r2, [pc, #572]	; (8005e08 <buttonController+0x278>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e006      	b.n	8005bdc <buttonController+0x4c>
			else if(item==ITEM_MAX)item=0;
 8005bce:	4b8e      	ldr	r3, [pc, #568]	; (8005e08 <buttonController+0x278>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d102      	bne.n	8005bdc <buttonController+0x4c>
 8005bd6:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <buttonController+0x278>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
		}
		if(1==plusBtnListenner){
 8005bdc:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <buttonController+0x27c>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d142      	bne.n	8005c6a <buttonController+0xda>
			switch(item){
 8005be4:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <buttonController+0x278>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d83e      	bhi.n	8005c6a <buttonController+0xda>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <buttonController+0x64>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c1b 	.word	0x08005c1b
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005c47 	.word	0x08005c47
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8005c04:	4b82      	ldr	r3, [pc, #520]	; (8005e10 <buttonController+0x280>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2bff      	cmp	r3, #255	; 0xff
 8005c0a:	d027      	beq.n	8005c5c <buttonController+0xcc>
 8005c0c:	4b80      	ldr	r3, [pc, #512]	; (8005e10 <buttonController+0x280>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b7e      	ldr	r3, [pc, #504]	; (8005e10 <buttonController+0x280>)
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e020      	b.n	8005c5c <buttonController+0xcc>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8005c1a:	4b7d      	ldr	r3, [pc, #500]	; (8005e10 <buttonController+0x280>)
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2bff      	cmp	r3, #255	; 0xff
 8005c20:	d01e      	beq.n	8005c60 <buttonController+0xd0>
 8005c22:	4b7b      	ldr	r3, [pc, #492]	; (8005e10 <buttonController+0x280>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b79      	ldr	r3, [pc, #484]	; (8005e10 <buttonController+0x280>)
 8005c2c:	705a      	strb	r2, [r3, #1]
 8005c2e:	e017      	b.n	8005c60 <buttonController+0xd0>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8005c30:	4b77      	ldr	r3, [pc, #476]	; (8005e10 <buttonController+0x280>)
 8005c32:	789b      	ldrb	r3, [r3, #2]
 8005c34:	2bff      	cmp	r3, #255	; 0xff
 8005c36:	d015      	beq.n	8005c64 <buttonController+0xd4>
 8005c38:	4b75      	ldr	r3, [pc, #468]	; (8005e10 <buttonController+0x280>)
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b73      	ldr	r3, [pc, #460]	; (8005e10 <buttonController+0x280>)
 8005c42:	709a      	strb	r2, [r3, #2]
 8005c44:	e00e      	b.n	8005c64 <buttonController+0xd4>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8005c46:	4b72      	ldr	r3, [pc, #456]	; (8005e10 <buttonController+0x280>)
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	2bff      	cmp	r3, #255	; 0xff
 8005c4c:	d00c      	beq.n	8005c68 <buttonController+0xd8>
 8005c4e:	4b70      	ldr	r3, [pc, #448]	; (8005e10 <buttonController+0x280>)
 8005c50:	78db      	ldrb	r3, [r3, #3]
 8005c52:	3301      	adds	r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4b6e      	ldr	r3, [pc, #440]	; (8005e10 <buttonController+0x280>)
 8005c58:	70da      	strb	r2, [r3, #3]
 8005c5a:	e005      	b.n	8005c68 <buttonController+0xd8>
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8005c5c:	bf00      	nop
 8005c5e:	e004      	b.n	8005c6a <buttonController+0xda>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8005c60:	bf00      	nop
 8005c62:	e002      	b.n	8005c6a <buttonController+0xda>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <buttonController+0xda>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8005c68:	bf00      	nop
			}
		}
		if(1==minusBtnListenner){
 8005c6a:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <buttonController+0x284>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	f040 8104 	bne.w	8005e7c <buttonController+0x2ec>
			switch(item){
 8005c74:	4b64      	ldr	r3, [pc, #400]	; (8005e08 <buttonController+0x278>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	f200 80ff 	bhi.w	8005e7c <buttonController+0x2ec>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <buttonController+0xf4>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cdd 	.word	0x08005cdd
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8005c94:	4b5e      	ldr	r3, [pc, #376]	; (8005e10 <buttonController+0x280>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80e0 	beq.w	8005e5e <buttonController+0x2ce>
 8005c9e:	4b5c      	ldr	r3, [pc, #368]	; (8005e10 <buttonController+0x280>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	4b5a      	ldr	r3, [pc, #360]	; (8005e10 <buttonController+0x280>)
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e0d8      	b.n	8005e5e <buttonController+0x2ce>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8005cac:	4b58      	ldr	r3, [pc, #352]	; (8005e10 <buttonController+0x280>)
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80d6 	beq.w	8005e62 <buttonController+0x2d2>
 8005cb6:	4b56      	ldr	r3, [pc, #344]	; (8005e10 <buttonController+0x280>)
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	4b54      	ldr	r3, [pc, #336]	; (8005e10 <buttonController+0x280>)
 8005cc0:	705a      	strb	r2, [r3, #1]
 8005cc2:	e0ce      	b.n	8005e62 <buttonController+0x2d2>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8005cc4:	4b52      	ldr	r3, [pc, #328]	; (8005e10 <buttonController+0x280>)
 8005cc6:	789b      	ldrb	r3, [r3, #2]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80cc 	beq.w	8005e66 <buttonController+0x2d6>
 8005cce:	4b50      	ldr	r3, [pc, #320]	; (8005e10 <buttonController+0x280>)
 8005cd0:	789b      	ldrb	r3, [r3, #2]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <buttonController+0x280>)
 8005cd8:	709a      	strb	r2, [r3, #2]
 8005cda:	e0c4      	b.n	8005e66 <buttonController+0x2d6>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <buttonController+0x280>)
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80c2 	beq.w	8005e6a <buttonController+0x2da>
 8005ce6:	4b4a      	ldr	r3, [pc, #296]	; (8005e10 <buttonController+0x280>)
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4b48      	ldr	r3, [pc, #288]	; (8005e10 <buttonController+0x280>)
 8005cf0:	70da      	strb	r2, [r3, #3]
 8005cf2:	bf00      	nop
 8005cf4:	e0b9      	b.n	8005e6a <buttonController+0x2da>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; item=0;}
 8005cf6:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <buttonController+0x274>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d105      	bne.n	8005d0a <buttonController+0x17a>
 8005cfe:	4b40      	ldr	r3, [pc, #256]	; (8005e00 <buttonController+0x270>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <buttonController+0x278>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8005d0a:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <buttonController+0x274>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d110      	bne.n	8005d34 <buttonController+0x1a4>
			if(item<ITEM_MAX)item++;
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <buttonController+0x278>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	dc05      	bgt.n	8005d26 <buttonController+0x196>
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <buttonController+0x278>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	4a39      	ldr	r2, [pc, #228]	; (8005e08 <buttonController+0x278>)
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e006      	b.n	8005d34 <buttonController+0x1a4>
			else if(item==ITEM_MAX)item=0;
 8005d26:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <buttonController+0x278>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d102      	bne.n	8005d34 <buttonController+0x1a4>
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <buttonController+0x278>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
		}
		if(1==plusBtnListenner){
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <buttonController+0x27c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d142      	bne.n	8005dc2 <buttonController+0x232>
			switch(item){
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <buttonController+0x278>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d83e      	bhi.n	8005dc2 <buttonController+0x232>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <buttonController+0x1bc>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d73 	.word	0x08005d73
 8005d54:	08005d89 	.word	0x08005d89
 8005d58:	08005d9f 	.word	0x08005d9f
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <buttonController+0x288>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d027      	beq.n	8005db4 <buttonController+0x224>
 8005d64:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <buttonController+0x288>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <buttonController+0x288>)
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e020      	b.n	8005db4 <buttonController+0x224>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8005d72:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <buttonController+0x288>)
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2bff      	cmp	r3, #255	; 0xff
 8005d78:	d01e      	beq.n	8005db8 <buttonController+0x228>
 8005d7a:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <buttonController+0x288>)
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <buttonController+0x288>)
 8005d84:	705a      	strb	r2, [r3, #1]
 8005d86:	e017      	b.n	8005db8 <buttonController+0x228>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8005d88:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <buttonController+0x288>)
 8005d8a:	789b      	ldrb	r3, [r3, #2]
 8005d8c:	2bff      	cmp	r3, #255	; 0xff
 8005d8e:	d015      	beq.n	8005dbc <buttonController+0x22c>
 8005d90:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <buttonController+0x288>)
 8005d92:	789b      	ldrb	r3, [r3, #2]
 8005d94:	3301      	adds	r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <buttonController+0x288>)
 8005d9a:	709a      	strb	r2, [r3, #2]
 8005d9c:	e00e      	b.n	8005dbc <buttonController+0x22c>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <buttonController+0x288>)
 8005da0:	78db      	ldrb	r3, [r3, #3]
 8005da2:	2bff      	cmp	r3, #255	; 0xff
 8005da4:	d00c      	beq.n	8005dc0 <buttonController+0x230>
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <buttonController+0x288>)
 8005da8:	78db      	ldrb	r3, [r3, #3]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <buttonController+0x288>)
 8005db0:	70da      	strb	r2, [r3, #3]
 8005db2:	e005      	b.n	8005dc0 <buttonController+0x230>
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8005db4:	bf00      	nop
 8005db6:	e004      	b.n	8005dc2 <buttonController+0x232>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <buttonController+0x232>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <buttonController+0x232>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8005dc0:	bf00      	nop
			}
		}
		if(1==minusBtnListenner){
 8005dc2:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <buttonController+0x284>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d158      	bne.n	8005e7c <buttonController+0x2ec>
			switch(item){
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <buttonController+0x278>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d854      	bhi.n	8005e7c <buttonController+0x2ec>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <buttonController+0x248>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e33 	.word	0x08005e33
 8005de4:	08005e49 	.word	0x08005e49
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <buttonController+0x288>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d03e      	beq.n	8005e6e <buttonController+0x2de>
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <buttonController+0x288>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <buttonController+0x288>)
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e037      	b.n	8005e6e <buttonController+0x2de>
 8005dfe:	bf00      	nop
 8005e00:	20000010 	.word	0x20000010
 8005e04:	2000353e 	.word	0x2000353e
 8005e08:	20003540 	.word	0x20003540
 8005e0c:	20003544 	.word	0x20003544
 8005e10:	200036f0 	.word	0x200036f0
 8005e14:	20003545 	.word	0x20003545
 8005e18:	200036f8 	.word	0x200036f8
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8005e1c:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <buttonController+0x314>)
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d026      	beq.n	8005e72 <buttonController+0x2e2>
 8005e24:	4b1f      	ldr	r3, [pc, #124]	; (8005ea4 <buttonController+0x314>)
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <buttonController+0x314>)
 8005e2e:	705a      	strb	r2, [r3, #1]
 8005e30:	e01f      	b.n	8005e72 <buttonController+0x2e2>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <buttonController+0x314>)
 8005e34:	789b      	ldrb	r3, [r3, #2]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01d      	beq.n	8005e76 <buttonController+0x2e6>
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <buttonController+0x314>)
 8005e3c:	789b      	ldrb	r3, [r3, #2]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <buttonController+0x314>)
 8005e44:	709a      	strb	r2, [r3, #2]
 8005e46:	e016      	b.n	8005e76 <buttonController+0x2e6>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <buttonController+0x314>)
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d014      	beq.n	8005e7a <buttonController+0x2ea>
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <buttonController+0x314>)
 8005e52:	78db      	ldrb	r3, [r3, #3]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <buttonController+0x314>)
 8005e5a:	70da      	strb	r2, [r3, #3]
 8005e5c:	e00d      	b.n	8005e7a <buttonController+0x2ea>
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8005e5e:	bf00      	nop
 8005e60:	e00c      	b.n	8005e7c <buttonController+0x2ec>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <buttonController+0x2ec>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <buttonController+0x2ec>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <buttonController+0x2ec>
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <buttonController+0x2ec>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <buttonController+0x2ec>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <buttonController+0x2ec>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8005e7a:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 8005e7c:	f7ff fdca 	bl	8005a14 <selectButton_Listenner_For_MenuControl>
 8005e80:	4603      	mov	r3, r0
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <buttonController+0x318>)
 8005e86:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 8005e88:	f7ff fdea 	bl	8005a60 <plusButton_Listenner_For_MenuControl>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <buttonController+0x31c>)
 8005e92:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 8005e94:	f7ff fe0a 	bl	8005aac <minusButton_Listenner_For_MenuControl>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <buttonController+0x320>)
 8005e9e:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	200036f8 	.word	0x200036f8
 8005ea8:	2000353e 	.word	0x2000353e
 8005eac:	20003544 	.word	0x20003544
 8005eb0:	20003545 	.word	0x20003545

08005eb4 <transmissionDriver1>:
void transmissionDriver1(void){
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1(drv1.angle,drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor);
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <transmissionDriver1+0x2c>)
 8005ebc:	8898      	ldrh	r0, [r3, #4]
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <transmissionDriver1+0x2c>)
 8005ec0:	7819      	ldrb	r1, [r3, #0]
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <transmissionDriver1+0x2c>)
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <transmissionDriver1+0x2c>)
 8005ec8:	789c      	ldrb	r4, [r3, #2]
 8005eca:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <transmissionDriver1+0x2c>)
 8005ecc:	78db      	ldrb	r3, [r3, #3]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	f000 f87b 	bl	8005fcc <MDI_sendDataChannel1>
}
 8005ed6:	bf00      	nop
 8005ed8:	3704      	adds	r7, #4
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200036f0 	.word	0x200036f0

08005ee4 <transmissionDriver2>:
void transmissionDriver2(void){
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2(drv2.angle,drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <transmissionDriver2+0x2c>)
 8005eec:	8898      	ldrh	r0, [r3, #4]
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <transmissionDriver2+0x2c>)
 8005ef0:	7819      	ldrb	r1, [r3, #0]
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <transmissionDriver2+0x2c>)
 8005ef4:	785a      	ldrb	r2, [r3, #1]
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <transmissionDriver2+0x2c>)
 8005ef8:	789c      	ldrb	r4, [r3, #2]
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <transmissionDriver2+0x2c>)
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4623      	mov	r3, r4
 8005f02:	f000 f941 	bl	8006188 <MDI_sendDataChannel2>
}
 8005f06:	bf00      	nop
 8005f08:	3704      	adds	r7, #4
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd90      	pop	{r4, r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200036f8 	.word	0x200036f8

08005f14 <MDI_writeCommand>:
 * @brief Write command to Motor Driver
 * @param uartChannel -> get uart channel
 * @param cmd -> command to write
 * @return none
 */
static void MDI_writeCommand(UART_HandleTypeDef *uartChannel,uint8_t cmd){
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*) &cmd,sizeof(cmd),TIMEOUTVAL);
 8005f20:	1cf9      	adds	r1, r7, #3
 8005f22:	2305      	movs	r3, #5
 8005f24:	2201      	movs	r2, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fc fe37 	bl	8002b9a <HAL_UART_Transmit>
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel,uint8_t data){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*)&data,sizeof(data),TIMEOUTVAL);
 8005f40:	1cf9      	adds	r1, r7, #3
 8005f42:	2305      	movs	r3, #5
 8005f44:	2201      	movs	r2, #1
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fc fe27 	bl	8002b9a <HAL_UART_Transmit>
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <MDI_writeBigData>:
 * @param uartChannel -> get uart channel
 * @param buff -> get data array
 * @param buff_size -> get data array size
 * @return none
 */
static void MDI_writeBigData(UART_HandleTypeDef *uartChannel,uint8_t *buff, size_t buff_size){
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
	while (buff_size > 0) {
 8005f60:	e014      	b.n	8005f8c <MDI_writeBigData+0x38>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf28      	it	cs
 8005f6c:	4613      	movcs	r3, r2
 8005f6e:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(uartChannel, buff, chunk_size, TIMEOUTVAL);
 8005f70:	8afa      	ldrh	r2, [r7, #22]
 8005f72:	2305      	movs	r3, #5
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fc fe0f 	bl	8002b9a <HAL_UART_Transmit>
		buff += chunk_size;
 8005f7c:	8afb      	ldrh	r3, [r7, #22]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
		buff_size -= chunk_size;
 8005f84:	8afb      	ldrh	r3, [r7, #22]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	607b      	str	r3, [r7, #4]
	while (buff_size > 0) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e7      	bne.n	8005f62 <MDI_writeBigData+0xe>
	}
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <MDI_2byteWriteData>:
 * @brief Write  2 byte data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> get 2 byte data
 * @return none
 */
void MDI_2byteWriteData(UART_HandleTypeDef *uartChannel,uint16_t data){
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	807b      	strh	r3, [r7, #2]
	uint8_t arrTmp[] = {data >> 8, data & 0xFF};
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	733b      	strb	r3, [r7, #12]
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	737b      	strb	r3, [r7, #13]
	MDI_writeBigData(uartChannel,arrTmp,sizeof(arrTmp));
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	2202      	movs	r2, #2
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ffc8 	bl	8005f54 <MDI_writeBigData>

}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <MDI_sendDataChannel1>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	80fb      	strh	r3, [r7, #6]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	717b      	strb	r3, [r7, #5]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	713b      	strb	r3, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel1,0xFF);
 8005fee:	21ff      	movs	r1, #255	; 0xff
 8005ff0:	482d      	ldr	r0, [pc, #180]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8005ff2:	f7ff ff8f 	bl	8005f14 <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel1,0xFF); //Data transmission started
 8005ff6:	21ff      	movs	r1, #255	; 0xff
 8005ff8:	482b      	ldr	r0, [pc, #172]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8005ffa:	f7ff ff8b 	bl	8005f14 <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel1,angleVal);
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	4619      	mov	r1, r3
 8006002:	4829      	ldr	r0, [pc, #164]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8006004:	f7ff ffc9 	bl	8005f9a <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	b29b      	uxth	r3, r3
 800600e:	b2db      	uxtb	r3, r3
 8006010:	723b      	strb	r3, [r7, #8]
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8006018:	7a3b      	ldrb	r3, [r7, #8]
 800601a:	b29a      	uxth	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	4413      	add	r3, r2
 8006020:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8006022:	7a7b      	ldrb	r3, [r7, #9]
 8006024:	b29a      	uxth	r2, r3
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	4413      	add	r3, r2
 800602a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kd); checksumTmp+=kd; //writed kd
 800602c:	797b      	ldrb	r3, [r7, #5]
 800602e:	4619      	mov	r1, r3
 8006030:	481d      	ldr	r0, [pc, #116]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8006032:	f7ff ff7f 	bl	8005f34 <MDI_writeSmallData>
 8006036:	797b      	ldrb	r3, [r7, #5]
 8006038:	b29a      	uxth	r2, r3
 800603a:	89fb      	ldrh	r3, [r7, #14]
 800603c:	4413      	add	r3, r2
 800603e:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,ki); checksumTmp+=ki; //writed ki
 8006040:	793b      	ldrb	r3, [r7, #4]
 8006042:	4619      	mov	r1, r3
 8006044:	4818      	ldr	r0, [pc, #96]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8006046:	f7ff ff75 	bl	8005f34 <MDI_writeSmallData>
 800604a:	793b      	ldrb	r3, [r7, #4]
 800604c:	b29a      	uxth	r2, r3
 800604e:	89fb      	ldrh	r3, [r7, #14]
 8006050:	4413      	add	r3, r2
 8006052:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kp); checksumTmp+=kp; //writed kp
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	4619      	mov	r1, r3
 8006058:	4813      	ldr	r0, [pc, #76]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 800605a:	f7ff ff6b 	bl	8005f34 <MDI_writeSmallData>
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	b29a      	uxth	r2, r3
 8006062:	89fb      	ldrh	r3, [r7, #14]
 8006064:	4413      	add	r3, r2
 8006066:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,factor); checksumTmp+=factor; //writed factor
 8006068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800606c:	4619      	mov	r1, r3
 800606e:	480e      	ldr	r0, [pc, #56]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 8006070:	f7ff ff60 	bl	8005f34 <MDI_writeSmallData>
 8006074:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006078:	b29a      	uxth	r2, r3
 800607a:	89fb      	ldrh	r3, [r7, #14]
 800607c:	4413      	add	r3, r2
 800607e:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel1,tmp); //checksum first byte
 8006084:	7b7b      	ldrb	r3, [r7, #13]
 8006086:	4619      	mov	r1, r3
 8006088:	4807      	ldr	r0, [pc, #28]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 800608a:	f7ff ff53 	bl	8005f34 <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 800608e:	7b7b      	ldrb	r3, [r7, #13]
 8006090:	43db      	mvns	r3, r3
 8006092:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel1,tmpComp); //checksum second byte
 8006094:	7b3b      	ldrb	r3, [r7, #12]
 8006096:	4619      	mov	r1, r3
 8006098:	4803      	ldr	r0, [pc, #12]	; (80060a8 <MDI_sendDataChannel1+0xdc>)
 800609a:	f7ff ff4b 	bl	8005f34 <MDI_writeSmallData>
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20003608 	.word	0x20003608

080060ac <MDI_getDataChannel1>:
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
uint8_t getFirstData1;
void MDI_getDataChannel1(void){
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel1,(uint8_t*)&getFirstData1,1,TIMEOUTVAL);
 80060b2:	2305      	movs	r3, #5
 80060b4:	2201      	movs	r2, #1
 80060b6:	4930      	ldr	r1, [pc, #192]	; (8006178 <MDI_getDataChannel1+0xcc>)
 80060b8:	4830      	ldr	r0, [pc, #192]	; (800617c <MDI_getDataChannel1+0xd0>)
 80060ba:	f7fc fe00 	bl	8002cbe <HAL_UART_Receive>
	if(0xFF ==getFirstData1){
 80060be:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <MDI_getDataChannel1+0xcc>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2bff      	cmp	r3, #255	; 0xff
 80060c4:	d153      	bne.n	800616e <MDI_getDataChannel1+0xc2>
		HAL_UART_Receive(&MDI_channel1,(uint8_t*)rec1Buff,9,TIMEOUTVAL*9);
 80060c6:	232d      	movs	r3, #45	; 0x2d
 80060c8:	2209      	movs	r2, #9
 80060ca:	492d      	ldr	r1, [pc, #180]	; (8006180 <MDI_getDataChannel1+0xd4>)
 80060cc:	482b      	ldr	r0, [pc, #172]	; (800617c <MDI_getDataChannel1+0xd0>)
 80060ce:	f7fc fdf6 	bl	8002cbe <HAL_UART_Receive>
			if(0xFF==rec1Buff[0]){
 80060d2:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <MDI_getDataChannel1+0xd4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2bff      	cmp	r3, #255	; 0xff
 80060d8:	d13c      	bne.n	8006154 <MDI_getDataChannel1+0xa8>
				uint16_t checksumTmp=0;
 80060da:	2300      	movs	r3, #0
 80060dc:	80fb      	strh	r3, [r7, #6]
				for(uint8_t c=1;c<7;c++)checksumTmp+=rec1Buff[c];
 80060de:	2301      	movs	r3, #1
 80060e0:	717b      	strb	r3, [r7, #5]
 80060e2:	e009      	b.n	80060f8 <MDI_getDataChannel1+0x4c>
 80060e4:	797b      	ldrb	r3, [r7, #5]
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <MDI_getDataChannel1+0xd4>)
 80060e8:	5cd3      	ldrb	r3, [r2, r3]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	4413      	add	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
 80060f2:	797b      	ldrb	r3, [r7, #5]
 80060f4:	3301      	adds	r3, #1
 80060f6:	717b      	strb	r3, [r7, #5]
 80060f8:	797b      	ldrb	r3, [r7, #5]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d9f2      	bls.n	80060e4 <MDI_getDataChannel1+0x38>
				uint8_t tmp =checksumTmp%256;
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	70fb      	strb	r3, [r7, #3]
				uint8_t tmpComp =~tmp;
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	43db      	mvns	r3, r3
 8006106:	70bb      	strb	r3, [r7, #2]
				if(tmp == rec1Buff[7] && tmpComp == rec1Buff[8]){
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <MDI_getDataChannel1+0xd4>)
 800610a:	79db      	ldrb	r3, [r3, #7]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	429a      	cmp	r2, r3
 8006110:	d120      	bne.n	8006154 <MDI_getDataChannel1+0xa8>
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <MDI_getDataChannel1+0xd4>)
 8006114:	7a1b      	ldrb	r3, [r3, #8]
 8006116:	78ba      	ldrb	r2, [r7, #2]
 8006118:	429a      	cmp	r2, r3
 800611a:	d11b      	bne.n	8006154 <MDI_getDataChannel1+0xa8>
					driver1.angle=((uint16_t)rec1Buff[1] << 8) | rec1Buff[2];
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <MDI_getDataChannel1+0xd4>)
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	4b16      	ldr	r3, [pc, #88]	; (8006180 <MDI_getDataChannel1+0xd4>)
 8006126:	789b      	ldrb	r3, [r3, #2]
 8006128:	b21b      	sxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	b29a      	uxth	r2, r3
 8006130:	4b14      	ldr	r3, [pc, #80]	; (8006184 <MDI_getDataChannel1+0xd8>)
 8006132:	809a      	strh	r2, [r3, #4]
					driver1.pid_kd=rec1Buff[3];
 8006134:	4b12      	ldr	r3, [pc, #72]	; (8006180 <MDI_getDataChannel1+0xd4>)
 8006136:	78da      	ldrb	r2, [r3, #3]
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <MDI_getDataChannel1+0xd8>)
 800613a:	701a      	strb	r2, [r3, #0]
					driver1.pid_ki=rec1Buff[4];
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <MDI_getDataChannel1+0xd4>)
 800613e:	791a      	ldrb	r2, [r3, #4]
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <MDI_getDataChannel1+0xd8>)
 8006142:	705a      	strb	r2, [r3, #1]
					driver1.pid_kp=rec1Buff[5];
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <MDI_getDataChannel1+0xd4>)
 8006146:	795a      	ldrb	r2, [r3, #5]
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <MDI_getDataChannel1+0xd8>)
 800614a:	709a      	strb	r2, [r3, #2]
					driver1.factor=rec1Buff[6];
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <MDI_getDataChannel1+0xd4>)
 800614e:	799a      	ldrb	r2, [r3, #6]
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <MDI_getDataChannel1+0xd8>)
 8006152:	70da      	strb	r2, [r3, #3]
				}
			}
			for(uint8_t c=0;c<9;c++)rec1Buff[c]=0;
 8006154:	2300      	movs	r3, #0
 8006156:	713b      	strb	r3, [r7, #4]
 8006158:	e006      	b.n	8006168 <MDI_getDataChannel1+0xbc>
 800615a:	793b      	ldrb	r3, [r7, #4]
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <MDI_getDataChannel1+0xd4>)
 800615e:	2100      	movs	r1, #0
 8006160:	54d1      	strb	r1, [r2, r3]
 8006162:	793b      	ldrb	r3, [r7, #4]
 8006164:	3301      	adds	r3, #1
 8006166:	713b      	strb	r3, [r7, #4]
 8006168:	793b      	ldrb	r3, [r7, #4]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d9f5      	bls.n	800615a <MDI_getDataChannel1+0xae>
	}
}//"%d - %d - %d - %d - %d - %d - %d - %d - %d - %d\n",rec1Buff[0],rec1Buff[1],rec1Buff[2],rec1Buff[3],rec1Buff[4],rec1Buff[5],rec1Buff[6],rec1Buff[7],rec1Buff[8],rec1Buff[9]
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20003719 	.word	0x20003719
 800617c:	20003608 	.word	0x20003608
 8006180:	2000371c 	.word	0x2000371c
 8006184:	20003708 	.word	0x20003708

08006188 <MDI_sendDataChannel2>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4623      	mov	r3, r4
 8006198:	80fb      	strh	r3, [r7, #6]
 800619a:	4603      	mov	r3, r0
 800619c:	717b      	strb	r3, [r7, #5]
 800619e:	460b      	mov	r3, r1
 80061a0:	713b      	strb	r3, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel2,0xFF); checksumTmp+=0xFF;
 80061aa:	21ff      	movs	r1, #255	; 0xff
 80061ac:	4829      	ldr	r0, [pc, #164]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 80061ae:	f7ff feb1 	bl	8005f14 <MDI_writeCommand>
 80061b2:	89fb      	ldrh	r3, [r7, #14]
 80061b4:	33ff      	adds	r3, #255	; 0xff
 80061b6:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel2,0xFF); checksumTmp+=0xFF; //Data transmission started
 80061b8:	21ff      	movs	r1, #255	; 0xff
 80061ba:	4826      	ldr	r0, [pc, #152]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 80061bc:	f7ff feaa 	bl	8005f14 <MDI_writeCommand>
 80061c0:	89fb      	ldrh	r3, [r7, #14]
 80061c2:	33ff      	adds	r3, #255	; 0xff
 80061c4:	81fb      	strh	r3, [r7, #14]
	MDI_2byteWriteData(&MDI_channel2,angleVal); checksumTmp+=angleVal; //2 byte angle val sended
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4822      	ldr	r0, [pc, #136]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 80061cc:	f7ff fee5 	bl	8005f9a <MDI_2byteWriteData>
 80061d0:	89fa      	ldrh	r2, [r7, #14]
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	4413      	add	r3, r2
 80061d6:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kd); checksumTmp+=kd; //writed kd
 80061d8:	797b      	ldrb	r3, [r7, #5]
 80061da:	4619      	mov	r1, r3
 80061dc:	481d      	ldr	r0, [pc, #116]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 80061de:	f7ff fea9 	bl	8005f34 <MDI_writeSmallData>
 80061e2:	797b      	ldrb	r3, [r7, #5]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	89fb      	ldrh	r3, [r7, #14]
 80061e8:	4413      	add	r3, r2
 80061ea:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,ki); checksumTmp+=ki; //writed ki
 80061ec:	793b      	ldrb	r3, [r7, #4]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4818      	ldr	r0, [pc, #96]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 80061f2:	f7ff fe9f 	bl	8005f34 <MDI_writeSmallData>
 80061f6:	793b      	ldrb	r3, [r7, #4]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	89fb      	ldrh	r3, [r7, #14]
 80061fc:	4413      	add	r3, r2
 80061fe:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kp); checksumTmp+=kp; //writed kp
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	4619      	mov	r1, r3
 8006204:	4813      	ldr	r0, [pc, #76]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 8006206:	f7ff fe95 	bl	8005f34 <MDI_writeSmallData>
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	b29a      	uxth	r2, r3
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	4413      	add	r3, r2
 8006212:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,factor); checksumTmp+=factor; //writed factor
 8006214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006218:	4619      	mov	r1, r3
 800621a:	480e      	ldr	r0, [pc, #56]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 800621c:	f7ff fe8a 	bl	8005f34 <MDI_writeSmallData>
 8006220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006224:	b29a      	uxth	r2, r3
 8006226:	89fb      	ldrh	r3, [r7, #14]
 8006228:	4413      	add	r3, r2
 800622a:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 800622c:	89fb      	ldrh	r3, [r7, #14]
 800622e:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel2,tmp); //checksum first byte
 8006230:	7b7b      	ldrb	r3, [r7, #13]
 8006232:	4619      	mov	r1, r3
 8006234:	4807      	ldr	r0, [pc, #28]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 8006236:	f7ff fe7d 	bl	8005f34 <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	43db      	mvns	r3, r3
 800623e:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel2,tmpComp); //checksum second byte
 8006240:	7b3b      	ldrb	r3, [r7, #12]
 8006242:	4619      	mov	r1, r3
 8006244:	4803      	ldr	r0, [pc, #12]	; (8006254 <MDI_sendDataChannel2+0xcc>)
 8006246:	f7ff fe75 	bl	8005f34 <MDI_writeSmallData>
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bd90      	pop	{r4, r7, pc}
 8006252:	bf00      	nop
 8006254:	20003598 	.word	0x20003598

08006258 <MDI_getDataChannel2>:
/**
 * @brief get to Motor Driver 2 values
 * @return none
 */
uint8_t getFirstData2;
void MDI_getDataChannel2(void){
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel1,(uint8_t*)&getFirstData2,1,TIMEOUTVAL);
 800625e:	2305      	movs	r3, #5
 8006260:	2201      	movs	r2, #1
 8006262:	4930      	ldr	r1, [pc, #192]	; (8006324 <MDI_getDataChannel2+0xcc>)
 8006264:	4830      	ldr	r0, [pc, #192]	; (8006328 <MDI_getDataChannel2+0xd0>)
 8006266:	f7fc fd2a 	bl	8002cbe <HAL_UART_Receive>
	if(0xFF ==getFirstData2){
 800626a:	4b2e      	ldr	r3, [pc, #184]	; (8006324 <MDI_getDataChannel2+0xcc>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2bff      	cmp	r3, #255	; 0xff
 8006270:	d153      	bne.n	800631a <MDI_getDataChannel2+0xc2>
	HAL_UART_Receive(&MDI_channel2,(uint8_t*)rec2Buff,10,100);
 8006272:	2364      	movs	r3, #100	; 0x64
 8006274:	220a      	movs	r2, #10
 8006276:	492d      	ldr	r1, [pc, #180]	; (800632c <MDI_getDataChannel2+0xd4>)
 8006278:	482d      	ldr	r0, [pc, #180]	; (8006330 <MDI_getDataChannel2+0xd8>)
 800627a:	f7fc fd20 	bl	8002cbe <HAL_UART_Receive>
	if(0xFF==rec2Buff[0]){
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <MDI_getDataChannel2+0xd4>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2bff      	cmp	r3, #255	; 0xff
 8006284:	d13c      	bne.n	8006300 <MDI_getDataChannel2+0xa8>
		uint16_t checksumTmp=0;
 8006286:	2300      	movs	r3, #0
 8006288:	80fb      	strh	r3, [r7, #6]
		for(uint8_t c=1;c<7;c++)checksumTmp+=rec2Buff[c];
 800628a:	2301      	movs	r3, #1
 800628c:	717b      	strb	r3, [r7, #5]
 800628e:	e009      	b.n	80062a4 <MDI_getDataChannel2+0x4c>
 8006290:	797b      	ldrb	r3, [r7, #5]
 8006292:	4a26      	ldr	r2, [pc, #152]	; (800632c <MDI_getDataChannel2+0xd4>)
 8006294:	5cd3      	ldrb	r3, [r2, r3]
 8006296:	b29a      	uxth	r2, r3
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	4413      	add	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
 800629e:	797b      	ldrb	r3, [r7, #5]
 80062a0:	3301      	adds	r3, #1
 80062a2:	717b      	strb	r3, [r7, #5]
 80062a4:	797b      	ldrb	r3, [r7, #5]
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d9f2      	bls.n	8006290 <MDI_getDataChannel2+0x38>
		uint8_t tmp =checksumTmp%256;
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	70fb      	strb	r3, [r7, #3]
		uint8_t tmpComp =~tmp;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	70bb      	strb	r3, [r7, #2]
		if(tmp == rec2Buff[7] && tmpComp == rec2Buff[8]){
 80062b4:	4b1d      	ldr	r3, [pc, #116]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062b6:	79db      	ldrb	r3, [r3, #7]
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d120      	bne.n	8006300 <MDI_getDataChannel2+0xa8>
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062c0:	7a1b      	ldrb	r3, [r3, #8]
 80062c2:	78ba      	ldrb	r2, [r7, #2]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d11b      	bne.n	8006300 <MDI_getDataChannel2+0xa8>
			driver2.angle=((uint16_t)rec2Buff[1] << 8) | rec2Buff[2];
 80062c8:	4b18      	ldr	r3, [pc, #96]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	4b16      	ldr	r3, [pc, #88]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	b21b      	sxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b21b      	sxth	r3, r3
 80062da:	b29a      	uxth	r2, r3
 80062dc:	4b15      	ldr	r3, [pc, #84]	; (8006334 <MDI_getDataChannel2+0xdc>)
 80062de:	809a      	strh	r2, [r3, #4]
			driver2.pid_kd=rec2Buff[3];
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062e2:	78da      	ldrb	r2, [r3, #3]
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <MDI_getDataChannel2+0xdc>)
 80062e6:	701a      	strb	r2, [r3, #0]
			driver2.pid_ki=rec2Buff[4];
 80062e8:	4b10      	ldr	r3, [pc, #64]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062ea:	791a      	ldrb	r2, [r3, #4]
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <MDI_getDataChannel2+0xdc>)
 80062ee:	705a      	strb	r2, [r3, #1]
			driver2.pid_kp=rec2Buff[5];
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062f2:	795a      	ldrb	r2, [r3, #5]
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <MDI_getDataChannel2+0xdc>)
 80062f6:	709a      	strb	r2, [r3, #2]
			driver2.factor=rec2Buff[6];
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <MDI_getDataChannel2+0xd4>)
 80062fa:	799a      	ldrb	r2, [r3, #6]
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <MDI_getDataChannel2+0xdc>)
 80062fe:	70da      	strb	r2, [r3, #3]
		}
	}
	for(uint8_t c=0;c<9;c++)rec2Buff[c]=0;
 8006300:	2300      	movs	r3, #0
 8006302:	713b      	strb	r3, [r7, #4]
 8006304:	e006      	b.n	8006314 <MDI_getDataChannel2+0xbc>
 8006306:	793b      	ldrb	r3, [r7, #4]
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <MDI_getDataChannel2+0xd4>)
 800630a:	2100      	movs	r1, #0
 800630c:	54d1      	strb	r1, [r2, r3]
 800630e:	793b      	ldrb	r3, [r7, #4]
 8006310:	3301      	adds	r3, #1
 8006312:	713b      	strb	r3, [r7, #4]
 8006314:	793b      	ldrb	r3, [r7, #4]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d9f5      	bls.n	8006306 <MDI_getDataChannel2+0xae>
	}
}//"DRV 2: angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver2.angle,driver2.pid_kd,driver2.pid_ki,driver2.pid_kp,driver2.factor
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20003725 	.word	0x20003725
 8006328:	20003608 	.word	0x20003608
 800632c:	20003710 	.word	0x20003710
 8006330:	20003598 	.word	0x20003598
 8006334:	20003700 	.word	0x20003700

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	2500      	movs	r5, #0
 800633c:	4e0c      	ldr	r6, [pc, #48]	; (8006370 <__libc_init_array+0x38>)
 800633e:	4c0d      	ldr	r4, [pc, #52]	; (8006374 <__libc_init_array+0x3c>)
 8006340:	1ba4      	subs	r4, r4, r6
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	42a5      	cmp	r5, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	f000 f82e 	bl	80063a8 <_init>
 800634c:	2500      	movs	r5, #0
 800634e:	4e0a      	ldr	r6, [pc, #40]	; (8006378 <__libc_init_array+0x40>)
 8006350:	4c0a      	ldr	r4, [pc, #40]	; (800637c <__libc_init_array+0x44>)
 8006352:	1ba4      	subs	r4, r4, r6
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	42a5      	cmp	r5, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006360:	4798      	blx	r3
 8006362:	3501      	adds	r5, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800636a:	4798      	blx	r3
 800636c:	3501      	adds	r5, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	08006534 	.word	0x08006534
 8006374:	08006534 	.word	0x08006534
 8006378:	08006534 	.word	0x08006534
 800637c:	08006538 	.word	0x08006538

08006380 <memcpy>:
 8006380:	b510      	push	{r4, lr}
 8006382:	1e43      	subs	r3, r0, #1
 8006384:	440a      	add	r2, r1
 8006386:	4291      	cmp	r1, r2
 8006388:	d100      	bne.n	800638c <memcpy+0xc>
 800638a:	bd10      	pop	{r4, pc}
 800638c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006394:	e7f7      	b.n	8006386 <memcpy+0x6>

08006396 <memset>:
 8006396:	4603      	mov	r3, r0
 8006398:	4402      	add	r2, r0
 800639a:	4293      	cmp	r3, r2
 800639c:	d100      	bne.n	80063a0 <memset+0xa>
 800639e:	4770      	bx	lr
 80063a0:	f803 1b01 	strb.w	r1, [r3], #1
 80063a4:	e7f9      	b.n	800639a <memset+0x4>
	...

080063a8 <_init>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	bf00      	nop
 80063ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ae:	bc08      	pop	{r3}
 80063b0:	469e      	mov	lr, r3
 80063b2:	4770      	bx	lr

080063b4 <_fini>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr
