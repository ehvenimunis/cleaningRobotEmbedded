
cleaningRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800279c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800279c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d61  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001770  00000000  00000000  00026d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000798  00000000  00000000  00028508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016acc  00000000  00000000  00029360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ec4  00000000  00000000  0003fe2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082bc1  00000000  00000000  00046cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c98b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  000c992c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002730 	.word	0x08002730

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002730 	.word	0x08002730

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa47 	bl	80005e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83d 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f90f 	bl	800037c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f895 	bl	800028c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8e1 	bl	8000328 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readAnalog2Values(&hadc1);
 8000166:	4818      	ldr	r0, [pc, #96]	; (80001c8 <main+0x7c>)
 8000168:	f002 f91e 	bl	80023a8 <readAnalog2Values>
	  MDI_sendDataChannel1(900,200,155,20,1);
 800016c:	2301      	movs	r3, #1
 800016e:	9300      	str	r3, [sp, #0]
 8000170:	2314      	movs	r3, #20
 8000172:	229b      	movs	r2, #155	; 0x9b
 8000174:	21c8      	movs	r1, #200	; 0xc8
 8000176:	f44f 7061 	mov.w	r0, #900	; 0x384
 800017a:	f002 f9d7 	bl	800252c <MDI_sendDataChannel1>
	  MDI_getDataChannel1();
 800017e:	f002 fa45 	bl	800260c <MDI_getDataChannel1>
	  val1=valuesMap(getAnalogValue1(),0,4095,0,1000);
 8000182:	f002 f93d 	bl	8002400 <getAnalogValue1>
 8000186:	4603      	mov	r3, r0
 8000188:	4618      	mov	r0, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	9300      	str	r3, [sp, #0]
 8000190:	2300      	movs	r3, #0
 8000192:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000196:	2100      	movs	r1, #0
 8000198:	f002 f946 	bl	8002428 <valuesMap>
 800019c:	4603      	mov	r3, r0
 800019e:	461a      	mov	r2, r3
 80001a0:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <main+0x80>)
 80001a2:	801a      	strh	r2, [r3, #0]
	  val2=valuesMap(getAnalogValue2(),0,4095,0,1000);
 80001a4:	f002 f936 	bl	8002414 <getAnalogValue2>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80001b8:	2100      	movs	r1, #0
 80001ba:	f002 f935 	bl	8002428 <valuesMap>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <main+0x84>)
 80001c4:	801a      	strh	r2, [r3, #0]
	  readAnalog2Values(&hadc1);
 80001c6:	e7ce      	b.n	8000166 <main+0x1a>
 80001c8:	20000028 	.word	0x20000028
 80001cc:	2000009a 	.word	0x2000009a
 80001d0:	20000098 	.word	0x20000098

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fa9c 	bl	8002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f8d8 	bl	80013e0 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000236:	f000 f8c3 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2102      	movs	r1, #2
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fb42 	bl	80018e0 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000262:	f000 f8ad 	bl	80003c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800026a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fcd0 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800027e:	f000 f89f 	bl	80003c0 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3750      	adds	r7, #80	; 0x50
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <MX_ADC1_Init+0x94>)
 800029e:	4a21      	ldr	r2, [pc, #132]	; (8000324 <MX_ADC1_Init+0x98>)
 80002a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <MX_ADC1_Init+0x94>)
 80002a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <MX_ADC1_Init+0x94>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_ADC1_Init+0x94>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_ADC1_Init+0x94>)
 80002b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_ADC1_Init+0x94>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_ADC1_Init+0x94>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ca:	4815      	ldr	r0, [pc, #84]	; (8000320 <MX_ADC1_Init+0x94>)
 80002cc:	f000 fa0e 	bl	80006ec <HAL_ADC_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002d6:	f000 f873 	bl	80003c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002de:	2301      	movs	r3, #1
 80002e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80002e2:	2306      	movs	r3, #6
 80002e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_ADC1_Init+0x94>)
 80002ec:	f000 fcb6 	bl	8000c5c <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f863 	bl	80003c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002fe:	2302      	movs	r3, #2
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <MX_ADC1_Init+0x94>)
 8000308:	f000 fca8 	bl	8000c5c <HAL_ADC_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000312:	f000 f855 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40012400 	.word	0x40012400

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000360:	f001 fdcc 	bl	8001efc <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f829 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000058 	.word	0x20000058
 8000378:	40013800 	.word	0x40013800

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <MX_GPIO_Init+0x40>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0320 	and.w	r3, r3, #32
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <MX_GPIO_Init+0x40>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0304 	and.w	r3, r3, #4
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <Error_Handler+0x6>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a14      	ldr	r2, [pc, #80]	; (8000498 <HAL_ADC_MspInit+0x6c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d121      	bne.n	8000490 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <HAL_ADC_MspInit+0x70>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <HAL_ADC_MspInit+0x70>)
 8000452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <HAL_ADC_MspInit+0x70>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <HAL_ADC_MspInit+0x70>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a0c      	ldr	r2, [pc, #48]	; (800049c <HAL_ADC_MspInit+0x70>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_ADC_MspInit+0x70>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800047c:	2303      	movs	r3, #3
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	2303      	movs	r3, #3
 8000482:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <HAL_ADC_MspInit+0x74>)
 800048c:	f000 fe4e 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40012400 	.word	0x40012400
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <HAL_UART_MspInit+0x8c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d131      	bne.n	8000528 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_UART_MspInit+0x90>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2303      	movs	r3, #3
 8000500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <HAL_UART_MspInit+0x94>)
 800050a:	f000 fe0f 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <HAL_UART_MspInit+0x94>)
 8000524:	f000 fe02 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40013800 	.word	0x40013800
 8000534:	40021000 	.word	0x40021000
 8000538:	40010800 	.word	0x40010800

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f875 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}

0800058a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000598:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800059a:	e003      	b.n	80005a4 <LoopCopyDataInit>

0800059c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800059e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005a2:	3104      	adds	r1, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005a4:	480a      	ldr	r0, [pc, #40]	; (80005d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005ac:	d3f6      	bcc.n	800059c <CopyDataInit>
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005b0:	e002      	b.n	80005b8 <LoopFillZerobss>

080005b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005b4:	f842 3b04 	str.w	r3, [r2], #4

080005b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005bc:	d3f9      	bcc.n	80005b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005be:	f7ff ffe4 	bl	800058a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c2:	f002 f889 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fdc1 	bl	800014c <main>
  bx lr
 80005ca:	4770      	bx	lr
  ldr r3, =_sidata
 80005cc:	08002790 	.word	0x08002790
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005d8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005dc:	200000b8 	.word	0x200000b8

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_Init+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_Init+0x28>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fd65 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f808 	bl	8000610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f7ff fee2 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x54>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x58>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fd6f 	bl	8001112 <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e00e      	b.n	800065c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d80a      	bhi.n	800065a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000644:	2200      	movs	r2, #0
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 fd45 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_InitTick+0x5c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x1c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x20>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <HAL_IncTick+0x20>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	20000008 	.word	0x20000008
 8000690:	2000009c 	.word	0x2000009c

08000694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <HAL_GetTick+0x10>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	2000009c 	.word	0x2000009c

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff fff0 	bl	8000694 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006c0:	d005      	beq.n	80006ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_Delay+0x40>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ce:	bf00      	nop
 80006d0:	f7ff ffe0 	bl	8000694 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f7      	bhi.n	80006d0 <HAL_Delay+0x28>
  {
  }
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000008 	.word	0x20000008

080006ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e0be      	b.n	800088c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000718:	2b00      	cmp	r3, #0
 800071a:	d109      	bne.n	8000730 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fe7e 	bl	800042c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fbdd 	bl	8000ef0 <ADC_ConversionStop_Disable>
 8000736:	4603      	mov	r3, r0
 8000738:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8099 	bne.w	800087a <HAL_ADC_Init+0x18e>
 8000748:	7dfb      	ldrb	r3, [r7, #23]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 8095 	bne.w	800087a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000754:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000758:	f023 0302 	bic.w	r3, r3, #2
 800075c:	f043 0202 	orr.w	r2, r3, #2
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800076c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7b1b      	ldrb	r3, [r3, #12]
 8000772:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000774:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	4313      	orrs	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000784:	d003      	beq.n	800078e <HAL_ADC_Init+0xa2>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d102      	bne.n	8000794 <HAL_ADC_Init+0xa8>
 800078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000792:	e000      	b.n	8000796 <HAL_ADC_Init+0xaa>
 8000794:	2300      	movs	r3, #0
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7d1b      	ldrb	r3, [r3, #20]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d119      	bne.n	80007d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7b1b      	ldrb	r3, [r3, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d109      	bne.n	80007c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	035a      	lsls	r2, r3, #13
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	e00b      	b.n	80007d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c4:	f043 0220 	orr.w	r2, r3, #32
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d0:	f043 0201 	orr.w	r2, r3, #1
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	430a      	orrs	r2, r1
 80007ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <HAL_ADC_Init+0x1a8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000808:	d003      	beq.n	8000812 <HAL_ADC_Init+0x126>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d104      	bne.n	800081c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	3b01      	subs	r3, #1
 8000818:	051b      	lsls	r3, r3, #20
 800081a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	430a      	orrs	r2, r1
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_ADC_Init+0x1ac>)
 8000838:	4013      	ands	r3, r2
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	429a      	cmp	r2, r3
 800083e:	d10b      	bne.n	8000858 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f023 0303 	bic.w	r3, r3, #3
 800084e:	f043 0201 	orr.w	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000856:	e018      	b.n	800088a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	f023 0312 	bic.w	r3, r3, #18
 8000860:	f043 0210 	orr.w	r2, r3, #16
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	f043 0201 	orr.w	r2, r3, #1
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000878:	e007      	b.n	800088a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087e:	f043 0210 	orr.w	r2, r3, #16
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800088a:	7dfb      	ldrb	r3, [r7, #23]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	ffe1f7fd 	.word	0xffe1f7fd
 8000898:	ff1f0efe 	.word	0xff1f0efe

0800089c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_ADC_Start+0x1a>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e098      	b.n	80009e8 <HAL_ADC_Start+0x14c>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2201      	movs	r2, #1
 80008ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 fac4 	bl	8000e4c <ADC_Enable>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f040 8087 	bne.w	80009de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a41      	ldr	r2, [pc, #260]	; (80009f0 <HAL_ADC_Start+0x154>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d105      	bne.n	80008fa <HAL_ADC_Start+0x5e>
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <HAL_ADC_Start+0x158>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d115      	bne.n	8000926 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000910:	2b00      	cmp	r3, #0
 8000912:	d026      	beq.n	8000962 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800091c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000924:	e01d      	b.n	8000962 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <HAL_ADC_Start+0x158>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d004      	beq.n	8000946 <HAL_ADC_Start+0xaa>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <HAL_ADC_Start+0x154>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10d      	bne.n	8000962 <HAL_ADC_Start+0xc6>
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_ADC_Start+0x158>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800095a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f023 0206 	bic.w	r2, r3, #6
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
 800097a:	e002      	b.n	8000982 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f06f 0202 	mvn.w	r2, #2
 8000992:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800099e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009a2:	d113      	bne.n	80009cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_ADC_Start+0x154>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d105      	bne.n	80009ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_ADC_Start+0x158>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d108      	bne.n	80009cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	e00c      	b.n	80009e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	e003      	b.n	80009e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40012800 	.word	0x40012800
 80009f4:	40012400 	.word	0x40012400

080009f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d101      	bne.n	8000a12 <HAL_ADC_Stop+0x1a>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e01a      	b.n	8000a48 <HAL_ADC_Stop+0x50>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 fa68 	bl	8000ef0 <ADC_ConversionStop_Disable>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d109      	bne.n	8000a3e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a32:	f023 0301 	bic.w	r3, r3, #1
 8000a36:	f043 0201 	orr.w	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a66:	f7ff fe15 	bl	8000694 <HAL_GetTick>
 8000a6a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00b      	beq.n	8000a92 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	f043 0220 	orr.w	r2, r3, #32
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e0c8      	b.n	8000c24 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d12a      	bne.n	8000af6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d123      	bne.n	8000af6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aae:	e01a      	b.n	8000ae6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab6:	d016      	beq.n	8000ae6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <HAL_ADC_PollForConversion+0x7e>
 8000abe:	f7ff fde9 	bl	8000694 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d20b      	bcs.n	8000ae6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad2:	f043 0204 	orr.w	r2, r3, #4
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e09e      	b.n	8000c24 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0dd      	beq.n	8000ab0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000af4:	e06c      	b.n	8000bd0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000af6:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <HAL_ADC_PollForConversion+0x1dc>)
 8000af8:	681c      	ldr	r4, [r3, #0]
 8000afa:	2002      	movs	r0, #2
 8000afc:	f001 f942 	bl	8001d84 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b00:	4603      	mov	r3, r0
 8000b02:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6919      	ldr	r1, [r3, #16]
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <HAL_ADC_PollForConversion+0x1e0>)
 8000b0e:	400b      	ands	r3, r1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d118      	bne.n	8000b46 <HAL_ADC_PollForConversion+0xf6>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68d9      	ldr	r1, [r3, #12]
 8000b1a:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_ADC_PollForConversion+0x1e4>)
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d111      	bne.n	8000b46 <HAL_ADC_PollForConversion+0xf6>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6919      	ldr	r1, [r3, #16]
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <HAL_ADC_PollForConversion+0x1e8>)
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d108      	bne.n	8000b42 <HAL_ADC_PollForConversion+0xf2>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68d9      	ldr	r1, [r3, #12]
 8000b36:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_ADC_PollForConversion+0x1ec>)
 8000b38:	400b      	ands	r3, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_PollForConversion+0xf2>
 8000b3e:	2314      	movs	r3, #20
 8000b40:	e020      	b.n	8000b84 <HAL_ADC_PollForConversion+0x134>
 8000b42:	2329      	movs	r3, #41	; 0x29
 8000b44:	e01e      	b.n	8000b84 <HAL_ADC_PollForConversion+0x134>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6919      	ldr	r1, [r3, #16]
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <HAL_ADC_PollForConversion+0x1e8>)
 8000b4e:	400b      	ands	r3, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d106      	bne.n	8000b62 <HAL_ADC_PollForConversion+0x112>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_ADC_PollForConversion+0x1ec>)
 8000b5c:	400b      	ands	r3, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00d      	beq.n	8000b7e <HAL_ADC_PollForConversion+0x12e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6919      	ldr	r1, [r3, #16]
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_ADC_PollForConversion+0x1f0>)
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d108      	bne.n	8000b82 <HAL_ADC_PollForConversion+0x132>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68d9      	ldr	r1, [r3, #12]
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <HAL_ADC_PollForConversion+0x1f0>)
 8000b78:	400b      	ands	r3, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_ADC_PollForConversion+0x132>
 8000b7e:	2354      	movs	r3, #84	; 0x54
 8000b80:	e000      	b.n	8000b84 <HAL_ADC_PollForConversion+0x134>
 8000b82:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b8a:	e01d      	b.n	8000bc8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b92:	d016      	beq.n	8000bc2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <HAL_ADC_PollForConversion+0x15a>
 8000b9a:	f7ff fd7b 	bl	8000694 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d20b      	bcs.n	8000bc2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	f043 0204 	orr.w	r2, r3, #4
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e030      	b.n	8000c24 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8dd      	bhi.n	8000b8c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f06f 0212 	mvn.w	r2, #18
 8000bd8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bf0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bf4:	d115      	bne.n	8000c22 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d111      	bne.n	8000c22 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	24924924 	.word	0x24924924
 8000c34:	00924924 	.word	0x00924924
 8000c38:	12492492 	.word	0x12492492
 8000c3c:	00492492 	.word	0x00492492
 8000c40:	00249249 	.word	0x00249249

08000c44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x20>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e0dc      	b.n	8000e36 <HAL_ADC_ConfigChannel+0x1da>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d81c      	bhi.n	8000cc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b05      	subs	r3, #5
 8000c9e:	221f      	movs	r2, #31
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b05      	subs	r3, #5
 8000cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc4:	e03c      	b.n	8000d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d81c      	bhi.n	8000d08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b23      	subs	r3, #35	; 0x23
 8000ce0:	221f      	movs	r2, #31
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4019      	ands	r1, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3b23      	subs	r3, #35	; 0x23
 8000cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
 8000d06:	e01b      	b.n	8000d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3b41      	subs	r3, #65	; 0x41
 8000d1a:	221f      	movs	r2, #31
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4019      	ands	r1, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	3b41      	subs	r3, #65	; 0x41
 8000d34:	fa00 f203 	lsl.w	r2, r0, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b09      	cmp	r3, #9
 8000d46:	d91c      	bls.n	8000d82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68d9      	ldr	r1, [r3, #12]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	3b1e      	subs	r3, #30
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4019      	ands	r1, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	6898      	ldr	r0, [r3, #8]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	3b1e      	subs	r3, #30
 8000d74:	fa00 f203 	lsl.w	r2, r0, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	e019      	b.n	8000db6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6919      	ldr	r1, [r3, #16]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	2207      	movs	r2, #7
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4019      	ands	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6898      	ldr	r0, [r3, #8]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	fa00 f203 	lsl.w	r2, r0, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b10      	cmp	r3, #16
 8000dbc:	d003      	beq.n	8000dc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dc2:	2b11      	cmp	r3, #17
 8000dc4:	d132      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d125      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d126      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d11a      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_ADC_ConfigChannel+0x1e8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	0c9a      	lsrs	r2, r3, #18
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0c:	e002      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f9      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x1b2>
 8000e1a:	e007      	b.n	8000e2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f043 0220 	orr.w	r2, r3, #32
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40012400 	.word	0x40012400
 8000e44:	20000000 	.word	0x20000000
 8000e48:	431bde83 	.word	0x431bde83

08000e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d039      	beq.n	8000ede <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0201 	orr.w	r2, r2, #1
 8000e78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <ADC_Enable+0x9c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <ADC_Enable+0xa0>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9b      	lsrs	r3, r3, #18
 8000e86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e88:	e002      	b.n	8000e90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f9      	bne.n	8000e8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e96:	f7ff fbfd 	bl	8000694 <HAL_GetTick>
 8000e9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e9c:	e018      	b.n	8000ed0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e9e:	f7ff fbf9 	bl	8000694 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d911      	bls.n	8000ed0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb0:	f043 0210 	orr.w	r2, r3, #16
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e007      	b.n	8000ee0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d1df      	bne.n	8000e9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	431bde83 	.word	0x431bde83

08000ef0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d127      	bne.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fbbb 	bl	8000694 <HAL_GetTick>
 8000f1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f20:	e014      	b.n	8000f4c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f22:	f7ff fbb7 	bl	8000694 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d90d      	bls.n	8000f4c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f043 0210 	orr.w	r2, r3, #16
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e007      	b.n	8000f5c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d0e3      	beq.n	8000f22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f7ff ff90 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff49 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e127      	b.n	8001390 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8116 	bne.w	800138a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b12      	cmp	r3, #18
 8001164:	d034      	beq.n	80011d0 <HAL_GPIO_Init+0xa4>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d80d      	bhi.n	8001186 <HAL_GPIO_Init+0x5a>
 800116a:	2b02      	cmp	r3, #2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x9a>
 800116e:	2b02      	cmp	r3, #2
 8001170:	d804      	bhi.n	800117c <HAL_GPIO_Init+0x50>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d031      	beq.n	80011da <HAL_GPIO_Init+0xae>
 8001176:	2b01      	cmp	r3, #1
 8001178:	d01c      	beq.n	80011b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117a:	e048      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800117c:	2b03      	cmp	r3, #3
 800117e:	d043      	beq.n	8001208 <HAL_GPIO_Init+0xdc>
 8001180:	2b11      	cmp	r3, #17
 8001182:	d01b      	beq.n	80011bc <HAL_GPIO_Init+0x90>
          break;
 8001184:	e043      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001186:	4a89      	ldr	r2, [pc, #548]	; (80013ac <HAL_GPIO_Init+0x280>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d026      	beq.n	80011da <HAL_GPIO_Init+0xae>
 800118c:	4a87      	ldr	r2, [pc, #540]	; (80013ac <HAL_GPIO_Init+0x280>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d806      	bhi.n	80011a0 <HAL_GPIO_Init+0x74>
 8001192:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <HAL_GPIO_Init+0x284>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d020      	beq.n	80011da <HAL_GPIO_Init+0xae>
 8001198:	4a86      	ldr	r2, [pc, #536]	; (80013b4 <HAL_GPIO_Init+0x288>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01d      	beq.n	80011da <HAL_GPIO_Init+0xae>
          break;
 800119e:	e036      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a0:	4a85      	ldr	r2, [pc, #532]	; (80013b8 <HAL_GPIO_Init+0x28c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0xae>
 80011a6:	4a85      	ldr	r2, [pc, #532]	; (80013bc <HAL_GPIO_Init+0x290>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d016      	beq.n	80011da <HAL_GPIO_Init+0xae>
 80011ac:	4a84      	ldr	r2, [pc, #528]	; (80013c0 <HAL_GPIO_Init+0x294>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xae>
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e028      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e023      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01e      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e019      	b.n	800120e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e012      	b.n	800120e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d801      	bhi.n	8001218 <HAL_GPIO_Init+0xec>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e001      	b.n	800121c <HAL_GPIO_Init+0xf0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d802      	bhi.n	800122a <HAL_GPIO_Init+0xfe>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x104>
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	3b08      	subs	r3, #8
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	210f      	movs	r1, #15
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	6a39      	ldr	r1, [r7, #32]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8096 	beq.w	800138a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800125e:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <HAL_GPIO_Init+0x298>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_GPIO_Init+0x298>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <HAL_GPIO_Init+0x298>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001276:	4a54      	ldr	r2, [pc, #336]	; (80013c8 <HAL_GPIO_Init+0x29c>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_GPIO_Init+0x2a0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x19e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <HAL_GPIO_Init+0x2a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x19a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2a8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x196>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_GPIO_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x192>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012be:	2304      	movs	r3, #4
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012ca:	2300      	movs	r3, #0
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012dc:	493a      	ldr	r1, [pc, #232]	; (80013c8 <HAL_GPIO_Init+0x29c>)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4933      	ldr	r1, [pc, #204]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800130e:	4013      	ands	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	492e      	ldr	r1, [pc, #184]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4929      	ldr	r1, [pc, #164]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001336:	4013      	ands	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	43db      	mvns	r3, r3
 800135c:	491f      	ldr	r1, [pc, #124]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800135e:	4013      	ands	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	491a      	ldr	r1, [pc, #104]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	43db      	mvns	r3, r3
 8001384:	4915      	ldr	r1, [pc, #84]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001386:	4013      	ands	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	3301      	adds	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f aed0 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 80013a0:	bf00      	nop
 80013a2:	372c      	adds	r7, #44	; 0x2c
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	10210000 	.word	0x10210000
 80013b0:	10110000 	.word	0x10110000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10310000 	.word	0x10310000
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10220000 	.word	0x10220000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e26c      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4b8f      	ldr	r3, [pc, #572]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
 8001418:	4b8c      	ldr	r3, [pc, #560]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x12c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e246      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x76>
 8001448:	4b80      	ldr	r3, [pc, #512]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a7f      	ldr	r2, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7a      	ldr	r2, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a77      	ldr	r2, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xbc>
 8001482:	4b72      	ldr	r3, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a71      	ldr	r2, [pc, #452]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6f      	ldr	r3, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a67      	ldr	r2, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff f8ea 	bl	8000694 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff f8e6 	bl	8000694 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1fa      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe4>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff f8d6 	bl	8000694 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff f8d2 	bl	8000694 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1e6      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x10c>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1ba      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4939      	ldr	r1, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x270>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff f88b 	bl	8000694 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff f887 	bl	8000694 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e19b      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4927      	ldr	r1, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x270>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f86a 	bl	8000694 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff f866 	bl	8000694 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e17a      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff f84a 	bl	8000694 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff f846 	bl	8000694 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e15a      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fada 	bl	8001bdc <RCC_Delay>
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff f830 	bl	8000694 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff f82c 	bl	8000694 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d908      	bls.n	8001658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e140      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	42420000 	.word	0x42420000
 8001654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e9      	bne.n	8001638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a6 	beq.w	80017be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b97      	ldr	r3, [pc, #604]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a93      	ldr	r2, [pc, #588]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b8e      	ldr	r3, [pc, #568]	; (80018d8 <HAL_RCC_OscConfig+0x4f8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x4f8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a8a      	ldr	r2, [pc, #552]	; (80018d8 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7fe ffed 	bl	8000694 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7fe ffe9 	bl	8000694 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0fd      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <HAL_RCC_OscConfig+0x4f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016e4:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a7a      	ldr	r2, [pc, #488]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e02d      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x334>
 80016fa:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a72      	ldr	r2, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e01c      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x356>
 800171c:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a63      	ldr	r2, [pc, #396]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7fe ff9d 	bl	8000694 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe ff99 	bl	8000694 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0ab      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ee      	beq.n	800175e <HAL_RCC_OscConfig+0x37e>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7fe ff87 	bl	8000694 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7fe ff83 	bl	8000694 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e095      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a47      	ldr	r2, [pc, #284]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8081 	beq.w	80018ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d061      	beq.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d146      	bne.n	800186a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_OscConfig+0x4fc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7fe ff57 	bl	8000694 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7fe ff53 	bl	8000694 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e067      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	492d      	ldr	r1, [pc, #180]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a19      	ldr	r1, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	430b      	orrs	r3, r1
 8001836:	4927      	ldr	r1, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x4fc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7fe ff27 	bl	8000694 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7fe ff23 	bl	8000694 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e037      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
 8001868:	e02f      	b.n	80018ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_RCC_OscConfig+0x4fc>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7fe ff10 	bl	8000694 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7fe ff0c 	bl	8000694 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e020      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x498>
 8001896:	e018      	b.n	80018ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e013      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42420060 	.word	0x42420060

080018e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0d0      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d910      	bls.n	8001924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4965      	ldr	r1, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800195e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d040      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e073      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e06b      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4936      	ldr	r1, [pc, #216]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7fe fe60 	bl	8000694 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7fe fe5c 	bl	8000694 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e053      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d210      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 0207 	bic.w	r2, r3, #7
 8001a16:	4922      	ldr	r1, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4601      	mov	r1, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	fa21 f303 	lsr.w	r3, r1, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1cc>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fdbe 	bl	8000610 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08002770 	.word	0x08002770
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b490      	push	{r4, r7}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001abc:	1d3c      	adds	r4, r7, #4
 8001abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x46>
 8001af2:	e02d      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af6:	623b      	str	r3, [r7, #32]
      break;
 8001af8:	e02d      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b06:	4413      	add	r3, r2
 8001b08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0c5b      	lsrs	r3, r3, #17
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b26:	4413      	add	r3, r2
 8001b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b32:	fb02 f203 	mul.w	r2, r2, r3
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e004      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	623b      	str	r3, [r7, #32]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b52:	623b      	str	r3, [r7, #32]
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc90      	pop	{r4, r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	08002748 	.word	0x08002748
 8001b68:	08002758 	.word	0x08002758
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	007a1200 	.word	0x007a1200
 8001b74:	003d0900 	.word	0x003d0900

08001b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff2 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001b94:	4601      	mov	r1, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08002780 	.word	0x08002780

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0adb      	lsrs	r3, r3, #11
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002780 	.word	0x08002780

08001bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <RCC_Delay+0x34>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <RCC_Delay+0x38>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf8:	bf00      	nop
  }
  while (Delay --);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <RCC_Delay+0x1c>
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	10624dd3 	.word	0x10624dd3

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d07d      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a4b      	ldr	r2, [pc, #300]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7fe fd0c 	bl	8000694 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	e008      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fd08 	bl	8000694 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e06d      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d02e      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d027      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d014      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe fcd7 	bl	8000694 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f7fe fcd3 	bl	8000694 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e036      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ee      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4917      	ldr	r1, [pc, #92]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	490b      	ldr	r1, [pc, #44]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4904      	ldr	r1, [pc, #16]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420440 	.word	0x42420440

08001d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b08d      	sub	sp, #52	; 0x34
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001d8e:	f107 040c 	add.w	r4, r7, #12
 8001d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d07f      	beq.n	8001eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d002      	beq.n	8001dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d048      	beq.n	8001e52 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001dc0:	e08b      	b.n	8001eda <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001dc8:	4b48      	ldr	r3, [pc, #288]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d07f      	beq.n	8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001de0:	4413      	add	r3, r2
 8001de2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001de6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d018      	beq.n	8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0c5b      	lsrs	r3, r3, #17
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e00:	4413      	add	r3, r2
 8001e02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e12:	4a37      	ldr	r2, [pc, #220]	; (8001ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e22:	e004      	b.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e40:	e048      	b.n	8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e50:	e040      	b.n	8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e62:	d108      	bne.n	8001e76 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e74:	e01f      	b.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d109      	bne.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001e8e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e94:	e00f      	b.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d014      	beq.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001eae:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001eb4:	e010      	b.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001eb8:	f7ff fe7c 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0b9b      	lsrs	r3, r3, #14
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001ed4:	bf00      	nop
 8001ed6:	e000      	b.n	8001eda <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001ed8:	bf00      	nop
    }
  }
  return (frequency);
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3734      	adds	r7, #52	; 0x34
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	0800275c 	.word	0x0800275c
 8001ee8:	0800276c 	.word	0x0800276c
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	003d0900 	.word	0x003d0900
 8001ef8:	aaaaaaab 	.word	0xaaaaaaab

08001efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e03f      	b.n	8001f8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fabe 	bl	80004a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f9a3 	bl	800228c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b08a      	sub	sp, #40	; 0x28
 8001f9a:	af02      	add	r7, sp, #8
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d17c      	bne.n	80020b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_UART_Transmit+0x2c>
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e075      	b.n	80020b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_UART_Transmit+0x3e>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e06e      	b.n	80020b2 <HAL_UART_Transmit+0x11c>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	; 0x21
 8001fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fea:	f7fe fb53 	bl	8000694 <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002004:	d108      	bne.n	8002018 <HAL_UART_Transmit+0x82>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e003      	b.n	8002020 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002028:	e02a      	b.n	8002080 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f8df 	bl	80021f8 <UART_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e036      	b.n	80020b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10b      	bne.n	8002062 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3302      	adds	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	e007      	b.n	8002072 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3301      	adds	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1cf      	bne.n	800202a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f8af 	bl	80021f8 <UART_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e006      	b.n	80020b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	; 0x28
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	f040 8089 	bne.w	80021ee <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_UART_Receive+0x2e>
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e081      	b.n	80021f0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Receive+0x40>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e07a      	b.n	80021f0 <HAL_UART_Receive+0x136>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2222      	movs	r2, #34	; 0x22
 800210c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002110:	f7fe fac0 	bl	8000694 <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212a:	d108      	bne.n	800213e <HAL_UART_Receive+0x84>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e003      	b.n	8002146 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800214e:	e043      	b.n	80021d8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2200      	movs	r2, #0
 8002158:	2120      	movs	r1, #32
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f84c 	bl	80021f8 <UART_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e042      	b.n	80021f0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10c      	bne.n	800218a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217c:	b29a      	uxth	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3302      	adds	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e01f      	b.n	80021ca <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002192:	d007      	beq.n	80021a4 <HAL_UART_Receive+0xea>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <HAL_UART_Receive+0xf8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e008      	b.n	80021c4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3301      	adds	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1b6      	bne.n	8002150 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002208:	e02c      	b.n	8002264 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002210:	d028      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <UART_WaitOnFlagUntilTimeout+0x30>
 8002218:	f7fe fa3c 	bl	8000694 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d21d      	bcs.n	8002264 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002236:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e00f      	b.n	8002284 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d0c3      	beq.n	800220a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022c6:	f023 030c 	bic.w	r3, r3, #12
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <UART_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fc5e 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	e002      	b.n	8002302 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022fc:	f7ff fc46 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <UART_SetConfig+0x118>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	0119      	lsls	r1, r3, #4
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb2 f2f3 	udiv	r2, r2, r3
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <UART_SetConfig+0x118>)
 800233a:	fba3 0302 	umull	r0, r3, r3, r2
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	fb00 f303 	mul.w	r3, r0, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	3332      	adds	r3, #50	; 0x32
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <UART_SetConfig+0x118>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	4419      	add	r1, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009a      	lsls	r2, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <UART_SetConfig+0x118>)
 8002372:	fba3 0302 	umull	r0, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	fb00 f303 	mul.w	r3, r0, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	3332      	adds	r3, #50	; 0x32
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <UART_SetConfig+0x118>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	440a      	add	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013800 	.word	0x40013800
 80023a4:	51eb851f 	.word	0x51eb851f

080023a8 <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	  HAL_Delay(100);
 80023b0:	2064      	movs	r0, #100	; 0x64
 80023b2:	f7fe f979 	bl	80006a8 <HAL_Delay>
	  HAL_ADC_Start(adc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa70 	bl	800089c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc, ADCTIMEOUT);
 80023bc:	2164      	movs	r1, #100	; 0x64
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fb46 	bl	8000a50 <HAL_ADC_PollForConversion>
	  analogValue1 = HAL_ADC_GetValue(adc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fc3d 	bl	8000c44 <HAL_ADC_GetValue>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <readAnalog2Values+0x50>)
 80023d0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(adc, ADCTIMEOUT);
 80023d2:	2164      	movs	r1, #100	; 0x64
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fb3b 	bl	8000a50 <HAL_ADC_PollForConversion>
	  analogValue2 = HAL_ADC_GetValue(adc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fc32 	bl	8000c44 <HAL_ADC_GetValue>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <readAnalog2Values+0x54>)
 80023e6:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7fe fb05 	bl	80009f8 <HAL_ADC_Stop>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200000a2 	.word	0x200000a2
 80023fc:	200000a0 	.word	0x200000a0

08002400 <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <getAnalogValue1+0x10>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	200000a2 	.word	0x200000a2

08002414 <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <getAnalogValue2+0x10>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	200000a0 	.word	0x200000a0

08002428 <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 8002428:	b490      	push	{r4, r7}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	80fb      	strh	r3, [r7, #6]
 800243a:	4603      	mov	r3, r0
 800243c:	80bb      	strh	r3, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]
 8002442:	4613      	mov	r3, r2
 8002444:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	88bb      	ldrh	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	8a39      	ldrh	r1, [r7, #16]
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	1a8a      	subs	r2, r1, r2
 8002452:	fb02 f203 	mul.w	r2, r2, r3
 8002456:	8879      	ldrh	r1, [r7, #2]
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	1acb      	subs	r3, r1, r3
 800245c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002460:	b29a      	uxth	r2, r3
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	4413      	add	r3, r2
 8002466:	b29b      	uxth	r3, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bc90      	pop	{r4, r7}
 8002470:	4770      	bx	lr

08002472 <MDI_writeCommand>:
 * @brief Write command to Motor Driver
 * @param uartChannel -> get uart channel
 * @param cmd -> command to write
 * @return none
 */
static void MDI_writeCommand(UART_HandleTypeDef *uartChannel,uint8_t cmd){
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*) &cmd,sizeof(cmd),TIMEOUTVAL);
 800247e:	1cf9      	adds	r1, r7, #3
 8002480:	2305      	movs	r3, #5
 8002482:	2201      	movs	r2, #1
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fd86 	bl	8001f96 <HAL_UART_Transmit>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel,uint8_t data){
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*)&data,sizeof(data),TIMEOUTVAL);
 800249e:	1cf9      	adds	r1, r7, #3
 80024a0:	2305      	movs	r3, #5
 80024a2:	2201      	movs	r2, #1
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fd76 	bl	8001f96 <HAL_UART_Transmit>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <MDI_writeBigData>:
 * @param uartChannel -> get uart channel
 * @param buff -> get data array
 * @param buff_size -> get data array size
 * @return none
 */
static void MDI_writeBigData(UART_HandleTypeDef *uartChannel,uint8_t *buff, size_t buff_size){
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
	while (buff_size > 0) {
 80024be:	e014      	b.n	80024ea <MDI_writeBigData+0x38>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c6:	4293      	cmp	r3, r2
 80024c8:	bf28      	it	cs
 80024ca:	4613      	movcs	r3, r2
 80024cc:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(uartChannel, buff, chunk_size, TIMEOUTVAL);
 80024ce:	8afa      	ldrh	r2, [r7, #22]
 80024d0:	2305      	movs	r3, #5
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff fd5e 	bl	8001f96 <HAL_UART_Transmit>
		buff += chunk_size;
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	4413      	add	r3, r2
 80024e0:	60bb      	str	r3, [r7, #8]
		buff_size -= chunk_size;
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	607b      	str	r3, [r7, #4]
	while (buff_size > 0) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e7      	bne.n	80024c0 <MDI_writeBigData+0xe>
	}
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <MDI_2byteWriteData>:
 * @brief Write  2 byte data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> get 2 byte data
 * @return none
 */
void MDI_2byteWriteData(UART_HandleTypeDef *uartChannel,uint16_t data){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
	uint8_t arrTmp[] = {data >> 8, data & 0xFF};
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	733b      	strb	r3, [r7, #12]
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	737b      	strb	r3, [r7, #13]
	MDI_writeBigData(uartChannel,arrTmp,sizeof(arrTmp));
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	2202      	movs	r2, #2
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffc8 	bl	80024b2 <MDI_writeBigData>

}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <MDI_sendDataChannel1>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	4604      	mov	r4, r0
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	80fb      	strh	r3, [r7, #6]
 800253e:	4603      	mov	r3, r0
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	460b      	mov	r3, r1
 8002544:	713b      	strb	r3, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 800254a:	2300      	movs	r3, #0
 800254c:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel1,0xFF);
 800254e:	21ff      	movs	r1, #255	; 0xff
 8002550:	482d      	ldr	r0, [pc, #180]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 8002552:	f7ff ff8e 	bl	8002472 <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel1,0xFF); //Data transmission started
 8002556:	21ff      	movs	r1, #255	; 0xff
 8002558:	482b      	ldr	r0, [pc, #172]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 800255a:	f7ff ff8a 	bl	8002472 <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel1,angleVal);
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4619      	mov	r1, r3
 8002562:	4829      	ldr	r0, [pc, #164]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 8002564:	f7ff ffc8 	bl	80024f8 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	723b      	strb	r3, [r7, #8]
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8002578:	7a3b      	ldrb	r3, [r7, #8]
 800257a:	b29a      	uxth	r2, r3
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	4413      	add	r3, r2
 8002580:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8002582:	7a7b      	ldrb	r3, [r7, #9]
 8002584:	b29a      	uxth	r2, r3
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	4413      	add	r3, r2
 800258a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kd); checksumTmp+=kd; //writed kd
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	4619      	mov	r1, r3
 8002590:	481d      	ldr	r0, [pc, #116]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 8002592:	f7ff ff7e 	bl	8002492 <MDI_writeSmallData>
 8002596:	797b      	ldrb	r3, [r7, #5]
 8002598:	b29a      	uxth	r2, r3
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	4413      	add	r3, r2
 800259e:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,ki); checksumTmp+=ki; //writed ki
 80025a0:	793b      	ldrb	r3, [r7, #4]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4818      	ldr	r0, [pc, #96]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 80025a6:	f7ff ff74 	bl	8002492 <MDI_writeSmallData>
 80025aa:	793b      	ldrb	r3, [r7, #4]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	4413      	add	r3, r2
 80025b2:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kp); checksumTmp+=kp; //writed kp
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4813      	ldr	r0, [pc, #76]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 80025ba:	f7ff ff6a 	bl	8002492 <MDI_writeSmallData>
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	4413      	add	r3, r2
 80025c6:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,factor); checksumTmp+=factor; //writed factor
 80025c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025cc:	4619      	mov	r1, r3
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 80025d0:	f7ff ff5f 	bl	8002492 <MDI_writeSmallData>
 80025d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	89fb      	ldrh	r3, [r7, #14]
 80025dc:	4413      	add	r3, r2
 80025de:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel1,tmp); //checksum first byte
 80025e4:	7b7b      	ldrb	r3, [r7, #13]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 80025ea:	f7ff ff52 	bl	8002492 <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 80025ee:	7b7b      	ldrb	r3, [r7, #13]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel1,tmpComp); //checksum second byte
 80025f4:	7b3b      	ldrb	r3, [r7, #12]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <MDI_sendDataChannel1+0xdc>)
 80025fa:	f7ff ff4a 	bl	8002492 <MDI_writeSmallData>
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop
 8002608:	20000058 	.word	0x20000058

0800260c <MDI_getDataChannel1>:
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1(void){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel1,(uint8_t*)rec1Buff,10,50);
 8002612:	2332      	movs	r3, #50	; 0x32
 8002614:	220a      	movs	r2, #10
 8002616:	492d      	ldr	r1, [pc, #180]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002618:	482d      	ldr	r0, [pc, #180]	; (80026d0 <MDI_getDataChannel1+0xc4>)
 800261a:	f7ff fd4e 	bl	80020ba <HAL_UART_Receive>
	if(0xFF==rec1Buff[0] && 0xFF==rec1Buff[1]){
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d140      	bne.n	80026a8 <MDI_getDataChannel1+0x9c>
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d13c      	bne.n	80026a8 <MDI_getDataChannel1+0x9c>
		uint16_t checksumTmp=0;
 800262e:	2300      	movs	r3, #0
 8002630:	80fb      	strh	r3, [r7, #6]
		for(uint8_t c=2;c<8;c++)checksumTmp+=rec1Buff[c];
 8002632:	2302      	movs	r3, #2
 8002634:	717b      	strb	r3, [r7, #5]
 8002636:	e009      	b.n	800264c <MDI_getDataChannel1+0x40>
 8002638:	797b      	ldrb	r3, [r7, #5]
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <MDI_getDataChannel1+0xc0>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	b29a      	uxth	r2, r3
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4413      	add	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	3301      	adds	r3, #1
 800264a:	717b      	strb	r3, [r7, #5]
 800264c:	797b      	ldrb	r3, [r7, #5]
 800264e:	2b07      	cmp	r3, #7
 8002650:	d9f2      	bls.n	8002638 <MDI_getDataChannel1+0x2c>
		uint8_t tmp =checksumTmp%256;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	70fb      	strb	r3, [r7, #3]
		uint8_t tmpComp =~tmp;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	43db      	mvns	r3, r3
 800265a:	70bb      	strb	r3, [r7, #2]
		if(tmp == rec1Buff[8] && tmpComp == rec1Buff[9]){
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <MDI_getDataChannel1+0xc0>)
 800265e:	7a1b      	ldrb	r3, [r3, #8]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	429a      	cmp	r2, r3
 8002664:	d120      	bne.n	80026a8 <MDI_getDataChannel1+0x9c>
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002668:	7a5b      	ldrb	r3, [r3, #9]
 800266a:	78ba      	ldrb	r2, [r7, #2]
 800266c:	429a      	cmp	r2, r3
 800266e:	d11b      	bne.n	80026a8 <MDI_getDataChannel1+0x9c>
			driver1.angle=((uint16_t)rec1Buff[2] << 8) | rec1Buff[3];
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002672:	789b      	ldrb	r3, [r3, #2]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b21a      	sxth	r2, r3
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MDI_getDataChannel1+0xc0>)
 800267a:	78db      	ldrb	r3, [r3, #3]
 800267c:	b21b      	sxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b21b      	sxth	r3, r3
 8002682:	b29a      	uxth	r2, r3
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <MDI_getDataChannel1+0xc8>)
 8002686:	809a      	strh	r2, [r3, #4]
			driver1.pid_kd=rec1Buff[4];
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MDI_getDataChannel1+0xc0>)
 800268a:	791a      	ldrb	r2, [r3, #4]
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MDI_getDataChannel1+0xc8>)
 800268e:	701a      	strb	r2, [r3, #0]
			driver1.pid_ki=rec1Buff[5];
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MDI_getDataChannel1+0xc0>)
 8002692:	795a      	ldrb	r2, [r3, #5]
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <MDI_getDataChannel1+0xc8>)
 8002696:	705a      	strb	r2, [r3, #1]
			driver1.pid_kp=rec1Buff[6];
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MDI_getDataChannel1+0xc0>)
 800269a:	799a      	ldrb	r2, [r3, #6]
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <MDI_getDataChannel1+0xc8>)
 800269e:	709a      	strb	r2, [r3, #2]
			driver1.factor=rec1Buff[7];
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MDI_getDataChannel1+0xc0>)
 80026a2:	79da      	ldrb	r2, [r3, #7]
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MDI_getDataChannel1+0xc8>)
 80026a6:	70da      	strb	r2, [r3, #3]
		}
	}
	for(uint8_t c=2;c<8;c++)rec1Buff[c]=0;
 80026a8:	2302      	movs	r3, #2
 80026aa:	713b      	strb	r3, [r7, #4]
 80026ac:	e006      	b.n	80026bc <MDI_getDataChannel1+0xb0>
 80026ae:	793b      	ldrb	r3, [r7, #4]
 80026b0:	4a06      	ldr	r2, [pc, #24]	; (80026cc <MDI_getDataChannel1+0xc0>)
 80026b2:	2100      	movs	r1, #0
 80026b4:	54d1      	strb	r1, [r2, r3]
 80026b6:	793b      	ldrb	r3, [r7, #4]
 80026b8:	3301      	adds	r3, #1
 80026ba:	713b      	strb	r3, [r7, #4]
 80026bc:	793b      	ldrb	r3, [r7, #4]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	d9f5      	bls.n	80026ae <MDI_getDataChannel1+0xa2>
	//"angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver1.angle,driver1.pid_kd,driver1.pid_ki,driver1.pid_kp,driver1.factor
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200000ac 	.word	0x200000ac
 80026d0:	20000058 	.word	0x20000058
 80026d4:	200000a4 	.word	0x200000a4

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	2500      	movs	r5, #0
 80026dc:	4e0c      	ldr	r6, [pc, #48]	; (8002710 <__libc_init_array+0x38>)
 80026de:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026e0:	1ba4      	subs	r4, r4, r6
 80026e2:	10a4      	asrs	r4, r4, #2
 80026e4:	42a5      	cmp	r5, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	f000 f822 	bl	8002730 <_init>
 80026ec:	2500      	movs	r5, #0
 80026ee:	4e0a      	ldr	r6, [pc, #40]	; (8002718 <__libc_init_array+0x40>)
 80026f0:	4c0a      	ldr	r4, [pc, #40]	; (800271c <__libc_init_array+0x44>)
 80026f2:	1ba4      	subs	r4, r4, r6
 80026f4:	10a4      	asrs	r4, r4, #2
 80026f6:	42a5      	cmp	r5, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002700:	4798      	blx	r3
 8002702:	3501      	adds	r5, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270a:	4798      	blx	r3
 800270c:	3501      	adds	r5, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002788 	.word	0x08002788
 8002714:	08002788 	.word	0x08002788
 8002718:	08002788 	.word	0x08002788
 800271c:	0800278c 	.word	0x0800278c

08002720 <memset>:
 8002720:	4603      	mov	r3, r0
 8002722:	4402      	add	r2, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
